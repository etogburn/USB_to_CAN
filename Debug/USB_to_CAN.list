
USB_to_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3ac  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a544  0800a544  0000b544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ac  0800a5ac  0000c0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5ac  0800a5ac  0000b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b4  0800a5b4  0000c0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b4  0800a5b4  0000b5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5b8  0800a5b8  0000b5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800a5bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f18  200000fc  0800a6b8  0000c0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002014  0800a6b8  0000d014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016dd1  00000000  00000000  0000c12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004051  00000000  00000000  00022efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00026f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da7  00000000  00000000  00028170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d50  00000000  00000000  00028f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192b4  00000000  00000000  00042c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8d9  00000000  00000000  0005bf1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e87f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004904  00000000  00000000  000e8838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ed13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a52c 	.word	0x0800a52c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	0800a52c 	.word	0x0800a52c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80004ce:	2300      	movs	r3, #0
 80004d0:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80004da:	2300      	movs	r3, #0
 80004dc:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 80004de:	2300      	movs	r3, #0
 80004e0:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80004e2:	2300      	movs	r3, #0
 80004e4:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80004e6:	2300      	movs	r3, #0
 80004e8:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80004ea:	2300      	movs	r3, #0
 80004ec:	70fb      	strb	r3, [r7, #3]

  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 80004ee:	2300      	movs	r3, #0
 80004f0:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80004f2:	2300      	movs	r3, #0
 80004f4:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80004f6:	2300      	movs	r3, #0
 80004f8:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80004fa:	2300      	movs	r3, #0
 80004fc:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000502:	2308      	movs	r3, #8
 8000504:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 800050e:	2300      	movs	r3, #0
 8000510:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800051e:	2300      	movs	r3, #0
 8000520:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000532:	2300      	movs	r3, #0
 8000534:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000542:	2308      	movs	r3, #8
 8000544:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	72fb      	strb	r3, [r7, #11]

  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 800054e:	f000 fc69 	bl	8000e24 <MCP2515_Initialize>
 8000552:	4603      	mov	r3, r0
 8000554:	f083 0301 	eor.w	r3, r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <CANSPI_Initialize+0x9a>
  {
    return false;
 800055e:	2300      	movs	r3, #0
 8000560:	e05e      	b.n	8000620 <CANSPI_Initialize+0x158>
  }

  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000562:	f000 fc81 	bl	8000e68 <MCP2515_SetConfigMode>
 8000566:	4603      	mov	r3, r0
 8000568:	f083 0301 	eor.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <CANSPI_Initialize+0xae>
  {
    return false;
 8000572:	2300      	movs	r3, #0
 8000574:	e054      	b.n	8000620 <CANSPI_Initialize+0x158>
  }

  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	461a      	mov	r2, r3
 800057a:	2123      	movs	r1, #35	@ 0x23
 800057c:	2020      	movs	r0, #32
 800057e:	f000 fcf5 	bl	8000f6c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000582:	463b      	mov	r3, r7
 8000584:	461a      	mov	r2, r3
 8000586:	2127      	movs	r1, #39	@ 0x27
 8000588:	2024      	movs	r0, #36	@ 0x24
 800058a:	f000 fcef 	bl	8000f6c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	461a      	mov	r2, r3
 8000594:	2103      	movs	r1, #3
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fce8 	bl	8000f6c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	461a      	mov	r2, r3
 80005a2:	2107      	movs	r1, #7
 80005a4:	2004      	movs	r0, #4
 80005a6:	f000 fce1 	bl	8000f6c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	461a      	mov	r2, r3
 80005b0:	210b      	movs	r1, #11
 80005b2:	2008      	movs	r0, #8
 80005b4:	f000 fcda 	bl	8000f6c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	461a      	mov	r2, r3
 80005be:	2113      	movs	r1, #19
 80005c0:	2010      	movs	r0, #16
 80005c2:	f000 fcd3 	bl	8000f6c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	461a      	mov	r2, r3
 80005cc:	2117      	movs	r1, #23
 80005ce:	2014      	movs	r0, #20
 80005d0:	f000 fccc 	bl	8000f6c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	461a      	mov	r2, r3
 80005da:	211b      	movs	r1, #27
 80005dc:	2018      	movs	r0, #24
 80005de:	f000 fcc5 	bl	8000f6c <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80005e2:	2104      	movs	r1, #4
 80005e4:	2060      	movs	r0, #96	@ 0x60
 80005e6:	f000 fc9d 	bl	8000f24 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80005ea:	2101      	movs	r1, #1
 80005ec:	2070      	movs	r0, #112	@ 0x70
 80005ee:	f000 fc99 	bl	8000f24 <MCP2515_WriteByte>
  * tbit = 1tq + 2tq + 2tq + 3tq = 8tq
  * 8tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80005f2:	2100      	movs	r1, #0
 80005f4:	202a      	movs	r0, #42	@ 0x2a
 80005f6:	f000 fc95 	bl	8000f24 <MCP2515_WriteByte>

  /* 1 1 001(2tq) 001(2tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xC9);
 80005fa:	21c9      	movs	r1, #201	@ 0xc9
 80005fc:	2029      	movs	r0, #41	@ 0x29
 80005fe:	f000 fc91 	bl	8000f24 <MCP2515_WriteByte>

    /* 1 0 000 010(3tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x82);
 8000602:	2182      	movs	r1, #130	@ 0x82
 8000604:	2028      	movs	r0, #40	@ 0x28
 8000606:	f000 fc8d 	bl	8000f24 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800060a:	f000 fc4b 	bl	8000ea4 <MCP2515_SetNormalMode>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <CANSPI_Initialize+0x156>
    return false;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <CANSPI_Initialize+0x158>

  return true;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000634:	4b36      	ldr	r3, [pc, #216]	@ (8000710 <CANSPI_Transmit+0xe8>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800063a:	4b35      	ldr	r3, [pc, #212]	@ (8000710 <CANSPI_Transmit+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000640:	4b33      	ldr	r3, [pc, #204]	@ (8000710 <CANSPI_Transmit+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000646:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <CANSPI_Transmit+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 800064c:	f000 fcfc 	bl	8001048 <MCP2515_ReadStatus>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <CANSPI_Transmit+0xec>)
 8000656:	701a      	strb	r2, [r3, #0]

  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000658:	4b2e      	ldr	r3, [pc, #184]	@ (8000714 <CANSPI_Transmit+0xec>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d115      	bne.n	8000692 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6858      	ldr	r0, [r3, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	4a28      	ldr	r2, [pc, #160]	@ (8000710 <CANSPI_Transmit+0xe8>)
 8000670:	4619      	mov	r1, r3
 8000672:	f000 f851 	bl	8000718 <convertCANid2Reg>

    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7a1a      	ldrb	r2, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3309      	adds	r3, #9
 800067e:	4924      	ldr	r1, [pc, #144]	@ (8000710 <CANSPI_Transmit+0xe8>)
 8000680:	2040      	movs	r0, #64	@ 0x40
 8000682:	f000 fc9d 	bl	8000fc0 <MCP2515_LoadTxSequence>

    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000686:	2081      	movs	r0, #129	@ 0x81
 8000688:	f000 fcc4 	bl	8001014 <MCP2515_RequestToSend>

    returnValue = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	e038      	b.n	8000704 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <CANSPI_Transmit+0xec>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d115      	bne.n	80006cc <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6858      	ldr	r0, [r3, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4a19      	ldr	r2, [pc, #100]	@ (8000710 <CANSPI_Transmit+0xe8>)
 80006aa:	4619      	mov	r1, r3
 80006ac:	f000 f834 	bl	8000718 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7a1a      	ldrb	r2, [r3, #8]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3309      	adds	r3, #9
 80006b8:	4915      	ldr	r1, [pc, #84]	@ (8000710 <CANSPI_Transmit+0xe8>)
 80006ba:	2042      	movs	r0, #66	@ 0x42
 80006bc:	f000 fc80 	bl	8000fc0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80006c0:	2082      	movs	r0, #130	@ 0x82
 80006c2:	f000 fca7 	bl	8001014 <MCP2515_RequestToSend>

    returnValue = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e01b      	b.n	8000704 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <CANSPI_Transmit+0xec>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d114      	bne.n	8000704 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6858      	ldr	r0, [r3, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <CANSPI_Transmit+0xe8>)
 80006e4:	4619      	mov	r1, r3
 80006e6:	f000 f817 	bl	8000718 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7a1a      	ldrb	r2, [r3, #8]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3309      	adds	r3, #9
 80006f2:	4907      	ldr	r1, [pc, #28]	@ (8000710 <CANSPI_Transmit+0xe8>)
 80006f4:	2044      	movs	r0, #68	@ 0x44
 80006f6:	f000 fc63 	bl	8000fc0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80006fa:	2084      	movs	r0, #132	@ 0x84
 80006fc:	f000 fc8a 	bl	8001014 <MCP2515_RequestToSend>

    returnValue = 1;
 8000700:	2301      	movs	r3, #1
 8000702:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000011c 	.word	0x2000011c
 8000714:	20000118 	.word	0x20000118

08000718 <convertCANid2Reg>:
  return (returnValue);
}

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8000718:	b480      	push	{r7}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	460b      	mov	r3, r1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d12e      	bne.n	800078e <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f003 0303 	and.w	r3, r3, #3
 8000754:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	f023 031f 	bic.w	r3, r3, #31
 8000764:	b2da      	uxtb	r2, r3
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	4413      	add	r3, r2
 800076a:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800076c:	7dfb      	ldrb	r3, [r7, #23]
 800076e:	3308      	adds	r3, #8
 8000770:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000772:	7dfb      	ldrb	r3, [r7, #23]
 8000774:	f023 0314 	bic.w	r3, r3, #20
 8000778:	b2da      	uxtb	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800078c:	e013      	b.n	80007b6 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	015b      	lsls	r3, r3, #5
 800079e:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	701a      	strb	r2, [r3, #0]
}
 80007b6:	bf00      	nop
 80007b8:	371c      	adds	r7, #28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <Coms_IncIdx>:
#ifdef HAS_USB_COMMS
#include "usbd_cdc_if.h"
#endif
#include "usart.h"

static void Coms_IncIdx(uint8_t *idx) {
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
	(*idx)++;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	701a      	strb	r2, [r3, #0]
	if(*idx >= FIFO_SIZE) (*idx) = 0;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b07      	cmp	r3, #7
 80007dc:	d902      	bls.n	80007e4 <Coms_IncIdx+0x22>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <ComsHandler_PacketToBuf>:

static void ComsHandler_PacketToBuf(DecodedPacket_t *packet, StringBuffer_t *buffer) {
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]

	if(packet->invalid) return;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7adb      	ldrb	r3, [r3, #11]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d14c      	bne.n	800089c <ComsHandler_PacketToBuf+0xac>
	buffer->length = 5 + packet->length;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	7a9b      	ldrb	r3, [r3, #10]
 8000806:	3305      	adds	r3, #5
 8000808:	b2da      	uxtb	r2, r3
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	701a      	strb	r2, [r3, #0]

	buffer->data[0] = START_BYTE;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	22aa      	movs	r2, #170	@ 0xaa
 8000812:	705a      	strb	r2, [r3, #1]
	buffer->data[1] = packet->length;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a9a      	ldrb	r2, [r3, #10]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	709a      	strb	r2, [r3, #2]
	buffer->data[2] = (packet->command & 0xFF00) >> 8;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	b29b      	uxth	r3, r3
 8000824:	b2da      	uxtb	r2, r3
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	70da      	strb	r2, [r3, #3]
	buffer->data[3] = packet->command & 0x00FF;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 8000834:	2304      	movs	r3, #4
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	e00c      	b.n	8000854 <ComsHandler_PacketToBuf+0x64>
		buffer->data[i] = packet->data[i-4];
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	1f1a      	subs	r2, r3, #4
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	440a      	add	r2, r1
 8000844:	7891      	ldrb	r1, [r2, #2]
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	4413      	add	r3, r2
 800084a:	460a      	mov	r2, r1
 800084c:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	3301      	adds	r3, #1
 8000852:	73fb      	strb	r3, [r7, #15]
 8000854:	7bfa      	ldrb	r2, [r7, #15]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	3b01      	subs	r3, #1
 800085c:	429a      	cmp	r2, r3
 800085e:	dbec      	blt.n	800083a <ComsHandler_PacketToBuf+0x4a>
	}

	uint8_t checksum = buffer->data[0];
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	785b      	ldrb	r3, [r3, #1]
 8000864:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 8000866:	2301      	movs	r3, #1
 8000868:	737b      	strb	r3, [r7, #13]
 800086a:	e009      	b.n	8000880 <ComsHandler_PacketToBuf+0x90>
		checksum ^= buffer->data[i];
 800086c:	7b7b      	ldrb	r3, [r7, #13]
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	4413      	add	r3, r2
 8000872:	785a      	ldrb	r2, [r3, #1]
 8000874:	7bbb      	ldrb	r3, [r7, #14]
 8000876:	4053      	eors	r3, r2
 8000878:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 800087a:	7b7b      	ldrb	r3, [r7, #13]
 800087c:	3301      	adds	r3, #1
 800087e:	737b      	strb	r3, [r7, #13]
 8000880:	7b7a      	ldrb	r2, [r7, #13]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	3b01      	subs	r3, #1
 8000888:	429a      	cmp	r2, r3
 800088a:	dbef      	blt.n	800086c <ComsHandler_PacketToBuf+0x7c>
	}

	buffer->data[buffer->length - 1] = checksum;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	3b01      	subs	r3, #1
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	4413      	add	r3, r2
 8000896:	7bba      	ldrb	r2, [r7, #14]
 8000898:	705a      	strb	r2, [r3, #1]
 800089a:	e000      	b.n	800089e <ComsHandler_PacketToBuf+0xae>
	if(packet->invalid) return;
 800089c:	bf00      	nop
}
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <ComsHandler_BufToPacket>:

static void ComsHandler_BufToPacket(DecodedPacket_t *packet, void *buf) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]

	StringBuffer_t *buffer = (StringBuffer_t *)buf;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	60fb      	str	r3, [r7, #12]

	uint8_t length = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	75fb      	strb	r3, [r7, #23]

	memset(packet->data, 0, MAX_DATA_SIZE);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3302      	adds	r3, #2
 80008be:	2208      	movs	r2, #8
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f009 fdf8 	bl	800a4b8 <memset>

	packet->invalid = false;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	72da      	strb	r2, [r3, #11]
	packet->isNew = true;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2201      	movs	r2, #1
 80008d2:	731a      	strb	r2, [r3, #12]

    if (buffer->data[0] != START_BYTE) {
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	785b      	ldrb	r3, [r3, #1]
 80008d8:	2baa      	cmp	r3, #170	@ 0xaa
 80008da:	d002      	beq.n	80008e2 <ComsHandler_BufToPacket+0x3a>
    	packet->invalid = true; // Invalid start byte, discard packet
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2201      	movs	r2, #1
 80008e0:	72da      	strb	r2, [r3, #11]
    }

    packet->length = buffer->data[1];
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	789a      	ldrb	r2, [r3, #2]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	729a      	strb	r2, [r3, #10]
    if (buffer->data[1] > MAX_DATA_SIZE) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	789b      	ldrb	r3, [r3, #2]
 80008ee:	2b08      	cmp	r3, #8
 80008f0:	d905      	bls.n	80008fe <ComsHandler_BufToPacket+0x56>
		packet->invalid = true;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2201      	movs	r2, #1
 80008f6:	72da      	strb	r2, [r3, #11]
		packet->length = 0;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	729a      	strb	r2, [r3, #10]
	}

    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80008fe:	230c      	movs	r3, #12
 8000900:	75bb      	strb	r3, [r7, #22]
 8000902:	e00b      	b.n	800091c <ComsHandler_BufToPacket+0x74>
    	if(buffer->data[i] != 0) {
 8000904:	7dbb      	ldrb	r3, [r7, #22]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	4413      	add	r3, r2
 800090a:	785b      	ldrb	r3, [r3, #1]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <ComsHandler_BufToPacket+0x6e>
    		length = i;
 8000910:	7dbb      	ldrb	r3, [r7, #22]
 8000912:	75fb      	strb	r3, [r7, #23]
    		break;
 8000914:	e005      	b.n	8000922 <ComsHandler_BufToPacket+0x7a>
    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 8000916:	7dbb      	ldrb	r3, [r7, #22]
 8000918:	3b01      	subs	r3, #1
 800091a:	75bb      	strb	r3, [r7, #22]
 800091c:	7dbb      	ldrb	r3, [r7, #22]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d8f0      	bhi.n	8000904 <ComsHandler_BufToPacket+0x5c>
    	}
    }

    uint8_t checksum = buffer->data[0];
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 8000928:	2301      	movs	r3, #1
 800092a:	753b      	strb	r3, [r7, #20]
 800092c:	e009      	b.n	8000942 <ComsHandler_BufToPacket+0x9a>
		checksum ^= buffer->data[i];
 800092e:	7d3b      	ldrb	r3, [r7, #20]
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	785a      	ldrb	r2, [r3, #1]
 8000936:	7d7b      	ldrb	r3, [r7, #21]
 8000938:	4053      	eors	r3, r2
 800093a:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 800093c:	7d3b      	ldrb	r3, [r7, #20]
 800093e:	3301      	adds	r3, #1
 8000940:	753b      	strb	r3, [r7, #20]
 8000942:	7d3a      	ldrb	r2, [r7, #20]
 8000944:	7dfb      	ldrb	r3, [r7, #23]
 8000946:	429a      	cmp	r2, r3
 8000948:	d3f1      	bcc.n	800092e <ComsHandler_BufToPacket+0x86>
	}

	if(checksum != buffer->data[length]) {
 800094a:	7dfb      	ldrb	r3, [r7, #23]
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	7d7a      	ldrb	r2, [r7, #21]
 8000954:	429a      	cmp	r2, r3
 8000956:	d002      	beq.n	800095e <ComsHandler_BufToPacket+0xb6>
		packet->invalid = true;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2201      	movs	r2, #1
 800095c:	72da      	strb	r2, [r3, #11]
	}

    // Populate the command structure
    packet->command = (buffer->data[2] << 8) | buffer->data[3];
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	78db      	ldrb	r3, [r3, #3]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	b21a      	sxth	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	791b      	ldrb	r3, [r3, #4]
 800096a:	b21b      	sxth	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b21b      	sxth	r3, r3
 8000970:	b29a      	uxth	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	801a      	strh	r2, [r3, #0]

    if(packet->length != 0) {
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	7a9b      	ldrb	r3, [r3, #10]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d014      	beq.n	80009a8 <ComsHandler_BufToPacket+0x100>
    	for(uint8_t i = 0; i < packet->length; i++) {
 800097e:	2300      	movs	r3, #0
 8000980:	74fb      	strb	r3, [r7, #19]
 8000982:	e00c      	b.n	800099e <ComsHandler_BufToPacket+0xf6>
    		packet->data[i] = buffer->data[4+i];
 8000984:	7cfb      	ldrb	r3, [r7, #19]
 8000986:	1d1a      	adds	r2, r3, #4
 8000988:	7cfb      	ldrb	r3, [r7, #19]
 800098a:	68f9      	ldr	r1, [r7, #12]
 800098c:	440a      	add	r2, r1
 800098e:	7851      	ldrb	r1, [r2, #1]
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	4413      	add	r3, r2
 8000994:	460a      	mov	r2, r1
 8000996:	709a      	strb	r2, [r3, #2]
    	for(uint8_t i = 0; i < packet->length; i++) {
 8000998:	7cfb      	ldrb	r3, [r7, #19]
 800099a:	3301      	adds	r3, #1
 800099c:	74fb      	strb	r3, [r7, #19]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	7a9b      	ldrb	r3, [r3, #10]
 80009a2:	7cfa      	ldrb	r2, [r7, #19]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d3ed      	bcc.n	8000984 <ComsHandler_BufToPacket+0xdc>
    	}
    }
}
 80009a8:	bf00      	nop
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <UART_Send>:

// UART Send Function
static HAL_StatusTypeDef UART_Send(void *config, DecodedPacket_t *packet)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)config;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	61fb      	str	r3, [r7, #28]

    StringBuffer_t buf;
    memset(buf.data, 0, MAX_BUF_SIZE);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	3301      	adds	r3, #1
 80009c4:	220d      	movs	r2, #13
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f009 fd75 	bl	800a4b8 <memset>
    ComsHandler_PacketToBuf(packet, &buf);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	6838      	ldr	r0, [r7, #0]
 80009d6:	f7ff ff0b 	bl	80007f0 <ComsHandler_PacketToBuf>

    return HAL_UART_Transmit(huart, buf.data, buf.length, HAL_MAX_DELAY);
 80009da:	7b3b      	ldrb	r3, [r7, #12]
 80009dc:	461a      	mov	r2, r3
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	1c59      	adds	r1, r3, #1
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	69f8      	ldr	r0, [r7, #28]
 80009ea:	f004 fb5f 	bl	80050ac <HAL_UART_Transmit>
 80009ee:	4603      	mov	r3, r0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <UART_SetupReceive>:

// UART Receive Function
//All data will be recieved in interrupt callback. this function will place the data in the appropriate buffer

static HAL_StatusTypeDef UART_SetupReceive(void *inst)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a0a:	60bb      	str	r3, [r7, #8]

    memset(instance->rxBuf[instance->rxIdx].data, 0, MAX_BUF_SIZE);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4613      	mov	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	1a9b      	subs	r3, r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	3370      	adds	r3, #112	@ 0x70
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	4413      	add	r3, r2
 8000a20:	3305      	adds	r3, #5
 8000a22:	220d      	movs	r2, #13
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f009 fd46 	bl	800a4b8 <memset>
    HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->rxBuf[instance->rxIdx].data, MAX_BUF_SIZE);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4613      	mov	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	1a9b      	subs	r3, r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	3370      	adds	r3, #112	@ 0x70
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	3305      	adds	r3, #5
 8000a42:	220d      	movs	r2, #13
 8000a44:	4619      	mov	r1, r3
 8000a46:	68b8      	ldr	r0, [r7, #8]
 8000a48:	f004 fbbb 	bl	80051c2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(DMA_UART_HANDLE, DMA_IT_HT);
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <UART_SetupReceive+0x70>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <UART_SetupReceive+0x70>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f022 0208 	bic.w	r2, r2, #8
 8000a5a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200003cc 	.word	0x200003cc

08000a6c <UART_Receive>:

static HAL_StatusTypeDef UART_Receive(void *inst, uint8_t *data, uint16_t length)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	4613      	mov	r3, r2
 8000a78:	80fb      	strh	r3, [r7, #6]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	617b      	str	r3, [r7, #20]
    //UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;

    instance->rxBuf[instance->rxIdx].length = length;
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4619      	mov	r1, r3
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	b2d8      	uxtb	r0, r3
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	1a5b      	subs	r3, r3, r1
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	3374      	adds	r3, #116	@ 0x74
 8000a96:	4602      	mov	r2, r0
 8000a98:	701a      	strb	r2, [r3, #0]

    Coms_IncIdx(&instance->rxIdx);
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fe90 	bl	80007c2 <Coms_IncIdx>

    UART_SetupReceive(inst);
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f7ff ffa8 	bl	80009f8 <UART_SetupReceive>
    //__HAL_DMA_DISABLE_IT(hdma_usart1_rx, DMA_IT_HT);

    return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <USB_Send>:


#ifdef HAS_USB_COMMS
// USB Send Function
static HAL_StatusTypeDef USB_Send(void *config, DecodedPacket_t *packet)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]

	StringBuffer_t buf;

	ComsHandler_PacketToBuf(packet, &buf);
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	6838      	ldr	r0, [r7, #0]
 8000ac4:	f7ff fe94 	bl	80007f0 <ComsHandler_PacketToBuf>

    if (CDC_Transmit_FS(buf.data, buf.length) == USBD_OK)
 8000ac8:	7a3b      	ldrb	r3, [r7, #8]
 8000aca:	461a      	mov	r2, r3
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f009 f89d 	bl	8009c14 <CDC_Transmit_FS>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d101      	bne.n	8000ae4 <USB_Send+0x32>
        return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e000      	b.n	8000ae6 <USB_Send+0x34>
    else

        return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <USB_Receive>:

// USB Receive Function (not implemented for USB CDC)
//All data will be recieved in interrupt callback. this function will place the data in the appropriate buffer
static HAL_StatusTypeDef USB_Receive(void *inst, uint8_t *data, uint16_t length)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	4613      	mov	r3, r2
 8000afa:	80fb      	strh	r3, [r7, #6]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	617b      	str	r3, [r7, #20]

	instance->rxBuf[instance->rxIdx].length = length;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	b2d8      	uxtb	r0, r3
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	3374      	adds	r3, #116	@ 0x74
 8000b18:	4602      	mov	r2, r0
 8000b1a:	701a      	strb	r2, [r3, #0]
	memset(instance->rxBuf[instance->rxIdx].data, 0, MAX_BUF_SIZE);
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4613      	mov	r3, r2
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	1a9b      	subs	r3, r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	3370      	adds	r3, #112	@ 0x70
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	4413      	add	r3, r2
 8000b30:	3305      	adds	r3, #5
 8000b32:	220d      	movs	r2, #13
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f009 fcbe 	bl	800a4b8 <memset>
	memcpy(instance->rxBuf[instance->rxIdx].data, data, length);
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4613      	mov	r3, r2
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	1a9b      	subs	r3, r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	3370      	adds	r3, #112	@ 0x70
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	4413      	add	r3, r2
 8000b50:	3305      	adds	r3, #5
 8000b52:	88fa      	ldrh	r2, [r7, #6]
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f009 fcda 	bl	800a510 <memcpy>

	Coms_IncIdx(&instance->rxIdx);
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fe2f 	bl	80007c2 <Coms_IncIdx>

    return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <CAN_Send>:
#endif

// CAN Send Function
static HAL_StatusTypeDef CAN_Send(void *config, DecodedPacket_t *packet)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]

    // Only include data bytes 5 to N-1
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, &data[4]);
#endif

	return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <CAN_Receive>:

// CAN Receive Function
//going to be handled in an interrupt as with the all receive functions
static HAL_StatusTypeDef CAN_Receive(void *config, uint8_t *data, uint16_t length)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b085      	sub	sp, #20
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	4613      	mov	r3, r2
 8000b92:	80fb      	strh	r3, [r7, #6]
    data[3] = rxHeader.Identifier & 0xFF;       // Header byte 2
    for (uint8_t i = 0; i < dlc; i++) {
        data[4 + i] = canData[i];
    }
#endif
    return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <Comm_Init>:

// Initialize Communication Instance
void Comm_Init(ComsInterface_t *instance, CommType type, void *config)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	460b      	mov	r3, r1
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	72fb      	strb	r3, [r7, #11]
    instance->type = type;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	7afa      	ldrb	r2, [r7, #11]
 8000bb6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    instance->config = config;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    instance->decodeIdx = 0;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	705a      	strb	r2, [r3, #1]
    instance->rxIdx = 0;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
    instance->processIdx = 0;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	709a      	strb	r2, [r3, #2]

    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	75fb      	strb	r3, [r7, #23]
 8000bd8:	e016      	b.n	8000c08 <Comm_Init+0x64>
    	instance->rxPacket[i].invalid = true;
 8000bda:	7dfa      	ldrb	r2, [r7, #23]
 8000bdc:	68f9      	ldr	r1, [r7, #12]
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	440b      	add	r3, r1
 8000be8:	330f      	adds	r3, #15
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
    	instance->rxPacket[i].isNew = false;
 8000bee:	7dfa      	ldrb	r2, [r7, #23]
 8000bf0:	68f9      	ldr	r1, [r7, #12]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	1a9b      	subs	r3, r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	440b      	add	r3, r1
 8000bfc:	3310      	adds	r3, #16
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
 8000c04:	3301      	adds	r3, #1
 8000c06:	75fb      	strb	r3, [r7, #23]
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	2b07      	cmp	r3, #7
 8000c0c:	d9e5      	bls.n	8000bda <Comm_Init+0x36>
    }

    if (type == COMM_UART) {
 8000c0e:	7afb      	ldrb	r3, [r7, #11]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10f      	bne.n	8000c34 <Comm_Init+0x90>
        instance->interface.Send = UART_Send;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4a17      	ldr	r2, [pc, #92]	@ (8000c74 <Comm_Init+0xd0>)
 8000c18:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        instance->interface.Receive = UART_Receive;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4a16      	ldr	r2, [pc, #88]	@ (8000c78 <Comm_Init+0xd4>)
 8000c20:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        instance->interface.ConvertToPacket = ComsHandler_BufToPacket;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4a15      	ldr	r2, [pc, #84]	@ (8000c7c <Comm_Init+0xd8>)
 8000c28:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        UART_SetupReceive(instance);
 8000c2c:	68f8      	ldr	r0, [r7, #12]
 8000c2e:	f7ff fee3 	bl	80009f8 <UART_SetupReceive>
#endif
    else if (type == COMM_CAN) {
        instance->interface.Send = CAN_Send;
        instance->interface.Receive = CAN_Receive;
    }
}
 8000c32:	e01a      	b.n	8000c6a <Comm_Init+0xc6>
    else if (type == COMM_USB) {
 8000c34:	7afb      	ldrb	r3, [r7, #11]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d10c      	bne.n	8000c54 <Comm_Init+0xb0>
        instance->interface.Send = USB_Send;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <Comm_Init+0xdc>)
 8000c3e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        instance->interface.Receive = USB_Receive;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4a0f      	ldr	r2, [pc, #60]	@ (8000c84 <Comm_Init+0xe0>)
 8000c46:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        instance->interface.ConvertToPacket = ComsHandler_BufToPacket;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <Comm_Init+0xd8>)
 8000c4e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
}
 8000c52:	e00a      	b.n	8000c6a <Comm_Init+0xc6>
    else if (type == COMM_CAN) {
 8000c54:	7afb      	ldrb	r3, [r7, #11]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d107      	bne.n	8000c6a <Comm_Init+0xc6>
        instance->interface.Send = CAN_Send;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <Comm_Init+0xe4>)
 8000c5e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        instance->interface.Receive = CAN_Receive;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4a09      	ldr	r2, [pc, #36]	@ (8000c8c <Comm_Init+0xe8>)
 8000c66:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	080009b1 	.word	0x080009b1
 8000c78:	08000a6d 	.word	0x08000a6d
 8000c7c:	080008a9 	.word	0x080008a9
 8000c80:	08000ab3 	.word	0x08000ab3
 8000c84:	08000aef 	.word	0x08000aef
 8000c88:	08000b6f 	.word	0x08000b6f
 8000c8c:	08000b87 	.word	0x08000b87

08000c90 <Comm_Send>:

// Wrapper for Sending Data
HAL_StatusTypeDef Comm_Send(ComsInterface_t *instance, DecodedPacket_t *packet)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
	if(packet->invalid) return HAL_ERROR;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	7adb      	ldrb	r3, [r3, #11]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <Comm_Send+0x16>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e009      	b.n	8000cba <Comm_Send+0x2a>

    return instance->interface.Send(instance->config, packet);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	f8d2 20f4 	ldr.w	r2, [r2, #244]	@ 0xf4
 8000cb2:	6839      	ldr	r1, [r7, #0]
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4798      	blx	r3
 8000cb8:	4603      	mov	r3, r0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <Comm_Receive>:

// Wrapper for Receiving Data
HAL_StatusTypeDef Comm_Receive(ComsInterface_t *instance, uint8_t *data, uint16_t length)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	80fb      	strh	r3, [r7, #6]
    return instance->interface.Receive(instance, data, length);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000cd6:	88fa      	ldrh	r2, [r7, #6]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	4798      	blx	r3
 8000cde:	4603      	mov	r3, r0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <Comm_Process>:

void Comm_Process(ComsInterface_t *instance) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	static uint32_t currentTime;
	static uint32_t lastTime;

	currentTime = HAL_GetTick();
 8000cf0:	f000 fe20 	bl	8001934 <HAL_GetTick>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4a22      	ldr	r2, [pc, #136]	@ (8000d80 <Comm_Process+0x98>)
 8000cf8:	6013      	str	r3, [r2, #0]

	if(instance->type == COMM_UART) {
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d132      	bne.n	8000d6a <Comm_Process+0x82>
		if(currentTime - lastTime > 1000) {
 8000d04:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <Comm_Process+0x98>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <Comm_Process+0x9c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d12:	d92a      	bls.n	8000d6a <Comm_Process+0x82>
			UART_SetupReceive(instance);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff fe6f 	bl	80009f8 <UART_SetupReceive>
			lastTime = currentTime;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <Comm_Process+0x98>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <Comm_Process+0x9c>)
 8000d20:	6013      	str	r3, [r2, #0]
		}
	}

	while (instance->decodeIdx != instance->rxIdx) {
 8000d22:	e022      	b.n	8000d6a <Comm_Process+0x82>
		instance->interface.ConvertToPacket(&instance->rxPacket[instance->decodeIdx], &instance->rxBuf[instance->decodeIdx]);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	460b      	mov	r3, r1
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	1a5b      	subs	r3, r3, r1
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	440b      	add	r3, r1
 8000d3c:	1d18      	adds	r0, r3, #4
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	785b      	ldrb	r3, [r3, #1]
 8000d42:	4619      	mov	r1, r3
 8000d44:	460b      	mov	r3, r1
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	3370      	adds	r3, #112	@ 0x70
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	440b      	add	r3, r1
 8000d52:	3304      	adds	r3, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4790      	blx	r2
		Coms_IncIdx(&instance->decodeIdx);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fd30 	bl	80007c2 <Coms_IncIdx>
		lastTime = currentTime;
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <Comm_Process+0x98>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a07      	ldr	r2, [pc, #28]	@ (8000d84 <Comm_Process+0x9c>)
 8000d68:	6013      	str	r3, [r2, #0]
	while (instance->decodeIdx != instance->rxIdx) {
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	785a      	ldrb	r2, [r3, #1]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d1d6      	bne.n	8000d24 <Comm_Process+0x3c>
	}
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000120 	.word	0x20000120
 8000d84:	20000124 	.word	0x20000124

08000d88 <Comm_GetPacket>:

DecodedPacket_t Comm_GetPacket(ComsInterface_t *instance) {
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	DecodedPacket_t packet = {
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	819a      	strh	r2, [r3, #12]
 8000da0:	2301      	movs	r3, #1
 8000da2:	74fb      	strb	r3, [r7, #19]
			.invalid = true,
			.isNew = false
	};

	if(instance->decodeIdx == instance->processIdx) {
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	785a      	ldrb	r2, [r3, #1]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	789b      	ldrb	r3, [r3, #2]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d10a      	bne.n	8000dc6 <Comm_GetPacket+0x3e>
		return packet;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	461c      	mov	r4, r3
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000dba:	6020      	str	r0, [r4, #0]
 8000dbc:	6061      	str	r1, [r4, #4]
 8000dbe:	60a2      	str	r2, [r4, #8]
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	81a3      	strh	r3, [r4, #12]
 8000dc4:	e029      	b.n	8000e1a <Comm_GetPacket+0x92>
	}

	uint8_t idx = instance->processIdx;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	789b      	ldrb	r3, [r3, #2]
 8000dca:	75fb      	strb	r3, [r7, #23]

	Coms_IncIdx(&instance->processIdx);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	3302      	adds	r3, #2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fcf6 	bl	80007c2 <Coms_IncIdx>
	memcpy(&packet, &instance->rxPacket[idx], sizeof(instance->rxPacket[idx]));
 8000dd6:	7dfa      	ldrb	r2, [r7, #23]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	1a9b      	subs	r3, r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	1d19      	adds	r1, r3, #4
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	220e      	movs	r2, #14
 8000dec:	4618      	mov	r0, r3
 8000dee:	f009 fb8f 	bl	800a510 <memcpy>

	instance->rxPacket[idx].isNew = false;
 8000df2:	7dfa      	ldrb	r2, [r7, #23]
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	4613      	mov	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	440b      	add	r3, r1
 8000e00:	3310      	adds	r3, #16
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]

	return packet;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	461c      	mov	r4, r3
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e10:	6020      	str	r0, [r4, #0]
 8000e12:	6061      	str	r1, [r4, #4]
 8000e14:	60a2      	str	r2, [r4, #8]
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	81a3      	strh	r3, [r4, #12]
}
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	371c      	adds	r7, #28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd90      	pop	{r4, r7, pc}
	...

08000e24 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2140      	movs	r1, #64	@ 0x40
 8000e2e:	480c      	ldr	r0, [pc, #48]	@ (8000e60 <MCP2515_Initialize+0x3c>)
 8000e30:	f001 fc48 	bl	80026c4 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8000e34:	230a      	movs	r3, #10
 8000e36:	71fb      	strb	r3, [r7, #7]

  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8000e38:	480a      	ldr	r0, [pc, #40]	@ (8000e64 <MCP2515_Initialize+0x40>)
 8000e3a:	f003 ff96 	bl	8004d6a <HAL_SPI_GetState>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <MCP2515_Initialize+0x24>
      return true;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e006      	b.n	8000e56 <MCP2515_Initialize+0x32>

    loop--;
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f1      	bne.n	8000e38 <MCP2515_Initialize+0x14>

  return false;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40020400 	.word	0x40020400
 8000e64:	2000032c 	.word	0x2000032c

08000e68 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8000e6e:	2180      	movs	r1, #128	@ 0x80
 8000e70:	200f      	movs	r0, #15
 8000e72:	f000 f857 	bl	8000f24 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000e76:	230a      	movs	r3, #10
 8000e78:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000e7a:	200e      	movs	r0, #14
 8000e7c:	f000 f830 	bl	8000ee0 <MCP2515_ReadByte>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000e86:	2b80      	cmp	r3, #128	@ 0x80
 8000e88:	d101      	bne.n	8000e8e <MCP2515_SetConfigMode+0x26>
      return true;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e006      	b.n	8000e9c <MCP2515_SetConfigMode+0x34>

    loop--;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1ef      	bne.n	8000e7a <MCP2515_SetConfigMode+0x12>

  return false;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	200f      	movs	r0, #15
 8000eae:	f000 f839 	bl	8000f24 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000eb6:	200e      	movs	r0, #14
 8000eb8:	f000 f812 	bl	8000ee0 <MCP2515_ReadByte>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <MCP2515_SetNormalMode+0x26>
      return true;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e006      	b.n	8000ed8 <MCP2515_SetNormalMode+0x34>

    loop--;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1ef      	bne.n	8000eb6 <MCP2515_SetNormalMode+0x12>

  return false;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000eea:	2200      	movs	r2, #0
 8000eec:	2140      	movs	r1, #64	@ 0x40
 8000eee:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <MCP2515_ReadByte+0x40>)
 8000ef0:	f001 fbe8 	bl	80026c4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f8c3 	bl	8001080 <SPI_Tx>
  SPI_Tx(address);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f8bf 	bl	8001080 <SPI_Tx>
  retVal = SPI_Rx();
 8000f02:	f000 f8e3 	bl	80010cc <SPI_Rx>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2140      	movs	r1, #64	@ 0x40
 8000f0e:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <MCP2515_ReadByte+0x40>)
 8000f10:	f001 fbd8 	bl	80026c4 <HAL_GPIO_WritePin>

  return retVal;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020400 	.word	0x40020400

08000f24 <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000f34:	2200      	movs	r2, #0
 8000f36:	2140      	movs	r1, #64	@ 0x40
 8000f38:	480b      	ldr	r0, [pc, #44]	@ (8000f68 <MCP2515_WriteByte+0x44>)
 8000f3a:	f001 fbc3 	bl	80026c4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f000 f89e 	bl	8001080 <SPI_Tx>
  SPI_Tx(address);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f89a 	bl	8001080 <SPI_Tx>
  SPI_Tx(data);
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f896 	bl	8001080 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000f54:	2201      	movs	r2, #1
 8000f56:	2140      	movs	r1, #64	@ 0x40
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <MCP2515_WriteByte+0x44>)
 8000f5a:	f001 fbb3 	bl	80026c4 <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40020400 	.word	0x40020400

08000f6c <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	603a      	str	r2, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2140      	movs	r1, #64	@ 0x40
 8000f80:	480e      	ldr	r0, [pc, #56]	@ (8000fbc <MCP2515_WriteByteSequence+0x50>)
 8000f82:	f001 fb9f 	bl	80026c4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000f86:	2002      	movs	r0, #2
 8000f88:	f000 f87a 	bl	8001080 <SPI_Tx>
  SPI_Tx(startAddress);
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f876 	bl	8001080 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000f94:	79ba      	ldrb	r2, [r7, #6]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	6838      	ldr	r0, [r7, #0]
 8000fa4:	f000 f87e 	bl	80010a4 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2140      	movs	r1, #64	@ 0x40
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <MCP2515_WriteByteSequence+0x50>)
 8000fae:	f001 fb89 	bl	80026c4 <HAL_GPIO_WritePin>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40020400 	.word	0x40020400

08000fc0 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2140      	movs	r1, #64	@ 0x40
 8000fd6:	480e      	ldr	r0, [pc, #56]	@ (8001010 <MCP2515_LoadTxSequence+0x50>)
 8000fd8:	f001 fb74 	bl	80026c4 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f84e 	bl	8001080 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	68b8      	ldr	r0, [r7, #8]
 8000fe8:	f000 f85c 	bl	80010a4 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f846 	bl	8001080 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f853 	bl	80010a4 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000ffe:	2201      	movs	r2, #1
 8001000:	2140      	movs	r1, #64	@ 0x40
 8001002:	4803      	ldr	r0, [pc, #12]	@ (8001010 <MCP2515_LoadTxSequence+0x50>)
 8001004:	f001 fb5e 	bl	80026c4 <HAL_GPIO_WritePin>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40020400 	.word	0x40020400

08001014 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 800101e:	2200      	movs	r2, #0
 8001020:	2140      	movs	r1, #64	@ 0x40
 8001022:	4808      	ldr	r0, [pc, #32]	@ (8001044 <MCP2515_RequestToSend+0x30>)
 8001024:	f001 fb4e 	bl	80026c4 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f828 	bl	8001080 <SPI_Tx>

  MCP2515_CS_HIGH();
 8001030:	2201      	movs	r2, #1
 8001032:	2140      	movs	r1, #64	@ 0x40
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <MCP2515_RequestToSend+0x30>)
 8001036:	f001 fb45 	bl	80026c4 <HAL_GPIO_WritePin>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020400 	.word	0x40020400

08001048 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 800104e:	2200      	movs	r2, #0
 8001050:	2140      	movs	r1, #64	@ 0x40
 8001052:	480a      	ldr	r0, [pc, #40]	@ (800107c <MCP2515_ReadStatus+0x34>)
 8001054:	f001 fb36 	bl	80026c4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8001058:	20a0      	movs	r0, #160	@ 0xa0
 800105a:	f000 f811 	bl	8001080 <SPI_Tx>
  retVal = SPI_Rx();
 800105e:	f000 f835 	bl	80010cc <SPI_Rx>
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8001066:	2201      	movs	r2, #1
 8001068:	2140      	movs	r1, #64	@ 0x40
 800106a:	4804      	ldr	r0, [pc, #16]	@ (800107c <MCP2515_ReadStatus+0x34>)
 800106c:	f001 fb2a 	bl	80026c4 <HAL_GPIO_WritePin>

  return retVal;
 8001070:	79fb      	ldrb	r3, [r7, #7]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40020400 	.word	0x40020400

08001080 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 800108a:	1df9      	adds	r1, r7, #7
 800108c:	230a      	movs	r3, #10
 800108e:	2201      	movs	r2, #1
 8001090:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <SPI_Tx+0x20>)
 8001092:	f003 fa64 	bl	800455e <HAL_SPI_Transmit>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000032c 	.word	0x2000032c

080010a4 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	230a      	movs	r3, #10
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <SPI_TxBuffer+0x24>)
 80010ba:	f003 fa50 	bl	800455e <HAL_SPI_Transmit>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000032c 	.word	0x2000032c

080010cc <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80010d2:	1df9      	adds	r1, r7, #7
 80010d4:	230a      	movs	r3, #10
 80010d6:	2201      	movs	r2, #1
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <SPI_Rx+0x1c>)
 80010da:	f003 fb84 	bl	80047e6 <HAL_SPI_Receive>
  return retVal;
 80010de:	79fb      	ldrb	r3, [r7, #7]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000032c 	.word	0x2000032c

080010ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <MX_DMA_Init+0x3c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <MX_DMA_Init+0x3c>)
 80010fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <MX_DMA_Init+0x3c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	203a      	movs	r0, #58	@ 0x3a
 8001114:	f000 fd19 	bl	8001b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001118:	203a      	movs	r0, #58	@ 0x3a
 800111a:	f000 fd32 	bl	8001b82 <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b37      	ldr	r3, [pc, #220]	@ (8001224 <MX_GPIO_Init+0xf8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a36      	ldr	r2, [pc, #216]	@ (8001224 <MX_GPIO_Init+0xf8>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <MX_GPIO_Init+0xf8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <MX_GPIO_Init+0xf8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a2f      	ldr	r2, [pc, #188]	@ (8001224 <MX_GPIO_Init+0xf8>)
 8001168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b2d      	ldr	r3, [pc, #180]	@ (8001224 <MX_GPIO_Init+0xf8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <MX_GPIO_Init+0xf8>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a28      	ldr	r2, [pc, #160]	@ (8001224 <MX_GPIO_Init+0xf8>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <MX_GPIO_Init+0xf8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <MX_GPIO_Init+0xf8>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <MX_GPIO_Init+0xf8>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <MX_GPIO_Init+0xf8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLED_GPIO_Port, nLED_Pin, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b8:	481b      	ldr	r0, [pc, #108]	@ (8001228 <MX_GPIO_Init+0xfc>)
 80011ba:	f001 fa83 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_MCP_GPIO_Port, nCS_MCP_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2140      	movs	r1, #64	@ 0x40
 80011c2:	481a      	ldr	r0, [pc, #104]	@ (800122c <MX_GPIO_Init+0x100>)
 80011c4:	f001 fa7e 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nLED_Pin;
 80011c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nLED_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4811      	ldr	r0, [pc, #68]	@ (8001228 <MX_GPIO_Init+0xfc>)
 80011e2:	f001 f8eb 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MCP_Pin;
 80011e6:	2304      	movs	r3, #4
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MCP_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	480c      	ldr	r0, [pc, #48]	@ (800122c <MX_GPIO_Init+0x100>)
 80011fc:	f001 f8de 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_MCP_Pin;
 8001200:	2340      	movs	r3, #64	@ 0x40
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nCS_MCP_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_GPIO_Init+0x100>)
 8001218:	f001 f8d0 	bl	80023bc <HAL_GPIO_Init>

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	@ 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	40020800 	.word	0x40020800
 800122c:	40020400 	.word	0x40020400

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b08d      	sub	sp, #52	@ 0x34
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001236:	f000 fb17 	bl	8001868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123a:	f000 f8a5 	bl	8001388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123e:	f7ff ff75 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 8001242:	f7ff ff53 	bl	80010ec <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001246:	f008 fc19 	bl	8009a7c <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800124a:	f000 fa35 	bl	80016b8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800124e:	f000 f92d 	bl	80014ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  CANSPI_Initialize();
 8001252:	f7ff f939 	bl	80004c8 <CANSPI_Initialize>
  Comm_Init(&usb, COMM_USB, NULL);
 8001256:	2200      	movs	r2, #0
 8001258:	2101      	movs	r1, #1
 800125a:	4847      	ldr	r0, [pc, #284]	@ (8001378 <main+0x148>)
 800125c:	f7ff fca2 	bl	8000ba4 <Comm_Init>
  Comm_Init(&serial, COMM_UART, &huart1);
 8001260:	4a46      	ldr	r2, [pc, #280]	@ (800137c <main+0x14c>)
 8001262:	2100      	movs	r1, #0
 8001264:	4846      	ldr	r0, [pc, #280]	@ (8001380 <main+0x150>)
 8001266:	f7ff fc9d 	bl	8000ba4 <Comm_Init>
  while (1)
  {

	  DecodedPacket_t input;
	  DecodedPacket_t response;
	  Comm_Process(&usb);
 800126a:	4843      	ldr	r0, [pc, #268]	@ (8001378 <main+0x148>)
 800126c:	f7ff fd3c 	bl	8000ce8 <Comm_Process>
	  Comm_Process(&serial);
 8001270:	4843      	ldr	r0, [pc, #268]	@ (8001380 <main+0x150>)
 8001272:	f7ff fd39 	bl	8000ce8 <Comm_Process>

	  input = Comm_GetPacket(&usb);
 8001276:	463b      	mov	r3, r7
 8001278:	493f      	ldr	r1, [pc, #252]	@ (8001378 <main+0x148>)
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fd84 	bl	8000d88 <Comm_GetPacket>
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	463c      	mov	r4, r7
 8001286:	6820      	ldr	r0, [r4, #0]
 8001288:	6861      	ldr	r1, [r4, #4]
 800128a:	68a2      	ldr	r2, [r4, #8]
 800128c:	c307      	stmia	r3!, {r0, r1, r2}
 800128e:	89a2      	ldrh	r2, [r4, #12]
 8001290:	801a      	strh	r2, [r3, #0]
	  Comm_Send(&serial, &input);
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	4619      	mov	r1, r3
 8001298:	4839      	ldr	r0, [pc, #228]	@ (8001380 <main+0x150>)
 800129a:	f7ff fcf9 	bl	8000c90 <Comm_Send>

	  response = Comm_GetPacket(&serial);
 800129e:	463b      	mov	r3, r7
 80012a0:	4937      	ldr	r1, [pc, #220]	@ (8001380 <main+0x150>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fd70 	bl	8000d88 <Comm_GetPacket>
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	463c      	mov	r4, r7
 80012ae:	6820      	ldr	r0, [r4, #0]
 80012b0:	6861      	ldr	r1, [r4, #4]
 80012b2:	68a2      	ldr	r2, [r4, #8]
 80012b4:	c307      	stmia	r3!, {r0, r1, r2}
 80012b6:	89a2      	ldrh	r2, [r4, #12]
 80012b8:	801a      	strh	r2, [r3, #0]
	  Comm_Send(&usb, &response);
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4619      	mov	r1, r3
 80012c0:	482d      	ldr	r0, [pc, #180]	@ (8001378 <main+0x148>)
 80012c2:	f7ff fce5 	bl	8000c90 <Comm_Send>

	  if(!input.invalid) {
 80012c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80012ca:	f083 0301 	eor.w	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0ca      	beq.n	800126a <main+0x3a>
		  txMessage.frame.idType = dEXTENDED_CAN_MSG_ID_2_0B;
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <main+0x154>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	701a      	strb	r2, [r3, #0]
		  txMessage.frame.id = input.command;
 80012da:	8c3b      	ldrh	r3, [r7, #32]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b29      	ldr	r3, [pc, #164]	@ (8001384 <main+0x154>)
 80012e0:	605a      	str	r2, [r3, #4]
		  txMessage.frame.dlc = input.length < 1 ? 1 : input.length;
 80012e2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <main+0xc0>
 80012ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80012ee:	e000      	b.n	80012f2 <main+0xc2>
 80012f0:	2301      	movs	r3, #1
 80012f2:	4a24      	ldr	r2, [pc, #144]	@ (8001384 <main+0x154>)
 80012f4:	7213      	strb	r3, [r2, #8]
		  if(input.length >= 0) txMessage.frame.data0 = input.data[0];
 80012f6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80012fa:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <main+0x154>)
 80012fc:	725a      	strb	r2, [r3, #9]
		  if(input.length > 1) txMessage.frame.data1 = input.data[1];
 80012fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001302:	2b01      	cmp	r3, #1
 8001304:	d903      	bls.n	800130e <main+0xde>
 8001306:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800130a:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <main+0x154>)
 800130c:	729a      	strb	r2, [r3, #10]
		  if(input.length > 2) txMessage.frame.data2 = input.data[2];
 800130e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001312:	2b02      	cmp	r3, #2
 8001314:	d903      	bls.n	800131e <main+0xee>
 8001316:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800131a:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <main+0x154>)
 800131c:	72da      	strb	r2, [r3, #11]
		  if(input.length > 3) txMessage.frame.data3 = input.data[3];
 800131e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001322:	2b03      	cmp	r3, #3
 8001324:	d903      	bls.n	800132e <main+0xfe>
 8001326:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800132a:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <main+0x154>)
 800132c:	731a      	strb	r2, [r3, #12]
		  if(input.length > 4) txMessage.frame.data4 = input.data[4];
 800132e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001332:	2b04      	cmp	r3, #4
 8001334:	d903      	bls.n	800133e <main+0x10e>
 8001336:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800133a:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <main+0x154>)
 800133c:	735a      	strb	r2, [r3, #13]
		  if(input.length > 5) txMessage.frame.data5 = input.data[5];
 800133e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001342:	2b05      	cmp	r3, #5
 8001344:	d903      	bls.n	800134e <main+0x11e>
 8001346:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <main+0x154>)
 800134c:	739a      	strb	r2, [r3, #14]
		  if(input.length > 6) txMessage.frame.data6 = input.data[6];
 800134e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001352:	2b06      	cmp	r3, #6
 8001354:	d903      	bls.n	800135e <main+0x12e>
 8001356:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800135a:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <main+0x154>)
 800135c:	73da      	strb	r2, [r3, #15]
		  if(input.length > 7) txMessage.frame.data7 = input.data[7];
 800135e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001362:	2b07      	cmp	r3, #7
 8001364:	d903      	bls.n	800136e <main+0x13e>
 8001366:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <main+0x154>)
 800136c:	741a      	strb	r2, [r3, #16]
		  CANSPI_Transmit(&txMessage);
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <main+0x154>)
 8001370:	f7ff f95a 	bl	8000628 <CANSPI_Transmit>
  {
 8001374:	e779      	b.n	800126a <main+0x3a>
 8001376:	bf00      	nop
 8001378:	2000013c 	.word	0x2000013c
 800137c:	20000384 	.word	0x20000384
 8001380:	20000234 	.word	0x20000234
 8001384:	20000128 	.word	0x20000128

08001388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	@ 0x50
 800138c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2230      	movs	r2, #48	@ 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f009 f88e 	bl	800a4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <SystemClock_Config+0xc8>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a26      	ldr	r2, [pc, #152]	@ (8001450 <SystemClock_Config+0xc8>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80013bc:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <SystemClock_Config+0xc8>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <SystemClock_Config+0xcc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a20      	ldr	r2, [pc, #128]	@ (8001454 <SystemClock_Config+0xcc>)
 80013d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <SystemClock_Config+0xcc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e4:	2301      	movs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013f8:	2319      	movs	r3, #25
 80013fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013fc:	23c0      	movs	r3, #192	@ 0xc0
 80013fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001404:	2304      	movs	r3, #4
 8001406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	4618      	mov	r0, r3
 800140e:	f002 fbc5 	bl	8003b9c <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001418:	f000 f842 	bl	80014a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2302      	movs	r3, #2
 8001422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800142c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2103      	movs	r1, #3
 8001438:	4618      	mov	r0, r3
 800143a:	f002 fe27 	bl	800408c <HAL_RCC_ClockConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001444:	f000 f82c 	bl	80014a0 <Error_Handler>
  }
}
 8001448:	bf00      	nop
 800144a:	3750      	adds	r7, #80	@ 0x50
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40007000 	.word	0x40007000

08001458 <USB_CDC_RxHandler>:

/* USER CODE BEGIN 4 */
void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	Comm_Receive(&usb, Buf, Len);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4803      	ldr	r0, [pc, #12]	@ (8001478 <USB_CDC_RxHandler+0x20>)
 800146c:	f7ff fc29 	bl	8000cc2 <Comm_Receive>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000013c 	.word	0x2000013c

0800147c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
	Comm_Receive(&serial, 0, size);
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	461a      	mov	r2, r3
 800148c:	2100      	movs	r1, #0
 800148e:	4803      	ldr	r0, [pc, #12]	@ (800149c <HAL_UARTEx_RxEventCallback+0x20>)
 8001490:	f7ff fc17 	bl	8000cc2 <Comm_Receive>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000234 	.word	0x20000234

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <Error_Handler+0x8>

080014ac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80014b0:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014b2:	4a18      	ldr	r2, [pc, #96]	@ (8001514 <MX_SPI2_Init+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014b6:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014f8:	220a      	movs	r2, #10
 80014fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	@ (8001510 <MX_SPI2_Init+0x64>)
 80014fe:	f002 ffa5 	bl	800444c <HAL_SPI_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001508:	f7ff ffca 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000032c 	.word	0x2000032c
 8001514:	40003800 	.word	0x40003800

08001518 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	@ (800159c <HAL_SPI_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12c      	bne.n	8001594 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001548:	6413      	str	r3, [r2, #64]	@ 0x40
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a10      	ldr	r2, [pc, #64]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001572:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001584:	2305      	movs	r3, #5
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <HAL_SPI_MspInit+0x8c>)
 8001590:	f000 ff14 	bl	80023bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	@ 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40003800 	.word	0x40003800
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	4a0f      	ldr	r2, [pc, #60]	@ (80015f4 <HAL_MspInit+0x4c>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	4a08      	ldr	r2, [pc, #32]	@ (80015f4 <HAL_MspInit+0x4c>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <MemManage_Handler+0x4>

08001610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <UsageFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164e:	f000 f95d 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <USART1_IRQHandler+0x10>)
 800165e:	f003 fe0d 	bl	800527c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000384 	.word	0x20000384

0800166c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <DMA2_Stream2_IRQHandler+0x10>)
 8001672:	f000 fc39 	bl	8001ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200003cc 	.word	0x200003cc

08001680 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <OTG_FS_IRQHandler+0x10>)
 8001686:	f001 f97a 	bl	800297e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20001910 	.word	0x20001910

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <MX_USART1_UART_Init+0x4c>)
 80016be:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <MX_USART1_UART_Init+0x50>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <MX_USART1_UART_Init+0x4c>)
 80016c4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80016c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <MX_USART1_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <MX_USART1_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <MX_USART1_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <MX_USART1_UART_Init+0x4c>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <MX_USART1_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <MX_USART1_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_USART1_UART_Init+0x4c>)
 80016f0:	f003 fc8c 	bl	800500c <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016fa:	f7ff fed1 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000384 	.word	0x20000384
 8001708:	40011000 	.word	0x40011000

0800170c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a35      	ldr	r2, [pc, #212]	@ (8001800 <HAL_UART_MspInit+0xf4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d163      	bne.n	80017f6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b34      	ldr	r3, [pc, #208]	@ (8001804 <HAL_UART_MspInit+0xf8>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	4a33      	ldr	r2, [pc, #204]	@ (8001804 <HAL_UART_MspInit+0xf8>)
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	6453      	str	r3, [r2, #68]	@ 0x44
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <HAL_UART_MspInit+0xf8>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <HAL_UART_MspInit+0xf8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a2c      	ldr	r2, [pc, #176]	@ (8001804 <HAL_UART_MspInit+0xf8>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <HAL_UART_MspInit+0xf8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001766:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001778:	2307      	movs	r3, #7
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4821      	ldr	r0, [pc, #132]	@ (8001808 <HAL_UART_MspInit+0xfc>)
 8001784:	f000 fe1a 	bl	80023bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001788:	4b20      	ldr	r3, [pc, #128]	@ (800180c <HAL_UART_MspInit+0x100>)
 800178a:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <HAL_UART_MspInit+0x104>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800178e:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <HAL_UART_MspInit+0x100>)
 8001790:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001794:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001796:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <HAL_UART_MspInit+0x100>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <HAL_UART_MspInit+0x100>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <HAL_UART_MspInit+0x100>)
 80017a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <HAL_UART_MspInit+0x100>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <HAL_UART_MspInit+0x100>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_UART_MspInit+0x100>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <HAL_UART_MspInit+0x100>)
 80017be:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80017c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <HAL_UART_MspInit+0x100>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017ca:	4810      	ldr	r0, [pc, #64]	@ (800180c <HAL_UART_MspInit+0x100>)
 80017cc:	f000 f9f4 	bl	8001bb8 <HAL_DMA_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80017d6:	f7ff fe63 	bl	80014a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a0b      	ldr	r2, [pc, #44]	@ (800180c <HAL_UART_MspInit+0x100>)
 80017de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <HAL_UART_MspInit+0x100>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	2025      	movs	r0, #37	@ 0x25
 80017ec:	f000 f9ad 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017f0:	2025      	movs	r0, #37	@ 0x25
 80017f2:	f000 f9c6 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017f6:	bf00      	nop
 80017f8:	3728      	adds	r7, #40	@ 0x28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40011000 	.word	0x40011000
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000
 800180c:	200003cc 	.word	0x200003cc
 8001810:	40026440 	.word	0x40026440

08001814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800184c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001818:	f7ff ff3c 	bl	8001694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480c      	ldr	r0, [pc, #48]	@ (8001850 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181e:	490d      	ldr	r1, [pc, #52]	@ (8001854 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001834:	4c0a      	ldr	r4, [pc, #40]	@ (8001860 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001842:	f008 fe41 	bl	800a4c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001846:	f7ff fcf3 	bl	8001230 <main>
  bx  lr    
 800184a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800184c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001858:	0800a5bc 	.word	0x0800a5bc
  ldr r2, =_sbss
 800185c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001860:	20002014 	.word	0x20002014

08001864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC_IRQHandler>
	...

08001868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800186c:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0d      	ldr	r2, [pc, #52]	@ (80018a8 <HAL_Init+0x40>)
 8001872:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <HAL_Init+0x40>)
 800187e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	@ (80018a8 <HAL_Init+0x40>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 f94f 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	200f      	movs	r0, #15
 8001898:	f000 f808 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff fe84 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f967 	bl	8001b9e <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 f92f 	bl	8001b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	@ (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000000 	.word	0x20000000
 8001904:	20000008 	.word	0x20000008
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008
 8001930:	2000042c 	.word	0x2000042c

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	2000042c 	.word	0x2000042c

0800194c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff ffee 	bl	8001934 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001966:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <HAL_Delay+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001972:	bf00      	nop
 8001974:	f7ff ffde 	bl	8001934 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	d8f7      	bhi.n	8001974 <HAL_Delay+0x28>
  {
  }
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000008 	.word	0x20000008

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c6:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	60d3      	str	r3, [r2, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0b      	blt.n	8001a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	4907      	ldr	r1, [pc, #28]	@ (8001a30 <__NVIC_EnableIRQ+0x38>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db0a      	blt.n	8001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	490c      	ldr	r1, [pc, #48]	@ (8001a80 <__NVIC_SetPriority+0x4c>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a5c:	e00a      	b.n	8001a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4908      	ldr	r1, [pc, #32]	@ (8001a84 <__NVIC_SetPriority+0x50>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	440b      	add	r3, r1
 8001a72:	761a      	strb	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	@ 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_EncodePriority+0x30>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_EncodePriority+0x32>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	4313      	orrs	r3, r2
         );
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	@ 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff8e 	bl	8001a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff29 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff3e 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff8e 	bl	8001a88 <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5d 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff31 	bl	80019f8 <__NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffa2 	bl	8001af0 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff feb6 	bl	8001934 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e099      	b.n	8001d08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf4:	e00f      	b.n	8001c16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bf6:	f7ff fe9d 	bl	8001934 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d908      	bls.n	8001c16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2220      	movs	r2, #32
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e078      	b.n	8001d08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e8      	bne.n	8001bf6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	4b38      	ldr	r3, [pc, #224]	@ (8001d10 <HAL_DMA_Init+0x158>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d107      	bne.n	8001c80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f023 0307 	bic.w	r3, r3, #7
 8001c96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d117      	bne.n	8001cda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00e      	beq.n	8001cda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fb01 	bl	80022c4 <DMA_CheckFifoParam>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2240      	movs	r2, #64	@ 0x40
 8001ccc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e016      	b.n	8001d08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fab8 	bl	8002258 <DMA_CalcBaseAndBitshift>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf0:	223f      	movs	r2, #63	@ 0x3f
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	f010803f 	.word	0xf010803f

08001d14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_DMA_Start_IT+0x26>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e040      	b.n	8001dbc <HAL_DMA_Start_IT+0xa8>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d12f      	bne.n	8001dae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2202      	movs	r2, #2
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fa4a 	bl	80021fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6c:	223f      	movs	r2, #63	@ 0x3f
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0216 	orr.w	r2, r2, #22
 8001d82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0208 	orr.w	r2, r2, #8
 8001d9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e005      	b.n	8001dba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001db6:	2302      	movs	r3, #2
 8001db8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dd2:	f7ff fdaf 	bl	8001934 <HAL_GetTick>
 8001dd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d008      	beq.n	8001df6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2280      	movs	r2, #128	@ 0x80
 8001de8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e052      	b.n	8001e9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0216 	bic.w	r2, r2, #22
 8001e04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <HAL_DMA_Abort+0x62>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0208 	bic.w	r2, r2, #8
 8001e34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e46:	e013      	b.n	8001e70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e48:	f7ff fd74 	bl	8001934 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d90c      	bls.n	8001e70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e015      	b.n	8001e9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1e4      	bne.n	8001e48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e82:	223f      	movs	r2, #63	@ 0x3f
 8001e84:	409a      	lsls	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d004      	beq.n	8001ec2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00c      	b.n	8001edc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2205      	movs	r2, #5
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef4:	4b8e      	ldr	r3, [pc, #568]	@ (8002130 <HAL_DMA_IRQHandler+0x248>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a8e      	ldr	r2, [pc, #568]	@ (8002134 <HAL_DMA_IRQHandler+0x24c>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0a9b      	lsrs	r3, r3, #10
 8001f00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f12:	2208      	movs	r2, #8
 8001f14:	409a      	lsls	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d01a      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0204 	bic.w	r2, r2, #4
 8001f3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f40:	2208      	movs	r2, #8
 8001f42:	409a      	lsls	r2, r3
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f58:	2201      	movs	r2, #1
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d012      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f76:	2201      	movs	r2, #1
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8e:	2204      	movs	r2, #4
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d012      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fac:	2204      	movs	r2, #4
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb8:	f043 0204 	orr.w	r2, r3, #4
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d043      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d03c      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d018      	beq.n	800202a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d108      	bne.n	8002018 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d024      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
 8002016:	e01f      	b.n	8002058 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	e016      	b.n	8002058 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0208 	bic.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205c:	2220      	movs	r2, #32
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 808f 	beq.w	8002188 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8087 	beq.w	8002188 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207e:	2220      	movs	r2, #32
 8002080:	409a      	lsls	r2, r3
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b05      	cmp	r3, #5
 8002090:	d136      	bne.n	8002100 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0216 	bic.w	r2, r2, #22
 80020a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_DMA_IRQHandler+0x1da>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0208 	bic.w	r2, r2, #8
 80020d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d6:	223f      	movs	r2, #63	@ 0x3f
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d07e      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
        }
        return;
 80020fe:	e079      	b.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01d      	beq.n	800214a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002120:	2b00      	cmp	r3, #0
 8002122:	d031      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e02c      	b.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000
 8002134:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d023      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
 8002148:	e01e      	b.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10f      	bne.n	8002178 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0210 	bic.w	r2, r2, #16
 8002166:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218c:	2b00      	cmp	r3, #0
 800218e:	d032      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d022      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2205      	movs	r2, #5
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3301      	adds	r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d307      	bcc.n	80021d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f2      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x2cc>
 80021ce:	e000      	b.n	80021d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
 80021f2:	e000      	b.n	80021f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021f4:	bf00      	nop
    }
  }
}
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002218:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b40      	cmp	r3, #64	@ 0x40
 8002228:	d108      	bne.n	800223c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800223a:	e007      	b.n	800224c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3b10      	subs	r3, #16
 8002268:	4a14      	ldr	r2, [pc, #80]	@ (80022bc <DMA_CalcBaseAndBitshift+0x64>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002272:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d909      	bls.n	800229a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	1d1a      	adds	r2, r3, #4
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	659a      	str	r2, [r3, #88]	@ 0x58
 8002298:	e007      	b.n	80022aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	aaaaaaab 	.word	0xaaaaaaab
 80022c0:	0800a5a4 	.word	0x0800a5a4

080022c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d11f      	bne.n	800231e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d856      	bhi.n	8002392 <DMA_CheckFifoParam+0xce>
 80022e4:	a201      	add	r2, pc, #4	@ (adr r2, 80022ec <DMA_CheckFifoParam+0x28>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	0800230f 	.word	0x0800230f
 80022f4:	080022fd 	.word	0x080022fd
 80022f8:	08002393 	.word	0x08002393
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002300:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d046      	beq.n	8002396 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230c:	e043      	b.n	8002396 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002316:	d140      	bne.n	800239a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800231c:	e03d      	b.n	800239a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002326:	d121      	bne.n	800236c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d837      	bhi.n	800239e <DMA_CheckFifoParam+0xda>
 800232e:	a201      	add	r2, pc, #4	@ (adr r2, 8002334 <DMA_CheckFifoParam+0x70>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002345 	.word	0x08002345
 8002338:	0800234b 	.word	0x0800234b
 800233c:	08002345 	.word	0x08002345
 8002340:	0800235d 	.word	0x0800235d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      break;
 8002348:	e030      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d025      	beq.n	80023a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235a:	e022      	b.n	80023a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002364:	d11f      	bne.n	80023a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800236a:	e01c      	b.n	80023a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d903      	bls.n	800237a <DMA_CheckFifoParam+0xb6>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d003      	beq.n	8002380 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002378:	e018      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
      break;
 800237e:	e015      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e00b      	b.n	80023aa <DMA_CheckFifoParam+0xe6>
      break;
 8002392:	bf00      	nop
 8002394:	e00a      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e008      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e006      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e004      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 80023a2:	bf00      	nop
 80023a4:	e002      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;   
 80023a6:	bf00      	nop
 80023a8:	e000      	b.n	80023ac <DMA_CheckFifoParam+0xe8>
      break;
 80023aa:	bf00      	nop
    }
  } 
  
  return status; 
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	@ 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e159      	b.n	800268c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f040 8148 	bne.w	8002686 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d005      	beq.n	800240e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	2b02      	cmp	r3, #2
 800240c:	d130      	bne.n	8002470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 0201 	and.w	r2, r3, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b03      	cmp	r3, #3
 800247a:	d017      	beq.n	80024ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d123      	bne.n	8002500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	08da      	lsrs	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3208      	adds	r2, #8
 80024c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	08da      	lsrs	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3208      	adds	r2, #8
 80024fa:	69b9      	ldr	r1, [r7, #24]
 80024fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0203 	and.w	r2, r3, #3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a2 	beq.w	8002686 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b57      	ldr	r3, [pc, #348]	@ (80026a4 <HAL_GPIO_Init+0x2e8>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	4a56      	ldr	r2, [pc, #344]	@ (80026a4 <HAL_GPIO_Init+0x2e8>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002550:	6453      	str	r3, [r2, #68]	@ 0x44
 8002552:	4b54      	ldr	r3, [pc, #336]	@ (80026a4 <HAL_GPIO_Init+0x2e8>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255e:	4a52      	ldr	r2, [pc, #328]	@ (80026a8 <HAL_GPIO_Init+0x2ec>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a49      	ldr	r2, [pc, #292]	@ (80026ac <HAL_GPIO_Init+0x2f0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d019      	beq.n	80025be <HAL_GPIO_Init+0x202>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a48      	ldr	r2, [pc, #288]	@ (80026b0 <HAL_GPIO_Init+0x2f4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x1fe>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a47      	ldr	r2, [pc, #284]	@ (80026b4 <HAL_GPIO_Init+0x2f8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x1fa>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a46      	ldr	r2, [pc, #280]	@ (80026b8 <HAL_GPIO_Init+0x2fc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x1f6>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a45      	ldr	r2, [pc, #276]	@ (80026bc <HAL_GPIO_Init+0x300>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x1f2>
 80025aa:	2304      	movs	r3, #4
 80025ac:	e008      	b.n	80025c0 <HAL_GPIO_Init+0x204>
 80025ae:	2307      	movs	r3, #7
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x204>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_Init+0x204>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_Init+0x204>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_GPIO_Init+0x204>
 80025be:	2300      	movs	r3, #0
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f002 0203 	and.w	r2, r2, #3
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	4093      	lsls	r3, r2
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d0:	4935      	ldr	r1, [pc, #212]	@ (80026a8 <HAL_GPIO_Init+0x2ec>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025de:	4b38      	ldr	r3, [pc, #224]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002602:	4a2f      	ldr	r2, [pc, #188]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002608:	4b2d      	ldr	r3, [pc, #180]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800262c:	4a24      	ldr	r2, [pc, #144]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002632:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002656:	4a1a      	ldr	r2, [pc, #104]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800265c:	4b18      	ldr	r3, [pc, #96]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002680:	4a0f      	ldr	r2, [pc, #60]	@ (80026c0 <HAL_GPIO_Init+0x304>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	f67f aea2 	bls.w	80023d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3724      	adds	r7, #36	@ 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40013800 	.word	0x40013800
 80026ac:	40020000 	.word	0x40020000
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40013c00 	.word	0x40013c00

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e0:	e003      	b.n	80026ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	041a      	lsls	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	619a      	str	r2, [r3, #24]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af02      	add	r7, sp, #8
 80026fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e101      	b.n	800290c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f007 fbbe 	bl	8009ea4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2203      	movs	r2, #3
 800272c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002736:	d102      	bne.n	800273e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 ff97 	bl	8006676 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7c1a      	ldrb	r2, [r3, #16]
 8002750:	f88d 2000 	strb.w	r2, [sp]
 8002754:	3304      	adds	r3, #4
 8002756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002758:	f003 fe76 	bl	8006448 <USB_CoreInit>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0ce      	b.n	800290c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f003 ff8f 	bl	8006698 <USB_SetCurrentMode>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0bf      	b.n	800290c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e04a      	b.n	8002828 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3315      	adds	r3, #21
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	3314      	adds	r3, #20
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	b298      	uxth	r0, r3
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	332e      	adds	r3, #46	@ 0x2e
 80027ce:	4602      	mov	r2, r0
 80027d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	3318      	adds	r3, #24
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	331c      	adds	r3, #28
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	3320      	adds	r3, #32
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	3324      	adds	r3, #36	@ 0x24
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	3301      	adds	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	791b      	ldrb	r3, [r3, #4]
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	429a      	cmp	r2, r3
 8002830:	d3af      	bcc.n	8002792 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002832:	2300      	movs	r3, #0
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	e044      	b.n	80028c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	3301      	adds	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	791b      	ldrb	r3, [r3, #4]
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d3b5      	bcc.n	8002838 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7c1a      	ldrb	r2, [r3, #16]
 80028d4:	f88d 2000 	strb.w	r2, [sp]
 80028d8:	3304      	adds	r3, #4
 80028da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028dc:	f003 ff28 	bl	8006730 <USB_DevInit>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00c      	b.n	800290c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f004 ff72 	bl	80077ee <USB_DevDisconnect>

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_PCD_Start+0x1c>
 800292c:	2302      	movs	r3, #2
 800292e:	e022      	b.n	8002976 <HAL_PCD_Start+0x62>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002950:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f003 fe79 	bl	8006654 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f004 ff20 	bl	80077ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800297e:	b590      	push	{r4, r7, lr}
 8002980:	b08d      	sub	sp, #52	@ 0x34
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f004 ffde 	bl	8007956 <USB_GetMode>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 848c 	bne.w	80032ba <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f004 ff42 	bl	8007830 <USB_ReadInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8482 	beq.w	80032b8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 ff2f 	bl	8007830 <USB_ReadInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d107      	bne.n	80029ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f002 0202 	and.w	r2, r2, #2
 80029ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 ff1d 	bl	8007830 <USB_ReadInterrupts>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d161      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0210 	bic.w	r2, r2, #16
 8002a0e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f003 020f 	and.w	r2, r3, #15
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	0c5b      	lsrs	r3, r3, #17
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d124      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d035      	beq.n	8002ab4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6a38      	ldr	r0, [r7, #32]
 8002a5c:	f004 fd54 	bl	8007508 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a6c:	441a      	add	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a7e:	441a      	add	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	615a      	str	r2, [r3, #20]
 8002a84:	e016      	b.n	8002ab4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	0c5b      	lsrs	r3, r3, #17
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d110      	bne.n	8002ab4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a98:	2208      	movs	r2, #8
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6a38      	ldr	r0, [r7, #32]
 8002a9e:	f004 fd33 	bl	8007508 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aae:	441a      	add	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0210 	orr.w	r2, r2, #16
 8002ac2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 feb1 	bl	8007830 <USB_ReadInterrupts>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ad4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ad8:	f040 80a7 	bne.w	8002c2a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 feb6 	bl	8007856 <USB_ReadDevAllOutEpInterrupt>
 8002aea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002aec:	e099      	b.n	8002c22 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 808e 	beq.w	8002c16 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f004 feda 	bl	80078be <USB_ReadDevOutEPInterrupt>
 8002b0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b22:	461a      	mov	r2, r3
 8002b24:	2301      	movs	r3, #1
 8002b26:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fea4 	bl	8003878 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b46:	461a      	mov	r2, r3
 8002b48:	2308      	movs	r3, #8
 8002b4a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 ff7a 	bl	8003a48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d030      	beq.n	8002bdc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b82:	2b80      	cmp	r3, #128	@ 0x80
 8002b84:	d109      	bne.n	8002b9a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b98:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	3304      	adds	r3, #4
 8002bae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	78db      	ldrb	r3, [r3, #3]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d108      	bne.n	8002bca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f007 fa69 	bl	800a09c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2302      	movs	r3, #2
 8002bda:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c14:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	3301      	adds	r3, #1
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f af62 	bne.w	8002aee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f004 fdfe 	bl	8007830 <USB_ReadInterrupts>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c3e:	f040 80db 	bne.w	8002df8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f004 fe1f 	bl	800788a <USB_ReadDevAllInEpInterrupt>
 8002c4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002c52:	e0cd      	b.n	8002df0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80c2 	beq.w	8002de4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f004 fe45 	bl	80078fa <USB_ReadDevInEPInterrupt>
 8002c70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d057      	beq.n	8002d2c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	2201      	movs	r2, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69f9      	ldr	r1, [r7, #28]
 8002c98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cac:	461a      	mov	r2, r3
 8002cae:	2301      	movs	r3, #1
 8002cb0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	799b      	ldrb	r3, [r3, #6]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d132      	bne.n	8002d20 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3320      	adds	r3, #32
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4403      	add	r3, r0
 8002cda:	331c      	adds	r3, #28
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4419      	add	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4403      	add	r3, r0
 8002cee:	3320      	adds	r3, #32
 8002cf0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d113      	bne.n	8002d20 <HAL_PCD_IRQHandler+0x3a2>
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	3324      	adds	r3, #36	@ 0x24
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d108      	bne.n	8002d20 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	f004 fe4c 	bl	80079b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f007 f93d 	bl	8009fa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d42:	461a      	mov	r2, r3
 8002d44:	2308      	movs	r3, #8
 8002d46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2310      	movs	r3, #16
 8002d62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2340      	movs	r3, #64	@ 0x40
 8002d7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d023      	beq.n	8002dd2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d8c:	6a38      	ldr	r0, [r7, #32]
 8002d8e:	f003 fe33 	bl	80069f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	3310      	adds	r3, #16
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	3304      	adds	r3, #4
 8002da4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	78db      	ldrb	r3, [r3, #3]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d108      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f007 f980 	bl	800a0c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2302      	movs	r3, #2
 8002dd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ddc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fcbd 	bl	800375e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	3301      	adds	r3, #1
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f47f af2e 	bne.w	8002c54 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 fd17 	bl	8007830 <USB_ReadInterrupts>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e0c:	d122      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d108      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e34:	2100      	movs	r1, #0
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fea4 	bl	8003b84 <HAL_PCDEx_LPM_Callback>
 8002e3c:	e002      	b.n	8002e44 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f007 f91e 	bl	800a080 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f004 fce9 	bl	8007830 <USB_ReadInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e68:	d112      	bne.n	8002e90 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f007 f8da 	bl	800a034 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002e8e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f004 fccb 	bl	8007830 <USB_ReadInterrupts>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea4:	f040 80b7 	bne.w	8003016 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 fd98 	bl	80069f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ecc:	e046      	b.n	8002f5c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eda:	461a      	mov	r2, r3
 8002edc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ee0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ef2:	0151      	lsls	r1, r2, #5
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	440a      	add	r2, r1
 8002ef8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002efc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f26:	0151      	lsls	r1, r2, #5
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	440a      	add	r2, r1
 8002f2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f46:	0151      	lsls	r1, r2, #5
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	440a      	add	r2, r1
 8002f4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002f54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f58:	3301      	adds	r3, #1
 8002f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	791b      	ldrb	r3, [r3, #4]
 8002f60:	461a      	mov	r2, r3
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d3b2      	bcc.n	8002ece <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f76:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002f7a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7bdb      	ldrb	r3, [r3, #15]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d016      	beq.n	8002fb2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f94:	f043 030b 	orr.w	r3, r3, #11
 8002f98:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002faa:	f043 030b 	orr.w	r3, r3, #11
 8002fae:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fb0:	e015      	b.n	8002fde <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fc4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002fc8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fd8:	f043 030b 	orr.w	r3, r3, #11
 8002fdc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002ff0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003000:	461a      	mov	r2, r3
 8003002:	f004 fcd9 	bl	80079b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f004 fc08 	bl	8007830 <USB_ReadInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800302a:	d123      	bne.n	8003074 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f004 fc9e 	bl	8007972 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f003 fd55 	bl	8006aea <USB_GetDevSpeed>
 8003040:	4603      	mov	r3, r0
 8003042:	461a      	mov	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681c      	ldr	r4, [r3, #0]
 800304c:	f001 f9ca 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 8003050:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003056:	461a      	mov	r2, r3
 8003058:	4620      	mov	r0, r4
 800305a:	f003 fa59 	bl	8006510 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f006 ffc9 	bl	8009ff6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003072:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f004 fbd9 	bl	8007830 <USB_ReadInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b08      	cmp	r3, #8
 8003086:	d10a      	bne.n	800309e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f006 ffa6 	bl	8009fda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f002 0208 	and.w	r2, r2, #8
 800309c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f004 fbc4 	bl	8007830 <USB_ReadInterrupts>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ae:	2b80      	cmp	r3, #128	@ 0x80
 80030b0:	d123      	bne.n	80030fa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030be:	2301      	movs	r3, #1
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c2:	e014      	b.n	80030ee <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fb0a 	bl	80036fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	3301      	adds	r3, #1
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	791b      	ldrb	r3, [r3, #4]
 80030f2:	461a      	mov	r2, r3
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d3e4      	bcc.n	80030c4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f004 fb96 	bl	8007830 <USB_ReadInterrupts>
 8003104:	4603      	mov	r3, r0
 8003106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800310a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800310e:	d13c      	bne.n	800318a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003110:	2301      	movs	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
 8003114:	e02b      	b.n	800316e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	3318      	adds	r3, #24
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d115      	bne.n	8003168 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800313c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800313e:	2b00      	cmp	r3, #0
 8003140:	da12      	bge.n	8003168 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3317      	adds	r3, #23
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800315e:	b2db      	uxtb	r3, r3
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 faca 	bl	80036fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	3301      	adds	r3, #1
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	791b      	ldrb	r3, [r3, #4]
 8003172:	461a      	mov	r2, r3
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	4293      	cmp	r3, r2
 8003178:	d3cd      	bcc.n	8003116 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f004 fb4e 	bl	8007830 <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800319a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800319e:	d156      	bne.n	800324e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031a0:	2301      	movs	r3, #1
 80031a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a4:	e045      	b.n	8003232 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d12e      	bne.n	800322c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da2b      	bge.n	800322c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80031e0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d121      	bne.n	800322c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003224:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003228:	6053      	str	r3, [r2, #4]
            break;
 800322a:	e008      	b.n	800323e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	3301      	adds	r3, #1
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	791b      	ldrb	r3, [r3, #4]
 8003236:	461a      	mov	r2, r3
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	4293      	cmp	r3, r2
 800323c:	d3b3      	bcc.n	80031a6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800324c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f004 faec 	bl	8007830 <USB_ReadInterrupts>
 8003258:	4603      	mov	r3, r0
 800325a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003262:	d10a      	bne.n	800327a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f006 ff3d 	bl	800a0e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f004 fad6 	bl	8007830 <USB_ReadInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b04      	cmp	r3, #4
 800328c:	d115      	bne.n	80032ba <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f006 ff2d 	bl	800a100 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	e000      	b.n	80032ba <HAL_PCD_IRQHandler+0x93c>
      return;
 80032b8:	bf00      	nop
    }
  }
}
 80032ba:	3734      	adds	r7, #52	@ 0x34
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd90      	pop	{r4, r7, pc}

080032c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_PCD_SetAddress+0x1a>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e012      	b.n	8003300 <HAL_PCD_SetAddress+0x40>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f004 fa35 	bl	8007760 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	4608      	mov	r0, r1
 8003312:	4611      	mov	r1, r2
 8003314:	461a      	mov	r2, r3
 8003316:	4603      	mov	r3, r0
 8003318:	70fb      	strb	r3, [r7, #3]
 800331a:	460b      	mov	r3, r1
 800331c:	803b      	strh	r3, [r7, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332a:	2b00      	cmp	r3, #0
 800332c:	da0f      	bge.n	800334e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	f003 020f 	and.w	r2, r3, #15
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	3310      	adds	r3, #16
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	3304      	adds	r3, #4
 8003344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	705a      	strb	r2, [r3, #1]
 800334c:	e00f      	b.n	800336e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	f003 020f 	and.w	r2, r3, #15
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4413      	add	r3, r2
 8003364:	3304      	adds	r3, #4
 8003366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800337a:	883b      	ldrh	r3, [r7, #0]
 800337c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	78ba      	ldrb	r2, [r7, #2]
 8003388:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	785b      	ldrb	r3, [r3, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800339c:	78bb      	ldrb	r3, [r7, #2]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d102      	bne.n	80033a8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_PCD_EP_Open+0xae>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e00e      	b.n	80033d4 <HAL_PCD_EP_Open+0xcc>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f003 fbb5 	bl	8006b34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80033d2:	7afb      	ldrb	r3, [r7, #11]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	da0f      	bge.n	8003410 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	f003 020f 	and.w	r2, r3, #15
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	3310      	adds	r3, #16
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	3304      	adds	r3, #4
 8003406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	705a      	strb	r2, [r3, #1]
 800340e:	e00f      	b.n	8003430 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	f003 020f 	and.w	r2, r3, #15
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	3304      	adds	r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	b2da      	uxtb	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_PCD_EP_Close+0x6e>
 8003446:	2302      	movs	r3, #2
 8003448:	e00e      	b.n	8003468 <HAL_PCD_EP_Close+0x8c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	4618      	mov	r0, r3
 800345a:	f003 fbf3 	bl	8006c44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	460b      	mov	r3, r1
 800347e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003480:	7afb      	ldrb	r3, [r7, #11]
 8003482:	f003 020f 	and.w	r2, r3, #15
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	3304      	adds	r3, #4
 8003498:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2200      	movs	r2, #0
 80034b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	799b      	ldrb	r3, [r3, #6]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	799b      	ldrb	r3, [r3, #6]
 80034d4:	461a      	mov	r2, r3
 80034d6:	6979      	ldr	r1, [r7, #20]
 80034d8:	f003 fc90 	bl	8006dfc <USB_EPStartXfer>

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 020f 	and.w	r2, r3, #15
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003508:	681b      	ldr	r3, [r3, #0]
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	460b      	mov	r3, r1
 8003524:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003526:	7afb      	ldrb	r3, [r7, #11]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3310      	adds	r3, #16
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2201      	movs	r2, #1
 8003554:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003556:	7afb      	ldrb	r3, [r7, #11]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	b2da      	uxtb	r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	799b      	ldrb	r3, [r3, #6]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d102      	bne.n	8003570 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	799b      	ldrb	r3, [r3, #6]
 8003578:	461a      	mov	r2, r3
 800357a:	6979      	ldr	r1, [r7, #20]
 800357c:	f003 fc3e 	bl	8006dfc <USB_EPStartXfer>

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	7912      	ldrb	r2, [r2, #4]
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e04f      	b.n	8003648 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	da0f      	bge.n	80035d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	f003 020f 	and.w	r2, r3, #15
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	3310      	adds	r3, #16
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	4413      	add	r3, r2
 80035c4:	3304      	adds	r3, #4
 80035c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	705a      	strb	r2, [r3, #1]
 80035ce:	e00d      	b.n	80035ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	3304      	adds	r3, #4
 80035e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_PCD_EP_SetStall+0x82>
 8003608:	2302      	movs	r3, #2
 800360a:	e01d      	b.n	8003648 <HAL_PCD_EP_SetStall+0xbe>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68f9      	ldr	r1, [r7, #12]
 800361a:	4618      	mov	r0, r3
 800361c:	f003 ffcc 	bl	80075b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7999      	ldrb	r1, [r3, #6]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003638:	461a      	mov	r2, r3
 800363a:	f004 f9bd 	bl	80079b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	7912      	ldrb	r2, [r2, #4]
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e042      	b.n	80036f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800366e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003672:	2b00      	cmp	r3, #0
 8003674:	da0f      	bge.n	8003696 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	f003 020f 	and.w	r2, r3, #15
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	3310      	adds	r3, #16
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	3304      	adds	r3, #4
 800368c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	705a      	strb	r2, [r3, #1]
 8003694:	e00f      	b.n	80036b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	f003 020f 	and.w	r2, r3, #15
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	4413      	add	r3, r2
 80036ac:	3304      	adds	r3, #4
 80036ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_PCD_EP_ClrStall+0x86>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e00e      	b.n	80036f4 <HAL_PCD_EP_ClrStall+0xa4>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68f9      	ldr	r1, [r7, #12]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f003 ffd5 	bl	8007694 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800370c:	2b00      	cmp	r3, #0
 800370e:	da0c      	bge.n	800372a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 020f 	and.w	r2, r3, #15
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	3310      	adds	r3, #16
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	3304      	adds	r3, #4
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e00c      	b.n	8003744 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	3304      	adds	r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68f9      	ldr	r1, [r7, #12]
 800374a:	4618      	mov	r0, r3
 800374c:	f003 fdf4 	bl	8007338 <USB_EPStopXfer>
 8003750:	4603      	mov	r3, r0
 8003752:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003754:	7afb      	ldrb	r3, [r7, #11]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b08a      	sub	sp, #40	@ 0x28
 8003762:	af02      	add	r7, sp, #8
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	3310      	adds	r3, #16
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	3304      	adds	r3, #4
 8003784:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	429a      	cmp	r2, r3
 8003790:	d901      	bls.n	8003796 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e06b      	b.n	800386e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d902      	bls.n	80037b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3303      	adds	r3, #3
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ba:	e02a      	b.n	8003812 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d902      	bls.n	80037d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	3303      	adds	r3, #3
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	68d9      	ldr	r1, [r3, #12]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	4603      	mov	r3, r0
 80037f4:	6978      	ldr	r0, [r7, #20]
 80037f6:	f003 fe49 	bl	800748c <USB_WritePacket>

    ep->xfer_buff  += len;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	441a      	add	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	441a      	add	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	429a      	cmp	r2, r3
 8003826:	d809      	bhi.n	800383c <PCD_WriteEmptyTxFifo+0xde>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003830:	429a      	cmp	r2, r3
 8003832:	d203      	bcs.n	800383c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1bf      	bne.n	80037bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	429a      	cmp	r2, r3
 8003846:	d811      	bhi.n	800386c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	2201      	movs	r2, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800385c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	43db      	mvns	r3, r3
 8003862:	6939      	ldr	r1, [r7, #16]
 8003864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003868:	4013      	ands	r3, r2
 800386a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	333c      	adds	r3, #60	@ 0x3c
 8003890:	3304      	adds	r3, #4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	799b      	ldrb	r3, [r3, #6]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d17b      	bne.n	80039a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	4a61      	ldr	r2, [pc, #388]	@ (8003a40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	f240 80b9 	bls.w	8003a34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80b3 	beq.w	8003a34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038da:	461a      	mov	r2, r3
 80038dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038e0:	6093      	str	r3, [r2, #8]
 80038e2:	e0a7      	b.n	8003a34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038fa:	461a      	mov	r2, r3
 80038fc:	2320      	movs	r3, #32
 80038fe:	6093      	str	r3, [r2, #8]
 8003900:	e098      	b.n	8003a34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003908:	2b00      	cmp	r3, #0
 800390a:	f040 8093 	bne.w	8003a34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	4a4b      	ldr	r2, [pc, #300]	@ (8003a40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d90f      	bls.n	8003936 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800392c:	461a      	mov	r2, r3
 800392e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003932:	6093      	str	r3, [r2, #8]
 8003934:	e07e      	b.n	8003a34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	3304      	adds	r3, #4
 800394a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	0159      	lsls	r1, r3, #5
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	440b      	add	r3, r1
 8003958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003962:	1ad2      	subs	r2, r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d114      	bne.n	8003998 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003980:	461a      	mov	r2, r3
 8003982:	2101      	movs	r1, #1
 8003984:	f004 f818 	bl	80079b8 <USB_EP0_OutStart>
 8003988:	e006      	b.n	8003998 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	441a      	add	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f006 fae6 	bl	8009f70 <HAL_PCD_DataOutStageCallback>
 80039a4:	e046      	b.n	8003a34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	4a26      	ldr	r2, [pc, #152]	@ (8003a44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d124      	bne.n	80039f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c4:	461a      	mov	r2, r3
 80039c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ca:	6093      	str	r3, [r2, #8]
 80039cc:	e032      	b.n	8003a34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e4:	461a      	mov	r2, r3
 80039e6:	2320      	movs	r3, #32
 80039e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f006 fabd 	bl	8009f70 <HAL_PCD_DataOutStageCallback>
 80039f6:	e01d      	b.n	8003a34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d114      	bne.n	8003a28 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d108      	bne.n	8003a28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a20:	461a      	mov	r2, r3
 8003a22:	2100      	movs	r1, #0
 8003a24:	f003 ffc8 	bl	80079b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f006 fa9e 	bl	8009f70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	4f54300a 	.word	0x4f54300a
 8003a44:	4f54310a 	.word	0x4f54310a

08003a48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	333c      	adds	r3, #60	@ 0x3c
 8003a60:	3304      	adds	r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d90e      	bls.n	8003a9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d009      	beq.n	8003a9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a94:	461a      	mov	r2, r3
 8003a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f006 fa55 	bl	8009f4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d90c      	bls.n	8003ac4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	799b      	ldrb	r3, [r3, #6]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d108      	bne.n	8003ac4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003abc:	461a      	mov	r2, r3
 8003abe:	2101      	movs	r1, #1
 8003ac0:	f003 ff7a 	bl	80079b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	4f54300a 	.word	0x4f54300a

08003ad4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	70fb      	strb	r3, [r7, #3]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d107      	bne.n	8003b02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003af2:	883b      	ldrh	r3, [r7, #0]
 8003af4:	0419      	lsls	r1, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b00:	e028      	b.n	8003b54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b10:	2300      	movs	r3, #0
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	e00d      	b.n	8003b32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	3340      	adds	r3, #64	@ 0x40
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	4413      	add	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d3ec      	bcc.n	8003b16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b3c:	883b      	ldrh	r3, [r7, #0]
 8003b3e:	0418      	lsls	r0, r3, #16
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	4302      	orrs	r2, r0
 8003b4c:	3340      	adds	r3, #64	@ 0x40
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e267      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d075      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bba:	4b88      	ldr	r3, [pc, #544]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d00c      	beq.n	8003be0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc6:	4b85      	ldr	r3, [pc, #532]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d112      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd2:	4b82      	ldr	r3, [pc, #520]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bde:	d10b      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	4b7e      	ldr	r3, [pc, #504]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d05b      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x108>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d157      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e242      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c00:	d106      	bne.n	8003c10 <HAL_RCC_OscConfig+0x74>
 8003c02:	4b76      	ldr	r3, [pc, #472]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a75      	ldr	r2, [pc, #468]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e01d      	b.n	8003c4c <HAL_RCC_OscConfig+0xb0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x98>
 8003c1a:	4b70      	ldr	r3, [pc, #448]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6f      	ldr	r2, [pc, #444]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b6d      	ldr	r3, [pc, #436]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a6c      	ldr	r2, [pc, #432]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0xb0>
 8003c34:	4b69      	ldr	r3, [pc, #420]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a68      	ldr	r2, [pc, #416]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b66      	ldr	r3, [pc, #408]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a65      	ldr	r2, [pc, #404]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d013      	beq.n	8003c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fd fe6e 	bl	8001934 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fe6a 	bl	8001934 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	@ 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e207      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0xc0>
 8003c7a:	e014      	b.n	8003ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fd fe5a 	bl	8001934 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fd fe56 	bl	8001934 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	@ 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e1f3      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	4b51      	ldr	r3, [pc, #324]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0xe8>
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d063      	beq.n	8003d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b47      	ldr	r3, [pc, #284]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d11c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cca:	4b44      	ldr	r3, [pc, #272]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d116      	bne.n	8003d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	4b41      	ldr	r3, [pc, #260]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_RCC_OscConfig+0x152>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d001      	beq.n	8003cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e1c7      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cee:	4b3b      	ldr	r3, [pc, #236]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4937      	ldr	r1, [pc, #220]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	e03a      	b.n	8003d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d020      	beq.n	8003d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d0c:	4b34      	ldr	r3, [pc, #208]	@ (8003de0 <HAL_RCC_OscConfig+0x244>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fd fe0f 	bl	8001934 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d1a:	f7fd fe0b 	bl	8001934 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1a8      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d38:	4b28      	ldr	r3, [pc, #160]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4925      	ldr	r1, [pc, #148]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]
 8003d4c:	e015      	b.n	8003d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4e:	4b24      	ldr	r3, [pc, #144]	@ (8003de0 <HAL_RCC_OscConfig+0x244>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd fdee 	bl	8001934 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5c:	f7fd fdea 	bl	8001934 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e187      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d036      	beq.n	8003df4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8e:	4b15      	ldr	r3, [pc, #84]	@ (8003de4 <HAL_RCC_OscConfig+0x248>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fd fdce 	bl	8001934 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fdca 	bl	8001934 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e167      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	4b0b      	ldr	r3, [pc, #44]	@ (8003ddc <HAL_RCC_OscConfig+0x240>)
 8003db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x200>
 8003dba:	e01b      	b.n	8003df4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbc:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <HAL_RCC_OscConfig+0x248>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc2:	f7fd fdb7 	bl	8001934 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	e00e      	b.n	8003de8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fd fdb3 	bl	8001934 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d907      	bls.n	8003de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e150      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	42470000 	.word	0x42470000
 8003de4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de8:	4b88      	ldr	r3, [pc, #544]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ea      	bne.n	8003dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8097 	beq.w	8003f30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e02:	2300      	movs	r3, #0
 8003e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e06:	4b81      	ldr	r3, [pc, #516]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10f      	bne.n	8003e32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	4b7d      	ldr	r3, [pc, #500]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e22:	4b7a      	ldr	r3, [pc, #488]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e32:	4b77      	ldr	r3, [pc, #476]	@ (8004010 <HAL_RCC_OscConfig+0x474>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d118      	bne.n	8003e70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3e:	4b74      	ldr	r3, [pc, #464]	@ (8004010 <HAL_RCC_OscConfig+0x474>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a73      	ldr	r2, [pc, #460]	@ (8004010 <HAL_RCC_OscConfig+0x474>)
 8003e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4a:	f7fd fd73 	bl	8001934 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e52:	f7fd fd6f 	bl	8001934 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e10c      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <HAL_RCC_OscConfig+0x474>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x2ea>
 8003e78:	4b64      	ldr	r3, [pc, #400]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	4a63      	ldr	r2, [pc, #396]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e84:	e01c      	b.n	8003ec0 <HAL_RCC_OscConfig+0x324>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x30c>
 8003e8e:	4b5f      	ldr	r3, [pc, #380]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e92:	4a5e      	ldr	r2, [pc, #376]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e94:	f043 0304 	orr.w	r3, r3, #4
 8003e98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e9a:	4b5c      	ldr	r3, [pc, #368]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea6:	e00b      	b.n	8003ec0 <HAL_RCC_OscConfig+0x324>
 8003ea8:	4b58      	ldr	r3, [pc, #352]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eac:	4a57      	ldr	r2, [pc, #348]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb4:	4b55      	ldr	r3, [pc, #340]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb8:	4a54      	ldr	r2, [pc, #336]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003eba:	f023 0304 	bic.w	r3, r3, #4
 8003ebe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d015      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd fd34 	bl	8001934 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed0:	f7fd fd30 	bl	8001934 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e0cb      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee6:	4b49      	ldr	r3, [pc, #292]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0ee      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x334>
 8003ef2:	e014      	b.n	8003f1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef4:	f7fd fd1e 	bl	8001934 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fd fd1a 	bl	8001934 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0b5      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f12:	4b3e      	ldr	r3, [pc, #248]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1ee      	bne.n	8003efc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d105      	bne.n	8003f30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f24:	4b39      	ldr	r3, [pc, #228]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	4a38      	ldr	r2, [pc, #224]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 80a1 	beq.w	800407c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f3a:	4b34      	ldr	r3, [pc, #208]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d05c      	beq.n	8004000 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d141      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4e:	4b31      	ldr	r3, [pc, #196]	@ (8004014 <HAL_RCC_OscConfig+0x478>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fd fcee 	bl	8001934 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fd fcea 	bl	8001934 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e087      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	4b27      	ldr	r3, [pc, #156]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	019b      	lsls	r3, r3, #6
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	3b01      	subs	r3, #1
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	061b      	lsls	r3, r3, #24
 8003f9e:	491b      	ldr	r1, [pc, #108]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <HAL_RCC_OscConfig+0x478>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003faa:	f7fd fcc3 	bl	8001934 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb2:	f7fd fcbf 	bl	8001934 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e05c      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc4:	4b11      	ldr	r3, [pc, #68]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x416>
 8003fd0:	e054      	b.n	800407c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd2:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <HAL_RCC_OscConfig+0x478>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fcac 	bl	8001934 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fd fca8 	bl	8001934 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e045      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff2:	4b06      	ldr	r3, [pc, #24]	@ (800400c <HAL_RCC_OscConfig+0x470>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x444>
 8003ffe:	e03d      	b.n	800407c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d107      	bne.n	8004018 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e038      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
 800400c:	40023800 	.word	0x40023800
 8004010:	40007000 	.word	0x40007000
 8004014:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004018:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <HAL_RCC_OscConfig+0x4ec>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d028      	beq.n	8004078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d121      	bne.n	8004078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d11a      	bne.n	8004078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004048:	4013      	ands	r3, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800404e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004050:	4293      	cmp	r3, r2
 8004052:	d111      	bne.n	8004078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	3b01      	subs	r3, #1
 8004062:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d107      	bne.n	8004078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004072:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40023800 	.word	0x40023800

0800408c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0cc      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040a0:	4b68      	ldr	r3, [pc, #416]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d90c      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b65      	ldr	r3, [pc, #404]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b63      	ldr	r3, [pc, #396]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0b8      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e0:	4b59      	ldr	r3, [pc, #356]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a58      	ldr	r2, [pc, #352]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f8:	4b53      	ldr	r3, [pc, #332]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a52      	ldr	r2, [pc, #328]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b50      	ldr	r3, [pc, #320]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	494d      	ldr	r1, [pc, #308]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d044      	beq.n	80041ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	4b47      	ldr	r3, [pc, #284]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d119      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d003      	beq.n	800414a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004146:	2b03      	cmp	r3, #3
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	4b3f      	ldr	r3, [pc, #252]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e06f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415a:	4b3b      	ldr	r3, [pc, #236]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e067      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416a:	4b37      	ldr	r3, [pc, #220]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f023 0203 	bic.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4934      	ldr	r1, [pc, #208]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800417c:	f7fd fbda 	bl	8001934 <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	e00a      	b.n	800419a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004184:	f7fd fbd6 	bl	8001934 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e04f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	4b2b      	ldr	r3, [pc, #172]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 020c 	and.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1eb      	bne.n	8004184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041ac:	4b25      	ldr	r3, [pc, #148]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d20c      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b22      	ldr	r3, [pc, #136]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b20      	ldr	r3, [pc, #128]	@ (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e032      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e0:	4b19      	ldr	r3, [pc, #100]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4916      	ldr	r1, [pc, #88]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041fe:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	490e      	ldr	r1, [pc, #56]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004212:	f000 f821 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 8004216:	4602      	mov	r2, r0
 8004218:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	490a      	ldr	r1, [pc, #40]	@ (800424c <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	5ccb      	ldrb	r3, [r1, r3]
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	4a09      	ldr	r2, [pc, #36]	@ (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800422e:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <HAL_RCC_ClockConfig+0x1c8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fd fb3a 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023c00 	.word	0x40023c00
 8004248:	40023800 	.word	0x40023800
 800424c:	0800a58c 	.word	0x0800a58c
 8004250:	20000000 	.word	0x20000000
 8004254:	20000004 	.word	0x20000004

08004258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800425c:	b090      	sub	sp, #64	@ 0x40
 800425e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004270:	4b59      	ldr	r3, [pc, #356]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	2b08      	cmp	r3, #8
 800427a:	d00d      	beq.n	8004298 <HAL_RCC_GetSysClockFreq+0x40>
 800427c:	2b08      	cmp	r3, #8
 800427e:	f200 80a1 	bhi.w	80043c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x34>
 8004286:	2b04      	cmp	r3, #4
 8004288:	d003      	beq.n	8004292 <HAL_RCC_GetSysClockFreq+0x3a>
 800428a:	e09b      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800428c:	4b53      	ldr	r3, [pc, #332]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x184>)
 800428e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004290:	e09b      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004292:	4b53      	ldr	r3, [pc, #332]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004294:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004296:	e098      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004298:	4b4f      	ldr	r3, [pc, #316]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042a2:	4b4d      	ldr	r3, [pc, #308]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d028      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ae:	4b4a      	ldr	r3, [pc, #296]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	099b      	lsrs	r3, r3, #6
 80042b4:	2200      	movs	r2, #0
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042c0:	2100      	movs	r1, #0
 80042c2:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80042c4:	fb03 f201 	mul.w	r2, r3, r1
 80042c8:	2300      	movs	r3, #0
 80042ca:	fb00 f303 	mul.w	r3, r0, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	4a43      	ldr	r2, [pc, #268]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80042d2:	fba0 1202 	umull	r1, r2, r0, r2
 80042d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042d8:	460a      	mov	r2, r1
 80042da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80042dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042de:	4413      	add	r3, r2
 80042e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e4:	2200      	movs	r2, #0
 80042e6:	61bb      	str	r3, [r7, #24]
 80042e8:	61fa      	str	r2, [r7, #28]
 80042ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80042f2:	f7fb ff71 	bl	80001d8 <__aeabi_uldivmod>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4613      	mov	r3, r2
 80042fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042fe:	e053      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004300:	4b35      	ldr	r3, [pc, #212]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	099b      	lsrs	r3, r3, #6
 8004306:	2200      	movs	r2, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	617a      	str	r2, [r7, #20]
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004312:	f04f 0b00 	mov.w	fp, #0
 8004316:	4652      	mov	r2, sl
 8004318:	465b      	mov	r3, fp
 800431a:	f04f 0000 	mov.w	r0, #0
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	0159      	lsls	r1, r3, #5
 8004324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004328:	0150      	lsls	r0, r2, #5
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	ebb2 080a 	subs.w	r8, r2, sl
 8004332:	eb63 090b 	sbc.w	r9, r3, fp
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004342:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004346:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800434a:	ebb2 0408 	subs.w	r4, r2, r8
 800434e:	eb63 0509 	sbc.w	r5, r3, r9
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	00eb      	lsls	r3, r5, #3
 800435c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004360:	00e2      	lsls	r2, r4, #3
 8004362:	4614      	mov	r4, r2
 8004364:	461d      	mov	r5, r3
 8004366:	eb14 030a 	adds.w	r3, r4, sl
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	eb45 030b 	adc.w	r3, r5, fp
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800437e:	4629      	mov	r1, r5
 8004380:	028b      	lsls	r3, r1, #10
 8004382:	4621      	mov	r1, r4
 8004384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004388:	4621      	mov	r1, r4
 800438a:	028a      	lsls	r2, r1, #10
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	2200      	movs	r2, #0
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	60fa      	str	r2, [r7, #12]
 8004398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800439c:	f7fb ff1c 	bl	80001d8 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4613      	mov	r3, r2
 80043a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043a8:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	0c1b      	lsrs	r3, r3, #16
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	3301      	adds	r3, #1
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80043b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043c2:	e002      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c4:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <HAL_RCC_GetSysClockFreq+0x184>)
 80043c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3740      	adds	r7, #64	@ 0x40
 80043d0:	46bd      	mov	sp, r7
 80043d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800
 80043dc:	00f42400 	.word	0x00f42400
 80043e0:	017d7840 	.word	0x017d7840

080043e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e8:	4b03      	ldr	r3, [pc, #12]	@ (80043f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000000 	.word	0x20000000

080043fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004400:	f7ff fff0 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0a9b      	lsrs	r3, r3, #10
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4903      	ldr	r1, [pc, #12]	@ (8004420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	0800a59c 	.word	0x0800a59c

08004424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004428:	f7ff ffdc 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0b5b      	lsrs	r3, r3, #13
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4903      	ldr	r1, [pc, #12]	@ (8004448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	0800a59c 	.word	0x0800a59c

0800444c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e07b      	b.n	8004556 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	d108      	bne.n	8004478 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800446e:	d009      	beq.n	8004484 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	61da      	str	r2, [r3, #28]
 8004476:	e005      	b.n	8004484 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd f83a 	bl	8001518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004508:	ea42 0103 	orr.w	r1, r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	f003 0104 	and.w	r1, r3, #4
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	f003 0210 	and.w	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004544:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b088      	sub	sp, #32
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	603b      	str	r3, [r7, #0]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800456e:	f7fd f9e1 	bl	8001934 <HAL_GetTick>
 8004572:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d001      	beq.n	8004588 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004584:	2302      	movs	r3, #2
 8004586:	e12a      	b.n	80047de <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_SPI_Transmit+0x36>
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e122      	b.n	80047de <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_SPI_Transmit+0x48>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e11b      	b.n	80047de <HAL_SPI_Transmit+0x280>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2203      	movs	r2, #3
 80045b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	88fa      	ldrh	r2, [r7, #6]
 80045c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	88fa      	ldrh	r2, [r7, #6]
 80045cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f4:	d10f      	bne.n	8004616 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004604:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004614:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004620:	2b40      	cmp	r3, #64	@ 0x40
 8004622:	d007      	beq.n	8004634 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004632:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800463c:	d152      	bne.n	80046e4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_SPI_Transmit+0xee>
 8004646:	8b7b      	ldrh	r3, [r7, #26]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d145      	bne.n	80046d8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	881a      	ldrh	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	1c9a      	adds	r2, r3, #2
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004670:	e032      	b.n	80046d8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b02      	cmp	r3, #2
 800467e:	d112      	bne.n	80046a6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	881a      	ldrh	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	1c9a      	adds	r2, r3, #2
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046a4:	e018      	b.n	80046d8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a6:	f7fd f945 	bl	8001934 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d803      	bhi.n	80046be <HAL_SPI_Transmit+0x160>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d102      	bne.n	80046c4 <HAL_SPI_Transmit+0x166>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e082      	b.n	80047de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1c7      	bne.n	8004672 <HAL_SPI_Transmit+0x114>
 80046e2:	e053      	b.n	800478c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_Transmit+0x194>
 80046ec:	8b7b      	ldrh	r3, [r7, #26]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d147      	bne.n	8004782 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004718:	e033      	b.n	8004782 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d113      	bne.n	8004750 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	7812      	ldrb	r2, [r2, #0]
 8004734:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800474e:	e018      	b.n	8004782 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004750:	f7fd f8f0 	bl	8001934 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d803      	bhi.n	8004768 <HAL_SPI_Transmit+0x20a>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d102      	bne.n	800476e <HAL_SPI_Transmit+0x210>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e02d      	b.n	80047de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1c6      	bne.n	800471a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 fbe7 	bl	8004f64 <SPI_EndRxTxTransaction>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80047dc:	2300      	movs	r3, #0
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b088      	sub	sp, #32
 80047ea:	af02      	add	r7, sp, #8
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	4613      	mov	r3, r2
 80047f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d001      	beq.n	8004806 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004802:	2302      	movs	r3, #2
 8004804:	e104      	b.n	8004a10 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800480e:	d112      	bne.n	8004836 <HAL_SPI_Receive+0x50>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10e      	bne.n	8004836 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2204      	movs	r2, #4
 800481c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	4613      	mov	r3, r2
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f8f3 	bl	8004a18 <HAL_SPI_TransmitReceive>
 8004832:	4603      	mov	r3, r0
 8004834:	e0ec      	b.n	8004a10 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004836:	f7fd f87d 	bl	8001934 <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_SPI_Receive+0x62>
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0e1      	b.n	8004a10 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_SPI_Receive+0x74>
 8004856:	2302      	movs	r3, #2
 8004858:	e0da      	b.n	8004a10 <HAL_SPI_Receive+0x22a>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2204      	movs	r2, #4
 8004866:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	88fa      	ldrh	r2, [r7, #6]
 800487a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a8:	d10f      	bne.n	80048ca <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80048c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d4:	2b40      	cmp	r3, #64	@ 0x40
 80048d6:	d007      	beq.n	80048e8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d170      	bne.n	80049d2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048f0:	e035      	b.n	800495e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d115      	bne.n	800492c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f103 020c 	add.w	r2, r3, #12
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	7812      	ldrb	r2, [r2, #0]
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800492a:	e018      	b.n	800495e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800492c:	f7fd f802 	bl	8001934 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d803      	bhi.n	8004944 <HAL_SPI_Receive+0x15e>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d102      	bne.n	800494a <HAL_SPI_Receive+0x164>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e058      	b.n	8004a10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1c4      	bne.n	80048f2 <HAL_SPI_Receive+0x10c>
 8004968:	e038      	b.n	80049dc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b01      	cmp	r3, #1
 8004976:	d113      	bne.n	80049a0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004982:	b292      	uxth	r2, r2
 8004984:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498a:	1c9a      	adds	r2, r3, #2
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800499e:	e018      	b.n	80049d2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049a0:	f7fc ffc8 	bl	8001934 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d803      	bhi.n	80049b8 <HAL_SPI_Receive+0x1d2>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d102      	bne.n	80049be <HAL_SPI_Receive+0x1d8>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e01e      	b.n	8004a10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1c6      	bne.n	800496a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	6839      	ldr	r1, [r7, #0]
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fa59 	bl	8004e98 <SPI_EndRxTransaction>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
  }
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	@ 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a26:	2301      	movs	r3, #1
 8004a28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a2a:	f7fc ff83 	bl	8001934 <HAL_GetTick>
 8004a2e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a36:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004a3e:	887b      	ldrh	r3, [r7, #2]
 8004a40:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a42:	7ffb      	ldrb	r3, [r7, #31]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d00c      	beq.n	8004a62 <HAL_SPI_TransmitReceive+0x4a>
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a4e:	d106      	bne.n	8004a5e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <HAL_SPI_TransmitReceive+0x46>
 8004a58:	7ffb      	ldrb	r3, [r7, #31]
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d001      	beq.n	8004a62 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e17f      	b.n	8004d62 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x5c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x5c>
 8004a6e:	887b      	ldrh	r3, [r7, #2]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e174      	b.n	8004d62 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0x6e>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e16d      	b.n	8004d62 <HAL_SPI_TransmitReceive+0x34a>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d003      	beq.n	8004aa2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	887a      	ldrh	r2, [r7, #2]
 8004ab8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	887a      	ldrh	r2, [r7, #2]
 8004ac4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	887a      	ldrh	r2, [r7, #2]
 8004aca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae2:	2b40      	cmp	r3, #64	@ 0x40
 8004ae4:	d007      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004afe:	d17e      	bne.n	8004bfe <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_SPI_TransmitReceive+0xf6>
 8004b08:	8afb      	ldrh	r3, [r7, #22]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d16c      	bne.n	8004be8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b12:	881a      	ldrh	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1e:	1c9a      	adds	r2, r3, #2
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b32:	e059      	b.n	8004be8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d11b      	bne.n	8004b7a <HAL_SPI_TransmitReceive+0x162>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d016      	beq.n	8004b7a <HAL_SPI_TransmitReceive+0x162>
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d113      	bne.n	8004b7a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	1c9a      	adds	r2, r3, #2
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d119      	bne.n	8004bbc <HAL_SPI_TransmitReceive+0x1a4>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d014      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	1c9a      	adds	r2, r3, #2
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bbc:	f7fc feba 	bl	8001934 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d80d      	bhi.n	8004be8 <HAL_SPI_TransmitReceive+0x1d0>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d009      	beq.n	8004be8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0bc      	b.n	8004d62 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1a0      	bne.n	8004b34 <HAL_SPI_TransmitReceive+0x11c>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d19b      	bne.n	8004b34 <HAL_SPI_TransmitReceive+0x11c>
 8004bfc:	e082      	b.n	8004d04 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_SPI_TransmitReceive+0x1f4>
 8004c06:	8afb      	ldrh	r3, [r7, #22]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d171      	bne.n	8004cf0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	7812      	ldrb	r2, [r2, #0]
 8004c18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c32:	e05d      	b.n	8004cf0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d11c      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x264>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d017      	beq.n	8004c7c <HAL_SPI_TransmitReceive+0x264>
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d114      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d119      	bne.n	8004cbe <HAL_SPI_TransmitReceive+0x2a6>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d014      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cbe:	f7fc fe39 	bl	8001934 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d803      	bhi.n	8004cd6 <HAL_SPI_TransmitReceive+0x2be>
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d102      	bne.n	8004cdc <HAL_SPI_TransmitReceive+0x2c4>
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e038      	b.n	8004d62 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d19c      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x21c>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d197      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d04:	6a3a      	ldr	r2, [r7, #32]
 8004d06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f92b 	bl	8004f64 <SPI_EndRxTxTransaction>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e01d      	b.n	8004d62 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004d60:	2300      	movs	r3, #0
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3728      	adds	r7, #40	@ 0x28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d78:	b2db      	uxtb	r3, r3
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d98:	f7fc fdcc 	bl	8001934 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	4413      	add	r3, r2
 8004da6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004da8:	f7fc fdc4 	bl	8001934 <HAL_GetTick>
 8004dac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dae:	4b39      	ldr	r3, [pc, #228]	@ (8004e94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	015b      	lsls	r3, r3, #5
 8004db4:	0d1b      	lsrs	r3, r3, #20
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	fb02 f303 	mul.w	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dbe:	e054      	b.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d050      	beq.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dc8:	f7fc fdb4 	bl	8001934 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d902      	bls.n	8004dde <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d13d      	bne.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004df6:	d111      	bne.n	8004e1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e00:	d004      	beq.n	8004e0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0a:	d107      	bne.n	8004e1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e24:	d10f      	bne.n	8004e46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e017      	b.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4013      	ands	r3, r2
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	bf0c      	ite	eq
 8004e7a:	2301      	moveq	r3, #1
 8004e7c:	2300      	movne	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d19b      	bne.n	8004dc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000000 	.word	0x20000000

08004e98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eac:	d111      	bne.n	8004ed2 <SPI_EndRxTransaction+0x3a>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb6:	d004      	beq.n	8004ec2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ec0:	d107      	bne.n	8004ed2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ed0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eda:	d12a      	bne.n	8004f32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee4:	d012      	beq.n	8004f0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2200      	movs	r2, #0
 8004eee:	2180      	movs	r1, #128	@ 0x80
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f7ff ff49 	bl	8004d88 <SPI_WaitFlagStateUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d02d      	beq.n	8004f58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f00:	f043 0220 	orr.w	r2, r3, #32
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e026      	b.n	8004f5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2200      	movs	r2, #0
 8004f14:	2101      	movs	r1, #1
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7ff ff36 	bl	8004d88 <SPI_WaitFlagStateUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d01a      	beq.n	8004f58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f26:	f043 0220 	orr.w	r2, r3, #32
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e013      	b.n	8004f5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7ff ff23 	bl	8004d88 <SPI_WaitFlagStateUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e000      	b.n	8004f5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2201      	movs	r2, #1
 8004f78:	2102      	movs	r1, #2
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff ff04 	bl	8004d88 <SPI_WaitFlagStateUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e032      	b.n	8004ffc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f96:	4b1b      	ldr	r3, [pc, #108]	@ (8005004 <SPI_EndRxTxTransaction+0xa0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005008 <SPI_EndRxTxTransaction+0xa4>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	0d5b      	lsrs	r3, r3, #21
 8004fa2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fb4:	d112      	bne.n	8004fdc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2180      	movs	r1, #128	@ 0x80
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7ff fee1 	bl	8004d88 <SPI_WaitFlagStateUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d016      	beq.n	8004ffa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd0:	f043 0220 	orr.w	r2, r3, #32
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e00f      	b.n	8004ffc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff2:	2b80      	cmp	r3, #128	@ 0x80
 8004ff4:	d0f2      	beq.n	8004fdc <SPI_EndRxTxTransaction+0x78>
 8004ff6:	e000      	b.n	8004ffa <SPI_EndRxTxTransaction+0x96>
        break;
 8004ff8:	bf00      	nop
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000000 	.word	0x20000000
 8005008:	165e9f81 	.word	0x165e9f81

0800500c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e042      	b.n	80050a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fc fb6a 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2224      	movs	r2, #36	@ 0x24
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800504e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 ff85 	bl	8005f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695a      	ldr	r2, [r3, #20]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	@ 0x28
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	4613      	mov	r3, r2
 80050ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d175      	bne.n	80051b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_UART_Transmit+0x2c>
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e06e      	b.n	80051ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2221      	movs	r2, #33	@ 0x21
 80050e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ea:	f7fc fc23 	bl	8001934 <HAL_GetTick>
 80050ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	88fa      	ldrh	r2, [r7, #6]
 80050fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005104:	d108      	bne.n	8005118 <HAL_UART_Transmit+0x6c>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d104      	bne.n	8005118 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	e003      	b.n	8005120 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800511c:	2300      	movs	r3, #0
 800511e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005120:	e02e      	b.n	8005180 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2200      	movs	r2, #0
 800512a:	2180      	movs	r1, #128	@ 0x80
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fc5d 	bl	80059ec <UART_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e03a      	b.n	80051ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10b      	bne.n	8005162 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005158:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	3302      	adds	r3, #2
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	e007      	b.n	8005172 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	3301      	adds	r3, #1
 8005170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1cb      	bne.n	8005122 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2200      	movs	r2, #0
 8005192:	2140      	movs	r1, #64	@ 0x40
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 fc29 	bl	80059ec <UART_WaitOnFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e006      	b.n	80051ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e000      	b.n	80051ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051b8:	2302      	movs	r3, #2
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b08c      	sub	sp, #48	@ 0x30
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	4613      	mov	r3, r2
 80051ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d14a      	bne.n	8005272 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e043      	b.n	8005274 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	461a      	mov	r2, r3
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 fc4e 	bl	8005aa0 <UART_Start_Receive_DMA>
 8005204:	4603      	mov	r3, r0
 8005206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800520a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800520e:	2b00      	cmp	r3, #0
 8005210:	d12c      	bne.n	800526c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005216:	2b01      	cmp	r3, #1
 8005218:	d125      	bne.n	8005266 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	617b      	str	r3, [r7, #20]
   return(result);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f043 0310 	orr.w	r3, r3, #16
 8005246:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005250:	627a      	str	r2, [r7, #36]	@ 0x24
 8005252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6a39      	ldr	r1, [r7, #32]
 8005256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	61fb      	str	r3, [r7, #28]
   return(result);
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e5      	bne.n	8005230 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005264:	e002      	b.n	800526c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800526c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005270:	e000      	b.n	8005274 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005272:	2302      	movs	r3, #2
  }
}
 8005274:	4618      	mov	r0, r3
 8005276:	3730      	adds	r7, #48	@ 0x30
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b0ba      	sub	sp, #232	@ 0xe8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80052ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10f      	bne.n	80052e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d009      	beq.n	80052e2 <HAL_UART_IRQHandler+0x66>
 80052ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fd81 	bl	8005de2 <UART_Receive_IT>
      return;
 80052e0:	e25b      	b.n	800579a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 80de 	beq.w	80054a8 <HAL_UART_IRQHandler+0x22c>
 80052ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 80d1 	beq.w	80054a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <HAL_UART_IRQHandler+0xae>
 8005312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	f043 0201 	orr.w	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800532a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00b      	beq.n	800534e <HAL_UART_IRQHandler+0xd2>
 8005336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005346:	f043 0202 	orr.w	r2, r3, #2
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800534e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00b      	beq.n	8005372 <HAL_UART_IRQHandler+0xf6>
 800535a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d005      	beq.n	8005372 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	f043 0204 	orr.w	r2, r3, #4
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d011      	beq.n	80053a2 <HAL_UART_IRQHandler+0x126>
 800537e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	d105      	bne.n	8005396 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800538a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539a:	f043 0208 	orr.w	r2, r3, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 81f2 	beq.w	8005790 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_UART_IRQHandler+0x14e>
 80053b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fd0c 	bl	8005de2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d4:	2b40      	cmp	r3, #64	@ 0x40
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <HAL_UART_IRQHandler+0x17a>
 80053ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d04f      	beq.n	8005496 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fc14 	bl	8005c24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005406:	2b40      	cmp	r3, #64	@ 0x40
 8005408:	d141      	bne.n	800548e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3314      	adds	r3, #20
 8005410:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005420:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005424:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3314      	adds	r3, #20
 8005432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005436:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800543a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800544e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1d9      	bne.n	800540a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d013      	beq.n	8005486 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005462:	4a7e      	ldr	r2, [pc, #504]	@ (800565c <HAL_UART_IRQHandler+0x3e0>)
 8005464:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546a:	4618      	mov	r0, r3
 800546c:	f7fc fd1a 	bl	8001ea4 <HAL_DMA_Abort_IT>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d016      	beq.n	80054a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005480:	4610      	mov	r0, r2
 8005482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005484:	e00e      	b.n	80054a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f9a8 	bl	80057dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548c:	e00a      	b.n	80054a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f9a4 	bl	80057dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	e006      	b.n	80054a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9a0 	bl	80057dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054a2:	e175      	b.n	8005790 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	bf00      	nop
    return;
 80054a6:	e173      	b.n	8005790 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	f040 814f 	bne.w	8005750 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 8148 	beq.w	8005750 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8141 	beq.w	8005750 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054ce:	2300      	movs	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ee:	2b40      	cmp	r3, #64	@ 0x40
 80054f0:	f040 80b6 	bne.w	8005660 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005500:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 8145 	beq.w	8005794 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800550e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005512:	429a      	cmp	r2, r3
 8005514:	f080 813e 	bcs.w	8005794 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800551e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800552a:	f000 8088 	beq.w	800563e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005544:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800554c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800555a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800555e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005566:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005572:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1d9      	bne.n	800552e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800558a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800559e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e1      	bne.n	800557a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3314      	adds	r3, #20
 80055bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3314      	adds	r3, #20
 80055d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e3      	bne.n	80055b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800560c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800560e:	f023 0310 	bic.w	r3, r3, #16
 8005612:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005620:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005622:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005626:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800562e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e3      	bne.n	80055fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005638:	4618      	mov	r0, r3
 800563a:	f7fc fbc3 	bl	8001dc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800564c:	b29b      	uxth	r3, r3
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	b29b      	uxth	r3, r3
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7fb ff11 	bl	800147c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800565a:	e09b      	b.n	8005794 <HAL_UART_IRQHandler+0x518>
 800565c:	08005ceb 	.word	0x08005ceb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005668:	b29b      	uxth	r3, r3
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 808e 	beq.w	8005798 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800567c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8089 	beq.w	8005798 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800569c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80056aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80056ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e3      	bne.n	8005686 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3314      	adds	r3, #20
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	623b      	str	r3, [r7, #32]
   return(result);
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3314      	adds	r3, #20
 80056de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80056e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e3      	bne.n	80056be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	60fb      	str	r3, [r7, #12]
   return(result);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0310 	bic.w	r3, r3, #16
 800571a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005728:	61fa      	str	r2, [r7, #28]
 800572a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	69b9      	ldr	r1, [r7, #24]
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	617b      	str	r3, [r7, #20]
   return(result);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e3      	bne.n	8005704 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005742:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7fb fe97 	bl	800147c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800574e:	e023      	b.n	8005798 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005758:	2b00      	cmp	r3, #0
 800575a:	d009      	beq.n	8005770 <HAL_UART_IRQHandler+0x4f4>
 800575c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fad2 	bl	8005d12 <UART_Transmit_IT>
    return;
 800576e:	e014      	b.n	800579a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00e      	beq.n	800579a <HAL_UART_IRQHandler+0x51e>
 800577c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d008      	beq.n	800579a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fb12 	bl	8005db2 <UART_EndTransmit_IT>
    return;
 800578e:	e004      	b.n	800579a <HAL_UART_IRQHandler+0x51e>
    return;
 8005790:	bf00      	nop
 8005792:	e002      	b.n	800579a <HAL_UART_IRQHandler+0x51e>
      return;
 8005794:	bf00      	nop
 8005796:	e000      	b.n	800579a <HAL_UART_IRQHandler+0x51e>
      return;
 8005798:	bf00      	nop
  }
}
 800579a:	37e8      	adds	r7, #232	@ 0xe8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b09c      	sub	sp, #112	@ 0x70
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d172      	bne.n	80058f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800580c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800580e:	2200      	movs	r2, #0
 8005810:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800582a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005832:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005834:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	667b      	str	r3, [r7, #100]	@ 0x64
 800585e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005866:	647a      	str	r2, [r7, #68]	@ 0x44
 8005868:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800586c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e5      	bne.n	8005846 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800587a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3314      	adds	r3, #20
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	623b      	str	r3, [r7, #32]
   return(result);
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005890:	663b      	str	r3, [r7, #96]	@ 0x60
 8005892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3314      	adds	r3, #20
 8005898:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800589a:	633a      	str	r2, [r7, #48]	@ 0x30
 800589c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e5      	bne.n	800587a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d119      	bne.n	80058f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80058de:	61fa      	str	r2, [r7, #28]
 80058e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	69b9      	ldr	r1, [r7, #24]
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	617b      	str	r3, [r7, #20]
   return(result);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e5      	bne.n	80058be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058f4:	2200      	movs	r2, #0
 80058f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d106      	bne.n	800590e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005902:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005904:	4619      	mov	r1, r3
 8005906:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005908:	f7fb fdb8 	bl	800147c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800590c:	e002      	b.n	8005914 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800590e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005910:	f7ff ff50 	bl	80057b4 <HAL_UART_RxCpltCallback>
}
 8005914:	bf00      	nop
 8005916:	3770      	adds	r7, #112	@ 0x70
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005928:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005934:	2b01      	cmp	r3, #1
 8005936:	d108      	bne.n	800594a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	b29b      	uxth	r3, r3
 8005940:	4619      	mov	r1, r3
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7fb fd9a 	bl	800147c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005948:	e002      	b.n	8005950 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7ff ff3c 	bl	80057c8 <HAL_UART_RxHalfCpltCallback>
}
 8005950:	bf00      	nop
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005968:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005974:	2b80      	cmp	r3, #128	@ 0x80
 8005976:	bf0c      	ite	eq
 8005978:	2301      	moveq	r3, #1
 800597a:	2300      	movne	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b21      	cmp	r3, #33	@ 0x21
 800598a:	d108      	bne.n	800599e <UART_DMAError+0x46>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005998:	68b8      	ldr	r0, [r7, #8]
 800599a:	f000 f91b 	bl	8005bd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a8:	2b40      	cmp	r3, #64	@ 0x40
 80059aa:	bf0c      	ite	eq
 80059ac:	2301      	moveq	r3, #1
 80059ae:	2300      	movne	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b22      	cmp	r3, #34	@ 0x22
 80059be:	d108      	bne.n	80059d2 <UART_DMAError+0x7a>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d005      	beq.n	80059d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2200      	movs	r2, #0
 80059ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80059cc:	68b8      	ldr	r0, [r7, #8]
 80059ce:	f000 f929 	bl	8005c24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d6:	f043 0210 	orr.w	r2, r3, #16
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059de:	68b8      	ldr	r0, [r7, #8]
 80059e0:	f7ff fefc 	bl	80057dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059e4:	bf00      	nop
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	4613      	mov	r3, r2
 80059fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fc:	e03b      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a04:	d037      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a06:	f7fb ff95 	bl	8001934 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	6a3a      	ldr	r2, [r7, #32]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d302      	bcc.n	8005a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e03a      	b.n	8005a96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d023      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b80      	cmp	r3, #128	@ 0x80
 8005a32:	d020      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b40      	cmp	r3, #64	@ 0x40
 8005a38:	d01d      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d116      	bne.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f8e0 	bl	8005c24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2208      	movs	r2, #8
 8005a68:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e00f      	b.n	8005a96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	bf0c      	ite	eq
 8005a86:	2301      	moveq	r3, #1
 8005a88:	2300      	movne	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d0b4      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b098      	sub	sp, #96	@ 0x60
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2222      	movs	r2, #34	@ 0x22
 8005ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005acc:	4a3e      	ldr	r2, [pc, #248]	@ (8005bc8 <UART_Start_Receive_DMA+0x128>)
 8005ace:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad4:	4a3d      	ldr	r2, [pc, #244]	@ (8005bcc <UART_Start_Receive_DMA+0x12c>)
 8005ad6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005adc:	4a3c      	ldr	r2, [pc, #240]	@ (8005bd0 <UART_Start_Receive_DMA+0x130>)
 8005ade:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ae8:	f107 0308 	add.w	r3, r7, #8
 8005aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4619      	mov	r1, r3
 8005afa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	f7fc f908 	bl	8001d14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b04:	2300      	movs	r3, #0
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d019      	beq.n	8005b56 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	330c      	adds	r3, #12
 8005b28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	330c      	adds	r3, #12
 8005b40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b42:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005b44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005b48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e5      	bne.n	8005b22 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3314      	adds	r3, #20
 8005b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3314      	adds	r3, #20
 8005b74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b76:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005b78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005b7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e5      	bne.n	8005b56 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	617b      	str	r3, [r7, #20]
   return(result);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3314      	adds	r3, #20
 8005ba8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005baa:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6a39      	ldr	r1, [r7, #32]
 8005bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e5      	bne.n	8005b8a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3760      	adds	r7, #96	@ 0x60
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	080057f1 	.word	0x080057f1
 8005bcc:	0800591d 	.word	0x0800591d
 8005bd0:	08005959 	.word	0x08005959

08005bd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b089      	sub	sp, #36	@ 0x24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	61ba      	str	r2, [r7, #24]
 8005bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6979      	ldr	r1, [r7, #20]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e5      	bne.n	8005bdc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005c18:	bf00      	nop
 8005c1a:	3724      	adds	r7, #36	@ 0x24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b095      	sub	sp, #84	@ 0x54
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3314      	adds	r3, #20
 8005c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3314      	adds	r3, #20
 8005c7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e5      	bne.n	8005c60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d119      	bne.n	8005cd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f023 0310 	bic.w	r3, r3, #16
 8005cb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cbc:	61ba      	str	r2, [r7, #24]
 8005cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6979      	ldr	r1, [r7, #20]
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e5      	bne.n	8005c9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005cde:	bf00      	nop
 8005ce0:	3754      	adds	r7, #84	@ 0x54
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f7ff fd69 	bl	80057dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b21      	cmp	r3, #33	@ 0x21
 8005d24:	d13e      	bne.n	8005da4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d2e:	d114      	bne.n	8005d5a <UART_Transmit_IT+0x48>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d110      	bne.n	8005d5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	1c9a      	adds	r2, r3, #2
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	621a      	str	r2, [r3, #32]
 8005d58:	e008      	b.n	8005d6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6211      	str	r1, [r2, #32]
 8005d64:	781a      	ldrb	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10f      	bne.n	8005da0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e000      	b.n	8005da6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff fce4 	bl	80057a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b08c      	sub	sp, #48	@ 0x30
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b22      	cmp	r3, #34	@ 0x22
 8005df4:	f040 80ae 	bne.w	8005f54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e00:	d117      	bne.n	8005e32 <UART_Receive_IT+0x50>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d113      	bne.n	8005e32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e12:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2a:	1c9a      	adds	r2, r3, #2
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e30:	e026      	b.n	8005e80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e44:	d007      	beq.n	8005e56 <UART_Receive_IT+0x74>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <UART_Receive_IT+0x82>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	e008      	b.n	8005e76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d15d      	bne.n	8005f50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0220 	bic.w	r2, r2, #32
 8005ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695a      	ldr	r2, [r3, #20]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d135      	bne.n	8005f46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 0310 	bic.w	r3, r3, #16
 8005ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	330c      	adds	r3, #12
 8005efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f00:	623a      	str	r2, [r7, #32]
 8005f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	69f9      	ldr	r1, [r7, #28]
 8005f06:	6a3a      	ldr	r2, [r7, #32]
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e5      	bne.n	8005ee0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d10a      	bne.n	8005f38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb fa9c 	bl	800147c <HAL_UARTEx_RxEventCallback>
 8005f44:	e002      	b.n	8005f4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff fc34 	bl	80057b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e002      	b.n	8005f56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e000      	b.n	8005f56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f54:	2302      	movs	r3, #2
  }
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3730      	adds	r7, #48	@ 0x30
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f64:	b0c0      	sub	sp, #256	@ 0x100
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7c:	68d9      	ldr	r1, [r3, #12]
 8005f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	ea40 0301 	orr.w	r3, r0, r1
 8005f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fb8:	f021 010c 	bic.w	r1, r1, #12
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fda:	6999      	ldr	r1, [r3, #24]
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	ea40 0301 	orr.w	r3, r0, r1
 8005fe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4b8f      	ldr	r3, [pc, #572]	@ (800622c <UART_SetConfig+0x2cc>)
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d005      	beq.n	8006000 <UART_SetConfig+0xa0>
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b8d      	ldr	r3, [pc, #564]	@ (8006230 <UART_SetConfig+0x2d0>)
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d104      	bne.n	800600a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006000:	f7fe fa10 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 8006004:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006008:	e003      	b.n	8006012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800600a:	f7fe f9f7 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 800600e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800601c:	f040 810c 	bne.w	8006238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006024:	2200      	movs	r2, #0
 8006026:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800602a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800602e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006032:	4622      	mov	r2, r4
 8006034:	462b      	mov	r3, r5
 8006036:	1891      	adds	r1, r2, r2
 8006038:	65b9      	str	r1, [r7, #88]	@ 0x58
 800603a:	415b      	adcs	r3, r3
 800603c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800603e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006042:	4621      	mov	r1, r4
 8006044:	eb12 0801 	adds.w	r8, r2, r1
 8006048:	4629      	mov	r1, r5
 800604a:	eb43 0901 	adc.w	r9, r3, r1
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800605a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800605e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006062:	4690      	mov	r8, r2
 8006064:	4699      	mov	r9, r3
 8006066:	4623      	mov	r3, r4
 8006068:	eb18 0303 	adds.w	r3, r8, r3
 800606c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006070:	462b      	mov	r3, r5
 8006072:	eb49 0303 	adc.w	r3, r9, r3
 8006076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006086:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800608a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800608e:	460b      	mov	r3, r1
 8006090:	18db      	adds	r3, r3, r3
 8006092:	653b      	str	r3, [r7, #80]	@ 0x50
 8006094:	4613      	mov	r3, r2
 8006096:	eb42 0303 	adc.w	r3, r2, r3
 800609a:	657b      	str	r3, [r7, #84]	@ 0x54
 800609c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060a4:	f7fa f898 	bl	80001d8 <__aeabi_uldivmod>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4b61      	ldr	r3, [pc, #388]	@ (8006234 <UART_SetConfig+0x2d4>)
 80060ae:	fba3 2302 	umull	r2, r3, r3, r2
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	011c      	lsls	r4, r3, #4
 80060b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060c8:	4642      	mov	r2, r8
 80060ca:	464b      	mov	r3, r9
 80060cc:	1891      	adds	r1, r2, r2
 80060ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060d0:	415b      	adcs	r3, r3
 80060d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060d8:	4641      	mov	r1, r8
 80060da:	eb12 0a01 	adds.w	sl, r2, r1
 80060de:	4649      	mov	r1, r9
 80060e0:	eb43 0b01 	adc.w	fp, r3, r1
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060f8:	4692      	mov	sl, r2
 80060fa:	469b      	mov	fp, r3
 80060fc:	4643      	mov	r3, r8
 80060fe:	eb1a 0303 	adds.w	r3, sl, r3
 8006102:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006106:	464b      	mov	r3, r9
 8006108:	eb4b 0303 	adc.w	r3, fp, r3
 800610c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800611c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006124:	460b      	mov	r3, r1
 8006126:	18db      	adds	r3, r3, r3
 8006128:	643b      	str	r3, [r7, #64]	@ 0x40
 800612a:	4613      	mov	r3, r2
 800612c:	eb42 0303 	adc.w	r3, r2, r3
 8006130:	647b      	str	r3, [r7, #68]	@ 0x44
 8006132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800613a:	f7fa f84d 	bl	80001d8 <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4611      	mov	r1, r2
 8006144:	4b3b      	ldr	r3, [pc, #236]	@ (8006234 <UART_SetConfig+0x2d4>)
 8006146:	fba3 2301 	umull	r2, r3, r3, r1
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2264      	movs	r2, #100	@ 0x64
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	1acb      	subs	r3, r1, r3
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800615a:	4b36      	ldr	r3, [pc, #216]	@ (8006234 <UART_SetConfig+0x2d4>)
 800615c:	fba3 2302 	umull	r2, r3, r3, r2
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006168:	441c      	add	r4, r3
 800616a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616e:	2200      	movs	r2, #0
 8006170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006174:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800617c:	4642      	mov	r2, r8
 800617e:	464b      	mov	r3, r9
 8006180:	1891      	adds	r1, r2, r2
 8006182:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006184:	415b      	adcs	r3, r3
 8006186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800618c:	4641      	mov	r1, r8
 800618e:	1851      	adds	r1, r2, r1
 8006190:	6339      	str	r1, [r7, #48]	@ 0x30
 8006192:	4649      	mov	r1, r9
 8006194:	414b      	adcs	r3, r1
 8006196:	637b      	str	r3, [r7, #52]	@ 0x34
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061a4:	4659      	mov	r1, fp
 80061a6:	00cb      	lsls	r3, r1, #3
 80061a8:	4651      	mov	r1, sl
 80061aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ae:	4651      	mov	r1, sl
 80061b0:	00ca      	lsls	r2, r1, #3
 80061b2:	4610      	mov	r0, r2
 80061b4:	4619      	mov	r1, r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	4642      	mov	r2, r8
 80061ba:	189b      	adds	r3, r3, r2
 80061bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061c0:	464b      	mov	r3, r9
 80061c2:	460a      	mov	r2, r1
 80061c4:	eb42 0303 	adc.w	r3, r2, r3
 80061c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061e0:	460b      	mov	r3, r1
 80061e2:	18db      	adds	r3, r3, r3
 80061e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061e6:	4613      	mov	r3, r2
 80061e8:	eb42 0303 	adc.w	r3, r2, r3
 80061ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80061f6:	f7f9 ffef 	bl	80001d8 <__aeabi_uldivmod>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006234 <UART_SetConfig+0x2d4>)
 8006200:	fba3 1302 	umull	r1, r3, r3, r2
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	2164      	movs	r1, #100	@ 0x64
 8006208:	fb01 f303 	mul.w	r3, r1, r3
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	3332      	adds	r3, #50	@ 0x32
 8006212:	4a08      	ldr	r2, [pc, #32]	@ (8006234 <UART_SetConfig+0x2d4>)
 8006214:	fba2 2303 	umull	r2, r3, r2, r3
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	f003 0207 	and.w	r2, r3, #7
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4422      	add	r2, r4
 8006226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006228:	e106      	b.n	8006438 <UART_SetConfig+0x4d8>
 800622a:	bf00      	nop
 800622c:	40011000 	.word	0x40011000
 8006230:	40011400 	.word	0x40011400
 8006234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800623c:	2200      	movs	r2, #0
 800623e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006242:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800624a:	4642      	mov	r2, r8
 800624c:	464b      	mov	r3, r9
 800624e:	1891      	adds	r1, r2, r2
 8006250:	6239      	str	r1, [r7, #32]
 8006252:	415b      	adcs	r3, r3
 8006254:	627b      	str	r3, [r7, #36]	@ 0x24
 8006256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800625a:	4641      	mov	r1, r8
 800625c:	1854      	adds	r4, r2, r1
 800625e:	4649      	mov	r1, r9
 8006260:	eb43 0501 	adc.w	r5, r3, r1
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	00eb      	lsls	r3, r5, #3
 800626e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006272:	00e2      	lsls	r2, r4, #3
 8006274:	4614      	mov	r4, r2
 8006276:	461d      	mov	r5, r3
 8006278:	4643      	mov	r3, r8
 800627a:	18e3      	adds	r3, r4, r3
 800627c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006280:	464b      	mov	r3, r9
 8006282:	eb45 0303 	adc.w	r3, r5, r3
 8006286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800628a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006296:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062a6:	4629      	mov	r1, r5
 80062a8:	008b      	lsls	r3, r1, #2
 80062aa:	4621      	mov	r1, r4
 80062ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062b0:	4621      	mov	r1, r4
 80062b2:	008a      	lsls	r2, r1, #2
 80062b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062b8:	f7f9 ff8e 	bl	80001d8 <__aeabi_uldivmod>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4b60      	ldr	r3, [pc, #384]	@ (8006444 <UART_SetConfig+0x4e4>)
 80062c2:	fba3 2302 	umull	r2, r3, r3, r2
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	011c      	lsls	r4, r3, #4
 80062ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062dc:	4642      	mov	r2, r8
 80062de:	464b      	mov	r3, r9
 80062e0:	1891      	adds	r1, r2, r2
 80062e2:	61b9      	str	r1, [r7, #24]
 80062e4:	415b      	adcs	r3, r3
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062ec:	4641      	mov	r1, r8
 80062ee:	1851      	adds	r1, r2, r1
 80062f0:	6139      	str	r1, [r7, #16]
 80062f2:	4649      	mov	r1, r9
 80062f4:	414b      	adcs	r3, r1
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006304:	4659      	mov	r1, fp
 8006306:	00cb      	lsls	r3, r1, #3
 8006308:	4651      	mov	r1, sl
 800630a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800630e:	4651      	mov	r1, sl
 8006310:	00ca      	lsls	r2, r1, #3
 8006312:	4610      	mov	r0, r2
 8006314:	4619      	mov	r1, r3
 8006316:	4603      	mov	r3, r0
 8006318:	4642      	mov	r2, r8
 800631a:	189b      	adds	r3, r3, r2
 800631c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006320:	464b      	mov	r3, r9
 8006322:	460a      	mov	r2, r1
 8006324:	eb42 0303 	adc.w	r3, r2, r3
 8006328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006336:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006344:	4649      	mov	r1, r9
 8006346:	008b      	lsls	r3, r1, #2
 8006348:	4641      	mov	r1, r8
 800634a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800634e:	4641      	mov	r1, r8
 8006350:	008a      	lsls	r2, r1, #2
 8006352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006356:	f7f9 ff3f 	bl	80001d8 <__aeabi_uldivmod>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4611      	mov	r1, r2
 8006360:	4b38      	ldr	r3, [pc, #224]	@ (8006444 <UART_SetConfig+0x4e4>)
 8006362:	fba3 2301 	umull	r2, r3, r3, r1
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	2264      	movs	r2, #100	@ 0x64
 800636a:	fb02 f303 	mul.w	r3, r2, r3
 800636e:	1acb      	subs	r3, r1, r3
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	3332      	adds	r3, #50	@ 0x32
 8006374:	4a33      	ldr	r2, [pc, #204]	@ (8006444 <UART_SetConfig+0x4e4>)
 8006376:	fba2 2303 	umull	r2, r3, r2, r3
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006380:	441c      	add	r4, r3
 8006382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006386:	2200      	movs	r2, #0
 8006388:	673b      	str	r3, [r7, #112]	@ 0x70
 800638a:	677a      	str	r2, [r7, #116]	@ 0x74
 800638c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006390:	4642      	mov	r2, r8
 8006392:	464b      	mov	r3, r9
 8006394:	1891      	adds	r1, r2, r2
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	415b      	adcs	r3, r3
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063a0:	4641      	mov	r1, r8
 80063a2:	1851      	adds	r1, r2, r1
 80063a4:	6039      	str	r1, [r7, #0]
 80063a6:	4649      	mov	r1, r9
 80063a8:	414b      	adcs	r3, r1
 80063aa:	607b      	str	r3, [r7, #4]
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063b8:	4659      	mov	r1, fp
 80063ba:	00cb      	lsls	r3, r1, #3
 80063bc:	4651      	mov	r1, sl
 80063be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063c2:	4651      	mov	r1, sl
 80063c4:	00ca      	lsls	r2, r1, #3
 80063c6:	4610      	mov	r0, r2
 80063c8:	4619      	mov	r1, r3
 80063ca:	4603      	mov	r3, r0
 80063cc:	4642      	mov	r2, r8
 80063ce:	189b      	adds	r3, r3, r2
 80063d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063d2:	464b      	mov	r3, r9
 80063d4:	460a      	mov	r2, r1
 80063d6:	eb42 0303 	adc.w	r3, r2, r3
 80063da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80063e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80063f4:	4649      	mov	r1, r9
 80063f6:	008b      	lsls	r3, r1, #2
 80063f8:	4641      	mov	r1, r8
 80063fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063fe:	4641      	mov	r1, r8
 8006400:	008a      	lsls	r2, r1, #2
 8006402:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006406:	f7f9 fee7 	bl	80001d8 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <UART_SetConfig+0x4e4>)
 8006410:	fba3 1302 	umull	r1, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	2164      	movs	r1, #100	@ 0x64
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	3332      	adds	r3, #50	@ 0x32
 8006422:	4a08      	ldr	r2, [pc, #32]	@ (8006444 <UART_SetConfig+0x4e4>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	f003 020f 	and.w	r2, r3, #15
 800642e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4422      	add	r2, r4
 8006436:	609a      	str	r2, [r3, #8]
}
 8006438:	bf00      	nop
 800643a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800643e:	46bd      	mov	sp, r7
 8006440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006444:	51eb851f 	.word	0x51eb851f

08006448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006448:	b084      	sub	sp, #16
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	f107 001c 	add.w	r0, r7, #28
 8006456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800645a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800645e:	2b01      	cmp	r3, #1
 8006460:	d123      	bne.n	80064aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006466:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800648a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800648e:	2b01      	cmp	r3, #1
 8006490:	d105      	bne.n	800649e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fae8 	bl	8007a74 <USB_CoreReset>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]
 80064a8:	e01b      	b.n	80064e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 fadc 	bl	8007a74 <USB_CoreReset>
 80064bc:	4603      	mov	r3, r0
 80064be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80064d4:	e005      	b.n	80064e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064e2:	7fbb      	ldrb	r3, [r7, #30]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d10b      	bne.n	8006500 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f043 0206 	orr.w	r2, r3, #6
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f043 0220 	orr.w	r2, r3, #32
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800650c:	b004      	add	sp, #16
 800650e:	4770      	bx	lr

08006510 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d165      	bne.n	80065f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4a41      	ldr	r2, [pc, #260]	@ (800662c <USB_SetTurnaroundTime+0x11c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d906      	bls.n	800653a <USB_SetTurnaroundTime+0x2a>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4a40      	ldr	r2, [pc, #256]	@ (8006630 <USB_SetTurnaroundTime+0x120>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d202      	bcs.n	800653a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006534:	230f      	movs	r3, #15
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e062      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4a3c      	ldr	r2, [pc, #240]	@ (8006630 <USB_SetTurnaroundTime+0x120>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d306      	bcc.n	8006550 <USB_SetTurnaroundTime+0x40>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4a3b      	ldr	r2, [pc, #236]	@ (8006634 <USB_SetTurnaroundTime+0x124>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d202      	bcs.n	8006550 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800654a:	230e      	movs	r3, #14
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e057      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4a38      	ldr	r2, [pc, #224]	@ (8006634 <USB_SetTurnaroundTime+0x124>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d306      	bcc.n	8006566 <USB_SetTurnaroundTime+0x56>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4a37      	ldr	r2, [pc, #220]	@ (8006638 <USB_SetTurnaroundTime+0x128>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d202      	bcs.n	8006566 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006560:	230d      	movs	r3, #13
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	e04c      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4a33      	ldr	r2, [pc, #204]	@ (8006638 <USB_SetTurnaroundTime+0x128>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d306      	bcc.n	800657c <USB_SetTurnaroundTime+0x6c>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4a32      	ldr	r2, [pc, #200]	@ (800663c <USB_SetTurnaroundTime+0x12c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d802      	bhi.n	800657c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006576:	230c      	movs	r3, #12
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e041      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4a2f      	ldr	r2, [pc, #188]	@ (800663c <USB_SetTurnaroundTime+0x12c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d906      	bls.n	8006592 <USB_SetTurnaroundTime+0x82>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4a2e      	ldr	r2, [pc, #184]	@ (8006640 <USB_SetTurnaroundTime+0x130>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d802      	bhi.n	8006592 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800658c:	230b      	movs	r3, #11
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	e036      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4a2a      	ldr	r2, [pc, #168]	@ (8006640 <USB_SetTurnaroundTime+0x130>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d906      	bls.n	80065a8 <USB_SetTurnaroundTime+0x98>
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4a29      	ldr	r2, [pc, #164]	@ (8006644 <USB_SetTurnaroundTime+0x134>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d802      	bhi.n	80065a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065a2:	230a      	movs	r3, #10
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	e02b      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4a26      	ldr	r2, [pc, #152]	@ (8006644 <USB_SetTurnaroundTime+0x134>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d906      	bls.n	80065be <USB_SetTurnaroundTime+0xae>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4a25      	ldr	r2, [pc, #148]	@ (8006648 <USB_SetTurnaroundTime+0x138>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d202      	bcs.n	80065be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065b8:	2309      	movs	r3, #9
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e020      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	4a21      	ldr	r2, [pc, #132]	@ (8006648 <USB_SetTurnaroundTime+0x138>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d306      	bcc.n	80065d4 <USB_SetTurnaroundTime+0xc4>
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	4a20      	ldr	r2, [pc, #128]	@ (800664c <USB_SetTurnaroundTime+0x13c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d802      	bhi.n	80065d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065ce:	2308      	movs	r3, #8
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e015      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4a1d      	ldr	r2, [pc, #116]	@ (800664c <USB_SetTurnaroundTime+0x13c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d906      	bls.n	80065ea <USB_SetTurnaroundTime+0xda>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4a1c      	ldr	r2, [pc, #112]	@ (8006650 <USB_SetTurnaroundTime+0x140>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d202      	bcs.n	80065ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065e4:	2307      	movs	r3, #7
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e00a      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065ea:	2306      	movs	r3, #6
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e007      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065f6:	2309      	movs	r3, #9
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e001      	b.n	8006600 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065fc:	2309      	movs	r3, #9
 80065fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006618:	431a      	orrs	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	00d8acbf 	.word	0x00d8acbf
 8006630:	00e4e1c0 	.word	0x00e4e1c0
 8006634:	00f42400 	.word	0x00f42400
 8006638:	01067380 	.word	0x01067380
 800663c:	011a499f 	.word	0x011a499f
 8006640:	01312cff 	.word	0x01312cff
 8006644:	014ca43f 	.word	0x014ca43f
 8006648:	016e3600 	.word	0x016e3600
 800664c:	01a6ab1f 	.word	0x01a6ab1f
 8006650:	01e84800 	.word	0x01e84800

08006654 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f043 0201 	orr.w	r2, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d115      	bne.n	80066e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066c6:	200a      	movs	r0, #10
 80066c8:	f7fb f940 	bl	800194c <HAL_Delay>
      ms += 10U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	330a      	adds	r3, #10
 80066d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 f93f 	bl	8007956 <USB_GetMode>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d01e      	beq.n	800671c <USB_SetCurrentMode+0x84>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80066e2:	d9f0      	bls.n	80066c6 <USB_SetCurrentMode+0x2e>
 80066e4:	e01a      	b.n	800671c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d115      	bne.n	8006718 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066f8:	200a      	movs	r0, #10
 80066fa:	f7fb f927 	bl	800194c <HAL_Delay>
      ms += 10U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	330a      	adds	r3, #10
 8006702:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 f926 	bl	8007956 <USB_GetMode>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d005      	beq.n	800671c <USB_SetCurrentMode+0x84>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2bc7      	cmp	r3, #199	@ 0xc7
 8006714:	d9f0      	bls.n	80066f8 <USB_SetCurrentMode+0x60>
 8006716:	e001      	b.n	800671c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e005      	b.n	8006728 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006720:	d101      	bne.n	8006726 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006730:	b084      	sub	sp, #16
 8006732:	b580      	push	{r7, lr}
 8006734:	b086      	sub	sp, #24
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800673e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800674a:	2300      	movs	r3, #0
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	e009      	b.n	8006764 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	3340      	adds	r3, #64	@ 0x40
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	2200      	movs	r2, #0
 800675c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3301      	adds	r3, #1
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b0e      	cmp	r3, #14
 8006768:	d9f2      	bls.n	8006750 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800676a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800676e:	2b00      	cmp	r3, #0
 8006770:	d11c      	bne.n	80067ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006780:	f043 0302 	orr.w	r3, r3, #2
 8006784:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80067aa:	e00b      	b.n	80067c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067ca:	461a      	mov	r2, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10d      	bne.n	80067f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067e0:	2100      	movs	r1, #0
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f968 	bl	8006ab8 <USB_SetDevSpeed>
 80067e8:	e008      	b.n	80067fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067ea:	2101      	movs	r1, #1
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f963 	bl	8006ab8 <USB_SetDevSpeed>
 80067f2:	e003      	b.n	80067fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067f4:	2103      	movs	r1, #3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f95e 	bl	8006ab8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067fc:	2110      	movs	r1, #16
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f8fa 	bl	80069f8 <USB_FlushTxFifo>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f924 	bl	8006a5c <USB_FlushRxFifo>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006824:	461a      	mov	r2, r3
 8006826:	2300      	movs	r3, #0
 8006828:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006830:	461a      	mov	r2, r3
 8006832:	2300      	movs	r3, #0
 8006834:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683c:	461a      	mov	r2, r3
 800683e:	2300      	movs	r3, #0
 8006840:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	e043      	b.n	80068d0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800685a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800685e:	d118      	bne.n	8006892 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006872:	461a      	mov	r2, r3
 8006874:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e013      	b.n	80068a4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006888:	461a      	mov	r2, r3
 800688a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	e008      	b.n	80068a4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689e:	461a      	mov	r2, r3
 80068a0:	2300      	movs	r3, #0
 80068a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b0:	461a      	mov	r2, r3
 80068b2:	2300      	movs	r3, #0
 80068b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c2:	461a      	mov	r2, r3
 80068c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	3301      	adds	r3, #1
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068d4:	461a      	mov	r2, r3
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	4293      	cmp	r3, r2
 80068da:	d3b5      	bcc.n	8006848 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	e043      	b.n	800696a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068f8:	d118      	bne.n	800692c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690c:	461a      	mov	r2, r3
 800690e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	e013      	b.n	800693e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006922:	461a      	mov	r2, r3
 8006924:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e008      	b.n	800693e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006938:	461a      	mov	r2, r3
 800693a:	2300      	movs	r3, #0
 800693c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800694a:	461a      	mov	r2, r3
 800694c:	2300      	movs	r3, #0
 800694e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695c:	461a      	mov	r2, r3
 800695e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006962:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	3301      	adds	r3, #1
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800696e:	461a      	mov	r2, r3
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	4293      	cmp	r3, r2
 8006974:	d3b5      	bcc.n	80068e2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006988:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006996:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006998:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800699c:	2b00      	cmp	r3, #0
 800699e:	d105      	bne.n	80069ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f043 0210 	orr.w	r2, r3, #16
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699a      	ldr	r2, [r3, #24]
 80069b0:	4b10      	ldr	r3, [pc, #64]	@ (80069f4 <USB_DevInit+0x2c4>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	f043 0208 	orr.w	r2, r3, #8
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d107      	bne.n	80069e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069dc:	f043 0304 	orr.w	r3, r3, #4
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069f0:	b004      	add	sp, #16
 80069f2:	4770      	bx	lr
 80069f4:	803c3800 	.word	0x803c3800

080069f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a12:	d901      	bls.n	8006a18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e01b      	b.n	8006a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	daf2      	bge.n	8006a06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	019b      	lsls	r3, r3, #6
 8006a28:	f043 0220 	orr.w	r2, r3, #32
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3301      	adds	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a3c:	d901      	bls.n	8006a42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e006      	b.n	8006a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d0f0      	beq.n	8006a30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a74:	d901      	bls.n	8006a7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e018      	b.n	8006aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	daf2      	bge.n	8006a68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2210      	movs	r2, #16
 8006a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a98:	d901      	bls.n	8006a9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e006      	b.n	8006aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b10      	cmp	r3, #16
 8006aa8:	d0f0      	beq.n	8006a8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	68f9      	ldr	r1, [r7, #12]
 8006ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 0306 	and.w	r3, r3, #6
 8006b02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d102      	bne.n	8006b10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	75fb      	strb	r3, [r7, #23]
 8006b0e:	e00a      	b.n	8006b26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d002      	beq.n	8006b1c <USB_GetDevSpeed+0x32>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b06      	cmp	r3, #6
 8006b1a:	d102      	bne.n	8006b22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	75fb      	strb	r3, [r7, #23]
 8006b20:	e001      	b.n	8006b26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b22:	230f      	movs	r3, #15
 8006b24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d13a      	bne.n	8006bc6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	2101      	movs	r1, #1
 8006b62:	fa01 f303 	lsl.w	r3, r1, r3
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	68f9      	ldr	r1, [r7, #12]
 8006b6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d155      	bne.n	8006c34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	791b      	ldrb	r3, [r3, #4]
 8006ba2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ba4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	059b      	lsls	r3, r3, #22
 8006baa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bac:	4313      	orrs	r3, r2
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	0151      	lsls	r1, r2, #5
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	e036      	b.n	8006c34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bdc:	041b      	lsls	r3, r3, #16
 8006bde:	68f9      	ldr	r1, [r7, #12]
 8006be0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006be4:	4313      	orrs	r3, r2
 8006be6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d11a      	bne.n	8006c34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	791b      	ldrb	r3, [r3, #4]
 8006c18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d161      	bne.n	8006d24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c76:	d11f      	bne.n	8006cb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	2101      	movs	r1, #1
 8006cca:	fa01 f303 	lsl.w	r3, r1, r3
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	68f9      	ldr	r1, [r7, #12]
 8006cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cd8:	4013      	ands	r3, r2
 8006cda:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ce2:	69da      	ldr	r2, [r3, #28]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	f003 030f 	and.w	r3, r3, #15
 8006cec:	2101      	movs	r1, #1
 8006cee:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	43db      	mvns	r3, r3
 8006cf6:	68f9      	ldr	r1, [r7, #12]
 8006cf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	0159      	lsls	r1, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	440b      	add	r3, r1
 8006d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4b35      	ldr	r3, [pc, #212]	@ (8006df4 <USB_DeactivateEndpoint+0x1b0>)
 8006d1e:	4013      	ands	r3, r2
 8006d20:	600b      	str	r3, [r1, #0]
 8006d22:	e060      	b.n	8006de6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d3a:	d11f      	bne.n	8006d7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	f003 030f 	and.w	r3, r3, #15
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d92:	041b      	lsls	r3, r3, #16
 8006d94:	43db      	mvns	r3, r3
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da6:	69da      	ldr	r2, [r3, #28]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	2101      	movs	r1, #1
 8006db2:	fa01 f303 	lsl.w	r3, r1, r3
 8006db6:	041b      	lsls	r3, r3, #16
 8006db8:	43db      	mvns	r3, r3
 8006dba:	68f9      	ldr	r1, [r7, #12]
 8006dbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	0159      	lsls	r1, r3, #5
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	440b      	add	r3, r1
 8006dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dde:	4619      	mov	r1, r3
 8006de0:	4b05      	ldr	r3, [pc, #20]	@ (8006df8 <USB_DeactivateEndpoint+0x1b4>)
 8006de2:	4013      	ands	r3, r2
 8006de4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	ec337800 	.word	0xec337800
 8006df8:	eff37800 	.word	0xeff37800

08006dfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08a      	sub	sp, #40	@ 0x28
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	f040 817f 	bne.w	800711c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d132      	bne.n	8006e8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e40:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e44:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	0151      	lsls	r1, r2, #5
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	440a      	add	r2, r1
 8006e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e84:	0cdb      	lsrs	r3, r3, #19
 8006e86:	04db      	lsls	r3, r3, #19
 8006e88:	6113      	str	r3, [r2, #16]
 8006e8a:	e097      	b.n	8006fbc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ea6:	0cdb      	lsrs	r3, r3, #19
 8006ea8:	04db      	lsls	r3, r3, #19
 8006eaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ec6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006eca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ece:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11a      	bne.n	8006f0c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	691a      	ldr	r2, [r3, #16]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d903      	bls.n	8006eea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f08:	6113      	str	r3, [r2, #16]
 8006f0a:	e044      	b.n	8006f96 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	4413      	add	r3, r2
 8006f16:	1e5a      	subs	r2, r3, #1
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f20:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	8afb      	ldrh	r3, [r7, #22]
 8006f32:	04d9      	lsls	r1, r3, #19
 8006f34:	4ba4      	ldr	r3, [pc, #656]	@ (80071c8 <USB_EPStartXfer+0x3cc>)
 8006f36:	400b      	ands	r3, r1
 8006f38:	69b9      	ldr	r1, [r7, #24]
 8006f3a:	0148      	lsls	r0, r1, #5
 8006f3c:	69f9      	ldr	r1, [r7, #28]
 8006f3e:	4401      	add	r1, r0
 8006f40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f44:	4313      	orrs	r3, r2
 8006f46:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	791b      	ldrb	r3, [r3, #4]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d122      	bne.n	8006f96 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	0151      	lsls	r1, r2, #5
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	440a      	add	r2, r1
 8006f66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f6a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006f6e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	8afb      	ldrh	r3, [r7, #22]
 8006f80:	075b      	lsls	r3, r3, #29
 8006f82:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006f86:	69b9      	ldr	r1, [r7, #24]
 8006f88:	0148      	lsls	r0, r1, #5
 8006f8a:	69f9      	ldr	r1, [r7, #28]
 8006f8c:	4401      	add	r1, r0
 8006f8e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f92:	4313      	orrs	r3, r2
 8006f94:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fac:	69b9      	ldr	r1, [r7, #24]
 8006fae:	0148      	lsls	r0, r1, #5
 8006fb0:	69f9      	ldr	r1, [r7, #28]
 8006fb2:	4401      	add	r1, r0
 8006fb4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d14b      	bne.n	800705a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d009      	beq.n	8006fde <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	791b      	ldrb	r3, [r3, #4]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d128      	bne.n	8007038 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d110      	bne.n	8007018 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	0151      	lsls	r1, r2, #5
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	440a      	add	r2, r1
 800700c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007010:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	e00f      	b.n	8007038 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007036:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	440a      	add	r2, r1
 800704e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007052:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	e166      	b.n	8007328 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	440a      	add	r2, r1
 8007070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007074:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007078:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	791b      	ldrb	r3, [r3, #4]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d015      	beq.n	80070ae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 814e 	beq.w	8007328 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	2101      	movs	r1, #1
 800709e:	fa01 f303 	lsl.w	r3, r1, r3
 80070a2:	69f9      	ldr	r1, [r7, #28]
 80070a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070a8:	4313      	orrs	r3, r2
 80070aa:	634b      	str	r3, [r1, #52]	@ 0x34
 80070ac:	e13c      	b.n	8007328 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d110      	bne.n	80070e0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	0151      	lsls	r1, r2, #5
 80070d0:	69fa      	ldr	r2, [r7, #28]
 80070d2:	440a      	add	r2, r1
 80070d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	e00f      	b.n	8007100 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070fe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	68d9      	ldr	r1, [r3, #12]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	781a      	ldrb	r2, [r3, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	b298      	uxth	r0, r3
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4603      	mov	r3, r0
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 f9b9 	bl	800748c <USB_WritePacket>
 800711a:	e105      	b.n	8007328 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	0151      	lsls	r1, r2, #5
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	440a      	add	r2, r1
 8007132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007136:	0cdb      	lsrs	r3, r3, #19
 8007138:	04db      	lsls	r3, r3, #19
 800713a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	0151      	lsls	r1, r2, #5
 800714e:	69fa      	ldr	r2, [r7, #28]
 8007150:	440a      	add	r2, r1
 8007152:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007156:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800715a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800715e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d132      	bne.n	80071cc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007194:	69b9      	ldr	r1, [r7, #24]
 8007196:	0148      	lsls	r0, r1, #5
 8007198:	69f9      	ldr	r1, [r7, #28]
 800719a:	4401      	add	r1, r0
 800719c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071a0:	4313      	orrs	r3, r2
 80071a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071c2:	6113      	str	r3, [r2, #16]
 80071c4:	e062      	b.n	800728c <USB_EPStartXfer+0x490>
 80071c6:	bf00      	nop
 80071c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d123      	bne.n	800721c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ea:	69b9      	ldr	r1, [r7, #24]
 80071ec:	0148      	lsls	r0, r1, #5
 80071ee:	69f9      	ldr	r1, [r7, #28]
 80071f0:	4401      	add	r1, r0
 80071f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071f6:	4313      	orrs	r3, r2
 80071f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	0151      	lsls	r1, r2, #5
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	440a      	add	r2, r1
 8007210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007214:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007218:	6113      	str	r3, [r2, #16]
 800721a:	e037      	b.n	800728c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	691a      	ldr	r2, [r3, #16]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	4413      	add	r3, r2
 8007226:	1e5a      	subs	r2, r3, #1
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007230:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	8afa      	ldrh	r2, [r7, #22]
 8007238:	fb03 f202 	mul.w	r2, r3, r2
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800724c:	691a      	ldr	r2, [r3, #16]
 800724e:	8afb      	ldrh	r3, [r7, #22]
 8007250:	04d9      	lsls	r1, r3, #19
 8007252:	4b38      	ldr	r3, [pc, #224]	@ (8007334 <USB_EPStartXfer+0x538>)
 8007254:	400b      	ands	r3, r1
 8007256:	69b9      	ldr	r1, [r7, #24]
 8007258:	0148      	lsls	r0, r1, #5
 800725a:	69f9      	ldr	r1, [r7, #28]
 800725c:	4401      	add	r1, r0
 800725e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007262:	4313      	orrs	r3, r2
 8007264:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800727c:	69b9      	ldr	r1, [r7, #24]
 800727e:	0148      	lsls	r0, r1, #5
 8007280:	69f9      	ldr	r1, [r7, #28]
 8007282:	4401      	add	r1, r0
 8007284:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007288:	4313      	orrs	r3, r2
 800728a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d10d      	bne.n	80072ae <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	68d9      	ldr	r1, [r3, #12]
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072aa:	460a      	mov	r2, r1
 80072ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	791b      	ldrb	r3, [r3, #4]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d128      	bne.n	8007308 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d110      	bne.n	80072e8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	e00f      	b.n	8007308 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	0151      	lsls	r1, r2, #5
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	440a      	add	r2, r1
 80072fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007306:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	0151      	lsls	r1, r2, #5
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	440a      	add	r2, r1
 800731e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007322:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007326:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3720      	adds	r7, #32
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	1ff80000 	.word	0x1ff80000

08007338 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	785b      	ldrb	r3, [r3, #1]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d14a      	bne.n	80073ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800736a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800736e:	f040 8086 	bne.w	800747e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	7812      	ldrb	r2, [r2, #0]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	440a      	add	r2, r1
 800738c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007390:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007394:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	0151      	lsls	r1, r2, #5
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	440a      	add	r2, r1
 80073b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3301      	adds	r3, #1
 80073be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d902      	bls.n	80073d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	75fb      	strb	r3, [r7, #23]
          break;
 80073ce:	e056      	b.n	800747e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073e8:	d0e7      	beq.n	80073ba <USB_EPStopXfer+0x82>
 80073ea:	e048      	b.n	800747e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007404:	d13b      	bne.n	800747e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	7812      	ldrb	r2, [r2, #0]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007424:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007428:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	440a      	add	r2, r1
 8007444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007448:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800744c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3301      	adds	r3, #1
 8007452:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f242 7210 	movw	r2, #10000	@ 0x2710
 800745a:	4293      	cmp	r3, r2
 800745c:	d902      	bls.n	8007464 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
          break;
 8007462:	e00c      	b.n	800747e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800747c:	d0e7      	beq.n	800744e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007480:	4618      	mov	r0, r3
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800748c:	b480      	push	{r7}
 800748e:	b089      	sub	sp, #36	@ 0x24
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	4611      	mov	r1, r2
 8007498:	461a      	mov	r2, r3
 800749a:	460b      	mov	r3, r1
 800749c:	71fb      	strb	r3, [r7, #7]
 800749e:	4613      	mov	r3, r2
 80074a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d123      	bne.n	80074fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074b2:	88bb      	ldrh	r3, [r7, #4]
 80074b4:	3303      	adds	r3, #3
 80074b6:	089b      	lsrs	r3, r3, #2
 80074b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074ba:	2300      	movs	r3, #0
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	e018      	b.n	80074f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	031a      	lsls	r2, r3, #12
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074cc:	461a      	mov	r2, r3
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	3301      	adds	r3, #1
 80074d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	3301      	adds	r3, #1
 80074de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	3301      	adds	r3, #1
 80074e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	3301      	adds	r3, #1
 80074ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	3301      	adds	r3, #1
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d3e2      	bcc.n	80074c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3724      	adds	r7, #36	@ 0x24
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007508:	b480      	push	{r7}
 800750a:	b08b      	sub	sp, #44	@ 0x2c
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800751e:	88fb      	ldrh	r3, [r7, #6]
 8007520:	089b      	lsrs	r3, r3, #2
 8007522:	b29b      	uxth	r3, r3
 8007524:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	f003 0303 	and.w	r3, r3, #3
 800752c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800752e:	2300      	movs	r3, #0
 8007530:	623b      	str	r3, [r7, #32]
 8007532:	e014      	b.n	800755e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	3301      	adds	r3, #1
 8007544:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	3301      	adds	r3, #1
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	3301      	adds	r3, #1
 8007550:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	3301      	adds	r3, #1
 8007556:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	3301      	adds	r3, #1
 800755c:	623b      	str	r3, [r7, #32]
 800755e:	6a3a      	ldr	r2, [r7, #32]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	429a      	cmp	r2, r3
 8007564:	d3e6      	bcc.n	8007534 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007566:	8bfb      	ldrh	r3, [r7, #30]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01e      	beq.n	80075aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007576:	461a      	mov	r2, r3
 8007578:	f107 0310 	add.w	r3, r7, #16
 800757c:	6812      	ldr	r2, [r2, #0]
 800757e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	b2da      	uxtb	r2, r3
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	701a      	strb	r2, [r3, #0]
      i++;
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	3301      	adds	r3, #1
 8007596:	623b      	str	r3, [r7, #32]
      pDest++;
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	3301      	adds	r3, #1
 800759c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800759e:	8bfb      	ldrh	r3, [r7, #30]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075a4:	8bfb      	ldrh	r3, [r7, #30]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1ea      	bne.n	8007580 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	372c      	adds	r7, #44	@ 0x2c
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	785b      	ldrb	r3, [r3, #1]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d12c      	bne.n	800762e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	db12      	blt.n	800760c <USB_EPSetStall+0x54>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00f      	beq.n	800760c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	440a      	add	r2, r1
 8007602:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007606:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800760a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	0151      	lsls	r1, r2, #5
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	440a      	add	r2, r1
 8007622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007626:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	e02b      	b.n	8007686 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	db12      	blt.n	8007666 <USB_EPSetStall+0xae>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00f      	beq.n	8007666 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	0151      	lsls	r1, r2, #5
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	440a      	add	r2, r1
 800765c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007660:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007664:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	0151      	lsls	r1, r2, #5
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	440a      	add	r2, r1
 800767c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007680:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007684:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d128      	bne.n	8007702 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	0151      	lsls	r1, r2, #5
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	440a      	add	r2, r1
 80076c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	791b      	ldrb	r3, [r3, #4]
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d003      	beq.n	80076e0 <USB_EPClearStall+0x4c>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	791b      	ldrb	r3, [r3, #4]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d138      	bne.n	8007752 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	e027      	b.n	8007752 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	440a      	add	r2, r1
 8007718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800771c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007720:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	791b      	ldrb	r3, [r3, #4]
 8007726:	2b03      	cmp	r3, #3
 8007728:	d003      	beq.n	8007732 <USB_EPClearStall+0x9e>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	791b      	ldrb	r3, [r3, #4]
 800772e:	2b02      	cmp	r3, #2
 8007730:	d10f      	bne.n	8007752 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	440a      	add	r2, r1
 8007748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800774c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007750:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800777e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007782:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007794:	68f9      	ldr	r1, [r7, #12]
 8007796:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800779a:	4313      	orrs	r3, r2
 800779c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077c6:	f023 0303 	bic.w	r3, r3, #3
 80077ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077da:	f023 0302 	bic.w	r3, r3, #2
 80077de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b085      	sub	sp, #20
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007808:	f023 0303 	bic.w	r3, r3, #3
 800780c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800781c:	f043 0302 	orr.w	r3, r3, #2
 8007820:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4013      	ands	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007848:	68fb      	ldr	r3, [r7, #12]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	4013      	ands	r3, r2
 8007878:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	0c1b      	lsrs	r3, r3, #16
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	4013      	ands	r3, r2
 80078ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	b29b      	uxth	r3, r3
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078be:	b480      	push	{r7}
 80078c0:	b085      	sub	sp, #20
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	460b      	mov	r3, r1
 80078c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	4013      	ands	r3, r2
 80078ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078ec:	68bb      	ldr	r3, [r7, #8]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b087      	sub	sp, #28
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800791a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800791c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	f003 030f 	and.w	r3, r3, #15
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	fa22 f303 	lsr.w	r3, r2, r3
 800792a:	01db      	lsls	r3, r3, #7
 800792c:	b2db      	uxtb	r3, r3
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	4313      	orrs	r3, r2
 8007932:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4013      	ands	r3, r2
 8007946:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007948:	68bb      	ldr	r3, [r7, #8]
}
 800794a:	4618      	mov	r0, r3
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	f003 0301 	and.w	r3, r3, #1
}
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007972:	b480      	push	{r7}
 8007974:	b085      	sub	sp, #20
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800798c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007990:	f023 0307 	bic.w	r3, r3, #7
 8007994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	460b      	mov	r3, r1
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	333c      	adds	r3, #60	@ 0x3c
 80079ce:	3304      	adds	r3, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4a26      	ldr	r2, [pc, #152]	@ (8007a70 <USB_EP0_OutStart+0xb8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d90a      	bls.n	80079f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079ec:	d101      	bne.n	80079f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e037      	b.n	8007a62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f8:	461a      	mov	r2, r3
 80079fa:	2300      	movs	r3, #0
 80079fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a20:	f043 0318 	orr.w	r3, r3, #24
 8007a24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a34:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007a38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d10f      	bne.n	8007a60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a46:	461a      	mov	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a5a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	4f54300a 	.word	0x4f54300a

08007a74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3301      	adds	r3, #1
 8007a84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a8c:	d901      	bls.n	8007a92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e01b      	b.n	8007aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	daf2      	bge.n	8007a80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f043 0201 	orr.w	r2, r3, #1
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ab6:	d901      	bls.n	8007abc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e006      	b.n	8007aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d0f0      	beq.n	8007aaa <USB_CoreReset+0x36>

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
	...

08007ad8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ae4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007ae8:	f002 fca2 	bl	800a430 <USBD_static_malloc>
 8007aec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	32b0      	adds	r2, #176	@ 0xb0
 8007afe:	2100      	movs	r1, #0
 8007b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b04:	2302      	movs	r3, #2
 8007b06:	e0d4      	b.n	8007cb2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b08:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f002 fcd2 	bl	800a4b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	32b0      	adds	r2, #176	@ 0xb0
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	32b0      	adds	r2, #176	@ 0xb0
 8007b2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	7c1b      	ldrb	r3, [r3, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d138      	bne.n	8007bb2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b40:	4b5e      	ldr	r3, [pc, #376]	@ (8007cbc <USBD_CDC_Init+0x1e4>)
 8007b42:	7819      	ldrb	r1, [r3, #0]
 8007b44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b48:	2202      	movs	r2, #2
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f002 fb4d 	bl	800a1ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b50:	4b5a      	ldr	r3, [pc, #360]	@ (8007cbc <USBD_CDC_Init+0x1e4>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 020f 	and.w	r2, r3, #15
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	3324      	adds	r3, #36	@ 0x24
 8007b66:	2201      	movs	r2, #1
 8007b68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b6a:	4b55      	ldr	r3, [pc, #340]	@ (8007cc0 <USBD_CDC_Init+0x1e8>)
 8007b6c:	7819      	ldrb	r1, [r3, #0]
 8007b6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b72:	2202      	movs	r2, #2
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f002 fb38 	bl	800a1ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b7a:	4b51      	ldr	r3, [pc, #324]	@ (8007cc0 <USBD_CDC_Init+0x1e8>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	f003 020f 	and.w	r2, r3, #15
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	440b      	add	r3, r1
 8007b8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b92:	2201      	movs	r2, #1
 8007b94:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b96:	4b4b      	ldr	r3, [pc, #300]	@ (8007cc4 <USBD_CDC_Init+0x1ec>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f003 020f 	and.w	r2, r3, #15
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	3326      	adds	r3, #38	@ 0x26
 8007bac:	2210      	movs	r2, #16
 8007bae:	801a      	strh	r2, [r3, #0]
 8007bb0:	e035      	b.n	8007c1e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bb2:	4b42      	ldr	r3, [pc, #264]	@ (8007cbc <USBD_CDC_Init+0x1e4>)
 8007bb4:	7819      	ldrb	r1, [r3, #0]
 8007bb6:	2340      	movs	r3, #64	@ 0x40
 8007bb8:	2202      	movs	r2, #2
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f002 fb15 	bl	800a1ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8007cbc <USBD_CDC_Init+0x1e4>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	f003 020f 	and.w	r2, r3, #15
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	3324      	adds	r3, #36	@ 0x24
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bda:	4b39      	ldr	r3, [pc, #228]	@ (8007cc0 <USBD_CDC_Init+0x1e8>)
 8007bdc:	7819      	ldrb	r1, [r3, #0]
 8007bde:	2340      	movs	r3, #64	@ 0x40
 8007be0:	2202      	movs	r2, #2
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f002 fb01 	bl	800a1ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007be8:	4b35      	ldr	r3, [pc, #212]	@ (8007cc0 <USBD_CDC_Init+0x1e8>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f003 020f 	and.w	r2, r3, #15
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c00:	2201      	movs	r2, #1
 8007c02:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c04:	4b2f      	ldr	r3, [pc, #188]	@ (8007cc4 <USBD_CDC_Init+0x1ec>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	f003 020f 	and.w	r2, r3, #15
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	3326      	adds	r3, #38	@ 0x26
 8007c1a:	2210      	movs	r2, #16
 8007c1c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c1e:	4b29      	ldr	r3, [pc, #164]	@ (8007cc4 <USBD_CDC_Init+0x1ec>)
 8007c20:	7819      	ldrb	r1, [r3, #0]
 8007c22:	2308      	movs	r3, #8
 8007c24:	2203      	movs	r2, #3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f002 fadf 	bl	800a1ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c2c:	4b25      	ldr	r3, [pc, #148]	@ (8007cc4 <USBD_CDC_Init+0x1ec>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	f003 020f 	and.w	r2, r3, #15
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	3324      	adds	r3, #36	@ 0x24
 8007c42:	2201      	movs	r2, #1
 8007c44:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	33b0      	adds	r3, #176	@ 0xb0
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e018      	b.n	8007cb2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7c1b      	ldrb	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c88:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc0 <USBD_CDC_Init+0x1e8>)
 8007c8a:	7819      	ldrb	r1, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f002 fb96 	bl	800a3c8 <USBD_LL_PrepareReceive>
 8007c9c:	e008      	b.n	8007cb0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c9e:	4b08      	ldr	r3, [pc, #32]	@ (8007cc0 <USBD_CDC_Init+0x1e8>)
 8007ca0:	7819      	ldrb	r1, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ca8:	2340      	movs	r3, #64	@ 0x40
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f002 fb8c 	bl	800a3c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	20000093 	.word	0x20000093
 8007cc0:	20000094 	.word	0x20000094
 8007cc4:	20000095 	.word	0x20000095

08007cc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8007dc0 <USBD_CDC_DeInit+0xf8>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f002 faab 	bl	800a236 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007ce0:	4b37      	ldr	r3, [pc, #220]	@ (8007dc0 <USBD_CDC_DeInit+0xf8>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	f003 020f 	and.w	r2, r3, #15
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	440b      	add	r3, r1
 8007cf4:	3324      	adds	r3, #36	@ 0x24
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007cfa:	4b32      	ldr	r3, [pc, #200]	@ (8007dc4 <USBD_CDC_DeInit+0xfc>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f002 fa98 	bl	800a236 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d06:	4b2f      	ldr	r3, [pc, #188]	@ (8007dc4 <USBD_CDC_DeInit+0xfc>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f003 020f 	and.w	r2, r3, #15
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	4613      	mov	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	440b      	add	r3, r1
 8007d1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d1e:	2200      	movs	r2, #0
 8007d20:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d22:	4b29      	ldr	r3, [pc, #164]	@ (8007dc8 <USBD_CDC_DeInit+0x100>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f002 fa84 	bl	800a236 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d2e:	4b26      	ldr	r3, [pc, #152]	@ (8007dc8 <USBD_CDC_DeInit+0x100>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	f003 020f 	and.w	r2, r3, #15
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	3324      	adds	r3, #36	@ 0x24
 8007d44:	2200      	movs	r2, #0
 8007d46:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d48:	4b1f      	ldr	r3, [pc, #124]	@ (8007dc8 <USBD_CDC_DeInit+0x100>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	f003 020f 	and.w	r2, r3, #15
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	4613      	mov	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	440b      	add	r3, r1
 8007d5c:	3326      	adds	r3, #38	@ 0x26
 8007d5e:	2200      	movs	r2, #0
 8007d60:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	32b0      	adds	r2, #176	@ 0xb0
 8007d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d01f      	beq.n	8007db4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	33b0      	adds	r3, #176	@ 0xb0
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	32b0      	adds	r2, #176	@ 0xb0
 8007d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f002 fb58 	bl	800a44c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	32b0      	adds	r2, #176	@ 0xb0
 8007da6:	2100      	movs	r1, #0
 8007da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000093 	.word	0x20000093
 8007dc4:	20000094 	.word	0x20000094
 8007dc8:	20000095 	.word	0x20000095

08007dcc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	32b0      	adds	r2, #176	@ 0xb0
 8007de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e0bf      	b.n	8007f7c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d050      	beq.n	8007eaa <USBD_CDC_Setup+0xde>
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	f040 80af 	bne.w	8007f6c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	88db      	ldrh	r3, [r3, #6]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d03a      	beq.n	8007e8c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	b25b      	sxtb	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	da1b      	bge.n	8007e58 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	33b0      	adds	r3, #176	@ 0xb0
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e36:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	88d2      	ldrh	r2, [r2, #6]
 8007e3c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	88db      	ldrh	r3, [r3, #6]
 8007e42:	2b07      	cmp	r3, #7
 8007e44:	bf28      	it	cs
 8007e46:	2307      	movcs	r3, #7
 8007e48:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	89fa      	ldrh	r2, [r7, #14]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 fd93 	bl	800997c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e56:	e090      	b.n	8007f7a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	785a      	ldrb	r2, [r3, #1]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	88db      	ldrh	r3, [r3, #6]
 8007e66:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e68:	d803      	bhi.n	8007e72 <USBD_CDC_Setup+0xa6>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	88db      	ldrh	r3, [r3, #6]
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	e000      	b.n	8007e74 <USBD_CDC_Setup+0xa8>
 8007e72:	2240      	movs	r2, #64	@ 0x40
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e7a:	6939      	ldr	r1, [r7, #16]
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007e82:	461a      	mov	r2, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 fda5 	bl	80099d4 <USBD_CtlPrepareRx>
      break;
 8007e8a:	e076      	b.n	8007f7a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	33b0      	adds	r3, #176	@ 0xb0
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	7850      	ldrb	r0, [r2, #1]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	4798      	blx	r3
      break;
 8007ea8:	e067      	b.n	8007f7a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	2b0b      	cmp	r3, #11
 8007eb0:	d851      	bhi.n	8007f56 <USBD_CDC_Setup+0x18a>
 8007eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb8 <USBD_CDC_Setup+0xec>)
 8007eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb8:	08007ee9 	.word	0x08007ee9
 8007ebc:	08007f65 	.word	0x08007f65
 8007ec0:	08007f57 	.word	0x08007f57
 8007ec4:	08007f57 	.word	0x08007f57
 8007ec8:	08007f57 	.word	0x08007f57
 8007ecc:	08007f57 	.word	0x08007f57
 8007ed0:	08007f57 	.word	0x08007f57
 8007ed4:	08007f57 	.word	0x08007f57
 8007ed8:	08007f57 	.word	0x08007f57
 8007edc:	08007f57 	.word	0x08007f57
 8007ee0:	08007f13 	.word	0x08007f13
 8007ee4:	08007f3d 	.word	0x08007f3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d107      	bne.n	8007f04 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ef4:	f107 030a 	add.w	r3, r7, #10
 8007ef8:	2202      	movs	r2, #2
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 fd3d 	bl	800997c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f02:	e032      	b.n	8007f6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 fcbb 	bl	8009882 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	75fb      	strb	r3, [r7, #23]
          break;
 8007f10:	e02b      	b.n	8007f6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d107      	bne.n	8007f2e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f1e:	f107 030d 	add.w	r3, r7, #13
 8007f22:	2201      	movs	r2, #1
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 fd28 	bl	800997c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f2c:	e01d      	b.n	8007f6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 fca6 	bl	8009882 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f36:	2303      	movs	r3, #3
 8007f38:	75fb      	strb	r3, [r7, #23]
          break;
 8007f3a:	e016      	b.n	8007f6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d00f      	beq.n	8007f68 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fc99 	bl	8009882 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f50:	2303      	movs	r3, #3
 8007f52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f54:	e008      	b.n	8007f68 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 fc92 	bl	8009882 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	75fb      	strb	r3, [r7, #23]
          break;
 8007f62:	e002      	b.n	8007f6a <USBD_CDC_Setup+0x19e>
          break;
 8007f64:	bf00      	nop
 8007f66:	e008      	b.n	8007f7a <USBD_CDC_Setup+0x1ae>
          break;
 8007f68:	bf00      	nop
      }
      break;
 8007f6a:	e006      	b.n	8007f7a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 fc87 	bl	8009882 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f74:	2303      	movs	r3, #3
 8007f76:	75fb      	strb	r3, [r7, #23]
      break;
 8007f78:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	32b0      	adds	r2, #176	@ 0xb0
 8007fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e065      	b.n	800807a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	32b0      	adds	r2, #176	@ 0xb0
 8007fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fbe:	78fb      	ldrb	r3, [r7, #3]
 8007fc0:	f003 020f 	and.w	r2, r3, #15
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	3318      	adds	r3, #24
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d02f      	beq.n	8008038 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	f003 020f 	and.w	r2, r3, #15
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	3318      	adds	r3, #24
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	f003 010f 	and.w	r1, r3, #15
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	440b      	add	r3, r1
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4403      	add	r3, r0
 8008000:	331c      	adds	r3, #28
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	fbb2 f1f3 	udiv	r1, r2, r3
 8008008:	fb01 f303 	mul.w	r3, r1, r3
 800800c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800800e:	2b00      	cmp	r3, #0
 8008010:	d112      	bne.n	8008038 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	f003 020f 	and.w	r2, r3, #15
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	3318      	adds	r3, #24
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800802a:	78f9      	ldrb	r1, [r7, #3]
 800802c:	2300      	movs	r3, #0
 800802e:	2200      	movs	r2, #0
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f002 f9a8 	bl	800a386 <USBD_LL_Transmit>
 8008036:	e01f      	b.n	8008078 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2200      	movs	r2, #0
 800803c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	33b0      	adds	r3, #176	@ 0xb0
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d010      	beq.n	8008078 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	33b0      	adds	r3, #176	@ 0xb0
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	460b      	mov	r3, r1
 800808c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	32b0      	adds	r2, #176	@ 0xb0
 8008098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	32b0      	adds	r2, #176	@ 0xb0
 80080a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e01a      	b.n	80080ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f002 f9a6 	bl	800a40a <USBD_LL_GetRxDataSize>
 80080be:	4602      	mov	r2, r0
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	33b0      	adds	r3, #176	@ 0xb0
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80080e4:	4611      	mov	r1, r2
 80080e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	32b0      	adds	r2, #176	@ 0xb0
 8008104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008108:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008110:	2303      	movs	r3, #3
 8008112:	e024      	b.n	800815e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	33b0      	adds	r3, #176	@ 0xb0
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d019      	beq.n	800815c <USBD_CDC_EP0_RxReady+0x6a>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800812e:	2bff      	cmp	r3, #255	@ 0xff
 8008130:	d014      	beq.n	800815c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	33b0      	adds	r3, #176	@ 0xb0
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800814a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008152:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	22ff      	movs	r2, #255	@ 0xff
 8008158:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008170:	2182      	movs	r1, #130	@ 0x82
 8008172:	4818      	ldr	r0, [pc, #96]	@ (80081d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008174:	f000 fd4f 	bl	8008c16 <USBD_GetEpDesc>
 8008178:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800817a:	2101      	movs	r1, #1
 800817c:	4815      	ldr	r0, [pc, #84]	@ (80081d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800817e:	f000 fd4a 	bl	8008c16 <USBD_GetEpDesc>
 8008182:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008184:	2181      	movs	r1, #129	@ 0x81
 8008186:	4813      	ldr	r0, [pc, #76]	@ (80081d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008188:	f000 fd45 	bl	8008c16 <USBD_GetEpDesc>
 800818c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2210      	movs	r2, #16
 8008198:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d006      	beq.n	80081ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081a8:	711a      	strb	r2, [r3, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d006      	beq.n	80081c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081bc:	711a      	strb	r2, [r3, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2243      	movs	r2, #67	@ 0x43
 80081c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081c8:	4b02      	ldr	r3, [pc, #8]	@ (80081d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20000050 	.word	0x20000050

080081d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081e0:	2182      	movs	r1, #130	@ 0x82
 80081e2:	4818      	ldr	r0, [pc, #96]	@ (8008244 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081e4:	f000 fd17 	bl	8008c16 <USBD_GetEpDesc>
 80081e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081ea:	2101      	movs	r1, #1
 80081ec:	4815      	ldr	r0, [pc, #84]	@ (8008244 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081ee:	f000 fd12 	bl	8008c16 <USBD_GetEpDesc>
 80081f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081f4:	2181      	movs	r1, #129	@ 0x81
 80081f6:	4813      	ldr	r0, [pc, #76]	@ (8008244 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081f8:	f000 fd0d 	bl	8008c16 <USBD_GetEpDesc>
 80081fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2210      	movs	r2, #16
 8008208:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d006      	beq.n	800821e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2200      	movs	r2, #0
 8008214:	711a      	strb	r2, [r3, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f042 0202 	orr.w	r2, r2, #2
 800821c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d006      	beq.n	8008232 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	711a      	strb	r2, [r3, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f042 0202 	orr.w	r2, r2, #2
 8008230:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2243      	movs	r2, #67	@ 0x43
 8008236:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008238:	4b02      	ldr	r3, [pc, #8]	@ (8008244 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000050 	.word	0x20000050

08008248 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008250:	2182      	movs	r1, #130	@ 0x82
 8008252:	4818      	ldr	r0, [pc, #96]	@ (80082b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008254:	f000 fcdf 	bl	8008c16 <USBD_GetEpDesc>
 8008258:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800825a:	2101      	movs	r1, #1
 800825c:	4815      	ldr	r0, [pc, #84]	@ (80082b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800825e:	f000 fcda 	bl	8008c16 <USBD_GetEpDesc>
 8008262:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008264:	2181      	movs	r1, #129	@ 0x81
 8008266:	4813      	ldr	r0, [pc, #76]	@ (80082b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008268:	f000 fcd5 	bl	8008c16 <USBD_GetEpDesc>
 800826c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2210      	movs	r2, #16
 8008278:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d006      	beq.n	800828e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	2200      	movs	r2, #0
 8008284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008288:	711a      	strb	r2, [r3, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d006      	beq.n	80082a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800829c:	711a      	strb	r2, [r3, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2243      	movs	r2, #67	@ 0x43
 80082a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082a8:	4b02      	ldr	r3, [pc, #8]	@ (80082b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	20000050 	.word	0x20000050

080082b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	220a      	movs	r2, #10
 80082c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082c6:	4b03      	ldr	r3, [pc, #12]	@ (80082d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	2000000c 	.word	0x2000000c

080082d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e009      	b.n	8008300 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	33b0      	adds	r3, #176	@ 0xb0
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800830c:	b480      	push	{r7}
 800830e:	b087      	sub	sp, #28
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	32b0      	adds	r2, #176	@ 0xb0
 8008322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008326:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800832e:	2303      	movs	r3, #3
 8008330:	e008      	b.n	8008344 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	32b0      	adds	r2, #176	@ 0xb0
 8008364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008368:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008370:	2303      	movs	r3, #3
 8008372:	e004      	b.n	800837e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	32b0      	adds	r2, #176	@ 0xb0
 800839e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80083a4:	2301      	movs	r3, #1
 80083a6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e025      	b.n	80083fe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d11f      	bne.n	80083fc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2201      	movs	r2, #1
 80083c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80083c4:	4b10      	ldr	r3, [pc, #64]	@ (8008408 <USBD_CDC_TransmitPacket+0x7c>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	f003 020f 	and.w	r2, r3, #15
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	4613      	mov	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4403      	add	r3, r0
 80083de:	3318      	adds	r3, #24
 80083e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80083e2:	4b09      	ldr	r3, [pc, #36]	@ (8008408 <USBD_CDC_TransmitPacket+0x7c>)
 80083e4:	7819      	ldrb	r1, [r3, #0]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f001 ffc7 	bl	800a386 <USBD_LL_Transmit>

    ret = USBD_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000093 	.word	0x20000093

0800840c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	32b0      	adds	r2, #176	@ 0xb0
 800841e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008422:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	32b0      	adds	r2, #176	@ 0xb0
 800842e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008436:	2303      	movs	r3, #3
 8008438:	e018      	b.n	800846c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	7c1b      	ldrb	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10a      	bne.n	8008458 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008442:	4b0c      	ldr	r3, [pc, #48]	@ (8008474 <USBD_CDC_ReceivePacket+0x68>)
 8008444:	7819      	ldrb	r1, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800844c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 ffb9 	bl	800a3c8 <USBD_LL_PrepareReceive>
 8008456:	e008      	b.n	800846a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008458:	4b06      	ldr	r3, [pc, #24]	@ (8008474 <USBD_CDC_ReceivePacket+0x68>)
 800845a:	7819      	ldrb	r1, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008462:	2340      	movs	r3, #64	@ 0x40
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 ffaf 	bl	800a3c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20000094 	.word	0x20000094

08008478 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800848c:	2303      	movs	r3, #3
 800848e:	e01f      	b.n	80084d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	79fa      	ldrb	r2, [r7, #7]
 80084c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f001 fe29 	bl	800a11c <USBD_LL_Init>
 80084ca:	4603      	mov	r3, r0
 80084cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e025      	b.n	800853c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	32ae      	adds	r2, #174	@ 0xae
 8008502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00f      	beq.n	800852c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	32ae      	adds	r2, #174	@ 0xae
 8008516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851c:	f107 020e 	add.w	r2, r7, #14
 8008520:	4610      	mov	r0, r2
 8008522:	4798      	blx	r3
 8008524:	4602      	mov	r2, r0
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 fe31 	bl	800a1b4 <USBD_LL_Start>
 8008552:	4603      	mov	r3, r0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008564:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008566:	4618      	mov	r0, r3
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008588:	2b00      	cmp	r3, #0
 800858a:	d009      	beq.n	80085a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	78fa      	ldrb	r2, [r7, #3]
 8008596:	4611      	mov	r1, r2
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	4798      	blx	r3
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	460b      	mov	r3, r1
 80085b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	78fa      	ldrb	r2, [r7, #3]
 80085c4:	4611      	mov	r1, r2
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	4798      	blx	r3
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085d0:	2303      	movs	r3, #3
 80085d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f001 f90c 	bl	800980e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008604:	461a      	mov	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008612:	f003 031f 	and.w	r3, r3, #31
 8008616:	2b02      	cmp	r3, #2
 8008618:	d01a      	beq.n	8008650 <USBD_LL_SetupStage+0x72>
 800861a:	2b02      	cmp	r3, #2
 800861c:	d822      	bhi.n	8008664 <USBD_LL_SetupStage+0x86>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <USBD_LL_SetupStage+0x4a>
 8008622:	2b01      	cmp	r3, #1
 8008624:	d00a      	beq.n	800863c <USBD_LL_SetupStage+0x5e>
 8008626:	e01d      	b.n	8008664 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fb63 	bl	8008cfc <USBD_StdDevReq>
 8008636:	4603      	mov	r3, r0
 8008638:	73fb      	strb	r3, [r7, #15]
      break;
 800863a:	e020      	b.n	800867e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fbcb 	bl	8008de0 <USBD_StdItfReq>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
      break;
 800864e:	e016      	b.n	800867e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fc2d 	bl	8008eb8 <USBD_StdEPReq>
 800865e:	4603      	mov	r3, r0
 8008660:	73fb      	strb	r3, [r7, #15]
      break;
 8008662:	e00c      	b.n	800867e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800866a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800866e:	b2db      	uxtb	r3, r3
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fdfe 	bl	800a274 <USBD_LL_StallEP>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]
      break;
 800867c:	bf00      	nop
  }

  return ret;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	460b      	mov	r3, r1
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800869a:	7afb      	ldrb	r3, [r7, #11]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d16e      	bne.n	800877e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80086a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	f040 8098 	bne.w	80087e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d913      	bls.n	80086e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	1ad2      	subs	r2, r2, r3
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	4293      	cmp	r3, r2
 80086d8:	bf28      	it	cs
 80086da:	4613      	movcs	r3, r2
 80086dc:	461a      	mov	r2, r3
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f001 f994 	bl	8009a0e <USBD_CtlContinueRx>
 80086e6:	e07d      	b.n	80087e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d014      	beq.n	8008720 <USBD_LL_DataOutStage+0x98>
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d81d      	bhi.n	8008736 <USBD_LL_DataOutStage+0xae>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <USBD_LL_DataOutStage+0x7c>
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d003      	beq.n	800870a <USBD_LL_DataOutStage+0x82>
 8008702:	e018      	b.n	8008736 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	75bb      	strb	r3, [r7, #22]
            break;
 8008708:	e018      	b.n	800873c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008710:	b2db      	uxtb	r3, r3
 8008712:	4619      	mov	r1, r3
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 fa64 	bl	8008be2 <USBD_CoreFindIF>
 800871a:	4603      	mov	r3, r0
 800871c:	75bb      	strb	r3, [r7, #22]
            break;
 800871e:	e00d      	b.n	800873c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008726:	b2db      	uxtb	r3, r3
 8008728:	4619      	mov	r1, r3
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 fa66 	bl	8008bfc <USBD_CoreFindEP>
 8008730:	4603      	mov	r3, r0
 8008732:	75bb      	strb	r3, [r7, #22]
            break;
 8008734:	e002      	b.n	800873c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	75bb      	strb	r3, [r7, #22]
            break;
 800873a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800873c:	7dbb      	ldrb	r3, [r7, #22]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d119      	bne.n	8008776 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b03      	cmp	r3, #3
 800874c:	d113      	bne.n	8008776 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800874e:	7dba      	ldrb	r2, [r7, #22]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	32ae      	adds	r2, #174	@ 0xae
 8008754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00b      	beq.n	8008776 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800875e:	7dba      	ldrb	r2, [r7, #22]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008766:	7dba      	ldrb	r2, [r7, #22]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	32ae      	adds	r2, #174	@ 0xae
 800876c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f001 f95a 	bl	8009a30 <USBD_CtlSendStatus>
 800877c:	e032      	b.n	80087e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800877e:	7afb      	ldrb	r3, [r7, #11]
 8008780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008784:	b2db      	uxtb	r3, r3
 8008786:	4619      	mov	r1, r3
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 fa37 	bl	8008bfc <USBD_CoreFindEP>
 800878e:	4603      	mov	r3, r0
 8008790:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008792:	7dbb      	ldrb	r3, [r7, #22]
 8008794:	2bff      	cmp	r3, #255	@ 0xff
 8008796:	d025      	beq.n	80087e4 <USBD_LL_DataOutStage+0x15c>
 8008798:	7dbb      	ldrb	r3, [r7, #22]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d122      	bne.n	80087e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d117      	bne.n	80087da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087aa:	7dba      	ldrb	r2, [r7, #22]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	32ae      	adds	r2, #174	@ 0xae
 80087b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00f      	beq.n	80087da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087ba:	7dba      	ldrb	r2, [r7, #22]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087c2:	7dba      	ldrb	r2, [r7, #22]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	32ae      	adds	r2, #174	@ 0xae
 80087c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	7afa      	ldrb	r2, [r7, #11]
 80087d0:	4611      	mov	r1, r2
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	4798      	blx	r3
 80087d6:	4603      	mov	r3, r0
 80087d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087da:	7dfb      	ldrb	r3, [r7, #23]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	e000      	b.n	80087e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b086      	sub	sp, #24
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	460b      	mov	r3, r1
 80087f8:	607a      	str	r2, [r7, #4]
 80087fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80087fc:	7afb      	ldrb	r3, [r7, #11]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d16f      	bne.n	80088e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3314      	adds	r3, #20
 8008806:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800880e:	2b02      	cmp	r3, #2
 8008810:	d15a      	bne.n	80088c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	429a      	cmp	r2, r3
 800881c:	d914      	bls.n	8008848 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	461a      	mov	r2, r3
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f001 f8bc 	bl	80099b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800883a:	2300      	movs	r3, #0
 800883c:	2200      	movs	r2, #0
 800883e:	2100      	movs	r1, #0
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f001 fdc1 	bl	800a3c8 <USBD_LL_PrepareReceive>
 8008846:	e03f      	b.n	80088c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	429a      	cmp	r2, r3
 8008852:	d11c      	bne.n	800888e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800885c:	429a      	cmp	r2, r3
 800885e:	d316      	bcc.n	800888e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800886a:	429a      	cmp	r2, r3
 800886c:	d20f      	bcs.n	800888e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800886e:	2200      	movs	r2, #0
 8008870:	2100      	movs	r1, #0
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f001 f89d 	bl	80099b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008880:	2300      	movs	r3, #0
 8008882:	2200      	movs	r2, #0
 8008884:	2100      	movs	r1, #0
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f001 fd9e 	bl	800a3c8 <USBD_LL_PrepareReceive>
 800888c:	e01c      	b.n	80088c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b03      	cmp	r3, #3
 8008898:	d10f      	bne.n	80088ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d009      	beq.n	80088ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ba:	2180      	movs	r1, #128	@ 0x80
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f001 fcd9 	bl	800a274 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f001 f8c7 	bl	8009a56 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d03a      	beq.n	8008948 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7ff fe42 	bl	800855c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80088e0:	e032      	b.n	8008948 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088e2:	7afb      	ldrb	r3, [r7, #11]
 80088e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	4619      	mov	r1, r3
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 f985 	bl	8008bfc <USBD_CoreFindEP>
 80088f2:	4603      	mov	r3, r0
 80088f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	2bff      	cmp	r3, #255	@ 0xff
 80088fa:	d025      	beq.n	8008948 <USBD_LL_DataInStage+0x15a>
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d122      	bne.n	8008948 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b03      	cmp	r3, #3
 800890c:	d11c      	bne.n	8008948 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800890e:	7dfa      	ldrb	r2, [r7, #23]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	32ae      	adds	r2, #174	@ 0xae
 8008914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d014      	beq.n	8008948 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800891e:	7dfa      	ldrb	r2, [r7, #23]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008926:	7dfa      	ldrb	r2, [r7, #23]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	32ae      	adds	r2, #174	@ 0xae
 800892c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	7afa      	ldrb	r2, [r7, #11]
 8008934:	4611      	mov	r1, r2
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	4798      	blx	r3
 800893a:	4603      	mov	r3, r0
 800893c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800893e:	7dbb      	ldrb	r3, [r7, #22]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008944:	7dbb      	ldrb	r3, [r7, #22]
 8008946:	e000      	b.n	800894a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800898a:	2b00      	cmp	r3, #0
 800898c:	d014      	beq.n	80089b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00e      	beq.n	80089b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	6852      	ldr	r2, [r2, #4]
 80089a6:	b2d2      	uxtb	r2, r2
 80089a8:	4611      	mov	r1, r2
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	4798      	blx	r3
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089b4:	2303      	movs	r3, #3
 80089b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089b8:	2340      	movs	r3, #64	@ 0x40
 80089ba:	2200      	movs	r2, #0
 80089bc:	2100      	movs	r1, #0
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 fc13 	bl	800a1ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2240      	movs	r2, #64	@ 0x40
 80089d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089d4:	2340      	movs	r3, #64	@ 0x40
 80089d6:	2200      	movs	r2, #0
 80089d8:	2180      	movs	r1, #128	@ 0x80
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f001 fc05 	bl	800a1ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2240      	movs	r2, #64	@ 0x40
 80089ea:	621a      	str	r2, [r3, #32]

  return ret;
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	d006      	beq.n	8008a38 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2204      	movs	r2, #4
 8008a3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d106      	bne.n	8008a70 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d110      	bne.n	8008ab4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00b      	beq.n	8008ab4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	32ae      	adds	r2, #174	@ 0xae
 8008ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e01c      	b.n	8008b1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d115      	bne.n	8008b18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	32ae      	adds	r2, #174	@ 0xae
 8008af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00b      	beq.n	8008b18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	32ae      	adds	r2, #174	@ 0xae
 8008b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	78fa      	ldrb	r2, [r7, #3]
 8008b12:	4611      	mov	r1, r2
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	32ae      	adds	r2, #174	@ 0xae
 8008b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e01c      	b.n	8008b7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d115      	bne.n	8008b7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	32ae      	adds	r2, #174	@ 0xae
 8008b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00b      	beq.n	8008b7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	32ae      	adds	r2, #174	@ 0xae
 8008b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b74:	78fa      	ldrb	r2, [r7, #3]
 8008b76:	4611      	mov	r1, r2
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00e      	beq.n	8008bd8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6852      	ldr	r2, [r2, #4]
 8008bc6:	b2d2      	uxtb	r2, r2
 8008bc8:	4611      	mov	r1, r2
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	4798      	blx	r3
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b086      	sub	sp, #24
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	885b      	ldrh	r3, [r3, #2]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	7812      	ldrb	r2, [r2, #0]
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d91f      	bls.n	8008c7c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c42:	e013      	b.n	8008c6c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c44:	f107 030a 	add.w	r3, r7, #10
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6978      	ldr	r0, [r7, #20]
 8008c4c:	f000 f81b 	bl	8008c86 <USBD_GetNextDesc>
 8008c50:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d108      	bne.n	8008c6c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	789b      	ldrb	r3, [r3, #2]
 8008c62:	78fa      	ldrb	r2, [r7, #3]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d008      	beq.n	8008c7a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	885b      	ldrh	r3, [r3, #2]
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	897b      	ldrh	r3, [r7, #10]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d8e5      	bhi.n	8008c44 <USBD_GetEpDesc+0x2e>
 8008c78:	e000      	b.n	8008c7c <USBD_GetEpDesc+0x66>
          break;
 8008c7a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c7c:	693b      	ldr	r3, [r7, #16]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b085      	sub	sp, #20
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	7812      	ldrb	r2, [r2, #0]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4413      	add	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3714      	adds	r7, #20
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b087      	sub	sp, #28
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cdc:	8a3b      	ldrh	r3, [r7, #16]
 8008cde:	021b      	lsls	r3, r3, #8
 8008ce0:	b21a      	sxth	r2, r3
 8008ce2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	b21b      	sxth	r3, r3
 8008cea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cec:	89fb      	ldrh	r3, [r7, #14]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	371c      	adds	r7, #28
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
	...

08008cfc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d12:	2b40      	cmp	r3, #64	@ 0x40
 8008d14:	d005      	beq.n	8008d22 <USBD_StdDevReq+0x26>
 8008d16:	2b40      	cmp	r3, #64	@ 0x40
 8008d18:	d857      	bhi.n	8008dca <USBD_StdDevReq+0xce>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00f      	beq.n	8008d3e <USBD_StdDevReq+0x42>
 8008d1e:	2b20      	cmp	r3, #32
 8008d20:	d153      	bne.n	8008dca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	32ae      	adds	r2, #174	@ 0xae
 8008d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	4798      	blx	r3
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d3c:	e04a      	b.n	8008dd4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	785b      	ldrb	r3, [r3, #1]
 8008d42:	2b09      	cmp	r3, #9
 8008d44:	d83b      	bhi.n	8008dbe <USBD_StdDevReq+0xc2>
 8008d46:	a201      	add	r2, pc, #4	@ (adr r2, 8008d4c <USBD_StdDevReq+0x50>)
 8008d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4c:	08008da1 	.word	0x08008da1
 8008d50:	08008db5 	.word	0x08008db5
 8008d54:	08008dbf 	.word	0x08008dbf
 8008d58:	08008dab 	.word	0x08008dab
 8008d5c:	08008dbf 	.word	0x08008dbf
 8008d60:	08008d7f 	.word	0x08008d7f
 8008d64:	08008d75 	.word	0x08008d75
 8008d68:	08008dbf 	.word	0x08008dbf
 8008d6c:	08008d97 	.word	0x08008d97
 8008d70:	08008d89 	.word	0x08008d89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fa3c 	bl	80091f4 <USBD_GetDescriptor>
          break;
 8008d7c:	e024      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fba1 	bl	80094c8 <USBD_SetAddress>
          break;
 8008d86:	e01f      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fbe0 	bl	8009550 <USBD_SetConfig>
 8008d90:	4603      	mov	r3, r0
 8008d92:	73fb      	strb	r3, [r7, #15]
          break;
 8008d94:	e018      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fc83 	bl	80096a4 <USBD_GetConfig>
          break;
 8008d9e:	e013      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fcb4 	bl	8009710 <USBD_GetStatus>
          break;
 8008da8:	e00e      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fce3 	bl	8009778 <USBD_SetFeature>
          break;
 8008db2:	e009      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fd07 	bl	80097ca <USBD_ClrFeature>
          break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fd5e 	bl	8009882 <USBD_CtlError>
          break;
 8008dc6:	bf00      	nop
      }
      break;
 8008dc8:	e004      	b.n	8008dd4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fd58 	bl	8009882 <USBD_CtlError>
      break;
 8008dd2:	bf00      	nop
  }

  return ret;
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop

08008de0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008df6:	2b40      	cmp	r3, #64	@ 0x40
 8008df8:	d005      	beq.n	8008e06 <USBD_StdItfReq+0x26>
 8008dfa:	2b40      	cmp	r3, #64	@ 0x40
 8008dfc:	d852      	bhi.n	8008ea4 <USBD_StdItfReq+0xc4>
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <USBD_StdItfReq+0x26>
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d14e      	bne.n	8008ea4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d840      	bhi.n	8008e96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	889b      	ldrh	r3, [r3, #4]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d836      	bhi.n	8008e8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	889b      	ldrh	r3, [r3, #4]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff fedb 	bl	8008be2 <USBD_CoreFindIF>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	2bff      	cmp	r3, #255	@ 0xff
 8008e34:	d01d      	beq.n	8008e72 <USBD_StdItfReq+0x92>
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d11a      	bne.n	8008e72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e3c:	7bba      	ldrb	r2, [r7, #14]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	32ae      	adds	r2, #174	@ 0xae
 8008e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00f      	beq.n	8008e6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e4c:	7bba      	ldrb	r2, [r7, #14]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e54:	7bba      	ldrb	r2, [r7, #14]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	32ae      	adds	r2, #174	@ 0xae
 8008e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	4798      	blx	r3
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e6a:	e004      	b.n	8008e76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e70:	e001      	b.n	8008e76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e72:	2303      	movs	r3, #3
 8008e74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	88db      	ldrh	r3, [r3, #6]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d110      	bne.n	8008ea0 <USBD_StdItfReq+0xc0>
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10d      	bne.n	8008ea0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fdd3 	bl	8009a30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e8a:	e009      	b.n	8008ea0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fcf7 	bl	8009882 <USBD_CtlError>
          break;
 8008e94:	e004      	b.n	8008ea0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fcf2 	bl	8009882 <USBD_CtlError>
          break;
 8008e9e:	e000      	b.n	8008ea2 <USBD_StdItfReq+0xc2>
          break;
 8008ea0:	bf00      	nop
      }
      break;
 8008ea2:	e004      	b.n	8008eae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fceb 	bl	8009882 <USBD_CtlError>
      break;
 8008eac:	bf00      	nop
  }

  return ret;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	889b      	ldrh	r3, [r3, #4]
 8008eca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ed4:	2b40      	cmp	r3, #64	@ 0x40
 8008ed6:	d007      	beq.n	8008ee8 <USBD_StdEPReq+0x30>
 8008ed8:	2b40      	cmp	r3, #64	@ 0x40
 8008eda:	f200 817f 	bhi.w	80091dc <USBD_StdEPReq+0x324>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d02a      	beq.n	8008f38 <USBD_StdEPReq+0x80>
 8008ee2:	2b20      	cmp	r3, #32
 8008ee4:	f040 817a 	bne.w	80091dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7ff fe85 	bl	8008bfc <USBD_CoreFindEP>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ef6:	7b7b      	ldrb	r3, [r7, #13]
 8008ef8:	2bff      	cmp	r3, #255	@ 0xff
 8008efa:	f000 8174 	beq.w	80091e6 <USBD_StdEPReq+0x32e>
 8008efe:	7b7b      	ldrb	r3, [r7, #13]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f040 8170 	bne.w	80091e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f06:	7b7a      	ldrb	r2, [r7, #13]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f0e:	7b7a      	ldrb	r2, [r7, #13]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	32ae      	adds	r2, #174	@ 0xae
 8008f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 8163 	beq.w	80091e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f20:	7b7a      	ldrb	r2, [r7, #13]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	32ae      	adds	r2, #174	@ 0xae
 8008f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	4798      	blx	r3
 8008f32:	4603      	mov	r3, r0
 8008f34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f36:	e156      	b.n	80091e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	785b      	ldrb	r3, [r3, #1]
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d008      	beq.n	8008f52 <USBD_StdEPReq+0x9a>
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	f300 8145 	bgt.w	80091d0 <USBD_StdEPReq+0x318>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 809b 	beq.w	8009082 <USBD_StdEPReq+0x1ca>
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d03c      	beq.n	8008fca <USBD_StdEPReq+0x112>
 8008f50:	e13e      	b.n	80091d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d002      	beq.n	8008f64 <USBD_StdEPReq+0xac>
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d016      	beq.n	8008f90 <USBD_StdEPReq+0xd8>
 8008f62:	e02c      	b.n	8008fbe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00d      	beq.n	8008f86 <USBD_StdEPReq+0xce>
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b80      	cmp	r3, #128	@ 0x80
 8008f6e:	d00a      	beq.n	8008f86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 f97d 	bl	800a274 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f7a:	2180      	movs	r1, #128	@ 0x80
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 f979 	bl	800a274 <USBD_LL_StallEP>
 8008f82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f84:	e020      	b.n	8008fc8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fc7a 	bl	8009882 <USBD_CtlError>
              break;
 8008f8e:	e01b      	b.n	8008fc8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	885b      	ldrh	r3, [r3, #2]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10e      	bne.n	8008fb6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00b      	beq.n	8008fb6 <USBD_StdEPReq+0xfe>
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	2b80      	cmp	r3, #128	@ 0x80
 8008fa2:	d008      	beq.n	8008fb6 <USBD_StdEPReq+0xfe>
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	88db      	ldrh	r3, [r3, #6]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 f95f 	bl	800a274 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fd3a 	bl	8009a30 <USBD_CtlSendStatus>

              break;
 8008fbc:	e004      	b.n	8008fc8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fc5e 	bl	8009882 <USBD_CtlError>
              break;
 8008fc6:	bf00      	nop
          }
          break;
 8008fc8:	e107      	b.n	80091da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d002      	beq.n	8008fdc <USBD_StdEPReq+0x124>
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d016      	beq.n	8009008 <USBD_StdEPReq+0x150>
 8008fda:	e04b      	b.n	8009074 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00d      	beq.n	8008ffe <USBD_StdEPReq+0x146>
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b80      	cmp	r3, #128	@ 0x80
 8008fe6:	d00a      	beq.n	8008ffe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 f941 	bl	800a274 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ff2:	2180      	movs	r1, #128	@ 0x80
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 f93d 	bl	800a274 <USBD_LL_StallEP>
 8008ffa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ffc:	e040      	b.n	8009080 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fc3e 	bl	8009882 <USBD_CtlError>
              break;
 8009006:	e03b      	b.n	8009080 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	885b      	ldrh	r3, [r3, #2]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d136      	bne.n	800907e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 f947 	bl	800a2b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fd03 	bl	8009a30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff fde4 	bl	8008bfc <USBD_CoreFindEP>
 8009034:	4603      	mov	r3, r0
 8009036:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009038:	7b7b      	ldrb	r3, [r7, #13]
 800903a:	2bff      	cmp	r3, #255	@ 0xff
 800903c:	d01f      	beq.n	800907e <USBD_StdEPReq+0x1c6>
 800903e:	7b7b      	ldrb	r3, [r7, #13]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d11c      	bne.n	800907e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009044:	7b7a      	ldrb	r2, [r7, #13]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800904c:	7b7a      	ldrb	r2, [r7, #13]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	32ae      	adds	r2, #174	@ 0xae
 8009052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d010      	beq.n	800907e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800905c:	7b7a      	ldrb	r2, [r7, #13]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	32ae      	adds	r2, #174	@ 0xae
 8009062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4798      	blx	r3
 800906e:	4603      	mov	r3, r0
 8009070:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009072:	e004      	b.n	800907e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fc03 	bl	8009882 <USBD_CtlError>
              break;
 800907c:	e000      	b.n	8009080 <USBD_StdEPReq+0x1c8>
              break;
 800907e:	bf00      	nop
          }
          break;
 8009080:	e0ab      	b.n	80091da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b02      	cmp	r3, #2
 800908c:	d002      	beq.n	8009094 <USBD_StdEPReq+0x1dc>
 800908e:	2b03      	cmp	r3, #3
 8009090:	d032      	beq.n	80090f8 <USBD_StdEPReq+0x240>
 8009092:	e097      	b.n	80091c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d007      	beq.n	80090aa <USBD_StdEPReq+0x1f2>
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b80      	cmp	r3, #128	@ 0x80
 800909e:	d004      	beq.n	80090aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fbed 	bl	8009882 <USBD_CtlError>
                break;
 80090a8:	e091      	b.n	80091ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	da0b      	bge.n	80090ca <USBD_StdEPReq+0x212>
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090b8:	4613      	mov	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	3310      	adds	r3, #16
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	4413      	add	r3, r2
 80090c6:	3304      	adds	r3, #4
 80090c8:	e00b      	b.n	80090e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090d0:	4613      	mov	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	4413      	add	r3, r2
 80090e0:	3304      	adds	r3, #4
 80090e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2202      	movs	r2, #2
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fc43 	bl	800997c <USBD_CtlSendData>
              break;
 80090f6:	e06a      	b.n	80091ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	da11      	bge.n	8009124 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	f003 020f 	and.w	r2, r3, #15
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	4613      	mov	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	3324      	adds	r3, #36	@ 0x24
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d117      	bne.n	800914a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fbb0 	bl	8009882 <USBD_CtlError>
                  break;
 8009122:	e054      	b.n	80091ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	f003 020f 	and.w	r2, r3, #15
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4613      	mov	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d104      	bne.n	800914a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fb9d 	bl	8009882 <USBD_CtlError>
                  break;
 8009148:	e041      	b.n	80091ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800914a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800914e:	2b00      	cmp	r3, #0
 8009150:	da0b      	bge.n	800916a <USBD_StdEPReq+0x2b2>
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	3310      	adds	r3, #16
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	4413      	add	r3, r2
 8009166:	3304      	adds	r3, #4
 8009168:	e00b      	b.n	8009182 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	4413      	add	r3, r2
 8009180:	3304      	adds	r3, #4
 8009182:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <USBD_StdEPReq+0x2d8>
 800918a:	7bbb      	ldrb	r3, [r7, #14]
 800918c:	2b80      	cmp	r3, #128	@ 0x80
 800918e:	d103      	bne.n	8009198 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	e00e      	b.n	80091b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 f8a7 	bl	800a2f0 <USBD_LL_IsStallEP>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2201      	movs	r2, #1
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e002      	b.n	80091b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2202      	movs	r2, #2
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fbdd 	bl	800997c <USBD_CtlSendData>
              break;
 80091c2:	e004      	b.n	80091ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fb5b 	bl	8009882 <USBD_CtlError>
              break;
 80091cc:	bf00      	nop
          }
          break;
 80091ce:	e004      	b.n	80091da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fb55 	bl	8009882 <USBD_CtlError>
          break;
 80091d8:	bf00      	nop
      }
      break;
 80091da:	e005      	b.n	80091e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fb4f 	bl	8009882 <USBD_CtlError>
      break;
 80091e4:	e000      	b.n	80091e8 <USBD_StdEPReq+0x330>
      break;
 80091e6:	bf00      	nop
  }

  return ret;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	885b      	ldrh	r3, [r3, #2]
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	b29b      	uxth	r3, r3
 8009212:	3b01      	subs	r3, #1
 8009214:	2b06      	cmp	r3, #6
 8009216:	f200 8128 	bhi.w	800946a <USBD_GetDescriptor+0x276>
 800921a:	a201      	add	r2, pc, #4	@ (adr r2, 8009220 <USBD_GetDescriptor+0x2c>)
 800921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009220:	0800923d 	.word	0x0800923d
 8009224:	08009255 	.word	0x08009255
 8009228:	08009295 	.word	0x08009295
 800922c:	0800946b 	.word	0x0800946b
 8009230:	0800946b 	.word	0x0800946b
 8009234:	0800940b 	.word	0x0800940b
 8009238:	08009437 	.word	0x08009437
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	7c12      	ldrb	r2, [r2, #16]
 8009248:	f107 0108 	add.w	r1, r7, #8
 800924c:	4610      	mov	r0, r2
 800924e:	4798      	blx	r3
 8009250:	60f8      	str	r0, [r7, #12]
      break;
 8009252:	e112      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	7c1b      	ldrb	r3, [r3, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10d      	bne.n	8009278 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009264:	f107 0208 	add.w	r2, r7, #8
 8009268:	4610      	mov	r0, r2
 800926a:	4798      	blx	r3
 800926c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3301      	adds	r3, #1
 8009272:	2202      	movs	r2, #2
 8009274:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009276:	e100      	b.n	800947a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800927e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009280:	f107 0208 	add.w	r2, r7, #8
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3301      	adds	r3, #1
 800928e:	2202      	movs	r2, #2
 8009290:	701a      	strb	r2, [r3, #0]
      break;
 8009292:	e0f2      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	885b      	ldrh	r3, [r3, #2]
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b05      	cmp	r3, #5
 800929c:	f200 80ac 	bhi.w	80093f8 <USBD_GetDescriptor+0x204>
 80092a0:	a201      	add	r2, pc, #4	@ (adr r2, 80092a8 <USBD_GetDescriptor+0xb4>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080092c1 	.word	0x080092c1
 80092ac:	080092f5 	.word	0x080092f5
 80092b0:	08009329 	.word	0x08009329
 80092b4:	0800935d 	.word	0x0800935d
 80092b8:	08009391 	.word	0x08009391
 80092bc:	080093c5 	.word	0x080093c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	7c12      	ldrb	r2, [r2, #16]
 80092d8:	f107 0108 	add.w	r1, r7, #8
 80092dc:	4610      	mov	r0, r2
 80092de:	4798      	blx	r3
 80092e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092e2:	e091      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 facb 	bl	8009882 <USBD_CtlError>
            err++;
 80092ec:	7afb      	ldrb	r3, [r7, #11]
 80092ee:	3301      	adds	r3, #1
 80092f0:	72fb      	strb	r3, [r7, #11]
          break;
 80092f2:	e089      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	7c12      	ldrb	r2, [r2, #16]
 800930c:	f107 0108 	add.w	r1, r7, #8
 8009310:	4610      	mov	r0, r2
 8009312:	4798      	blx	r3
 8009314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009316:	e077      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fab1 	bl	8009882 <USBD_CtlError>
            err++;
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	3301      	adds	r3, #1
 8009324:	72fb      	strb	r3, [r7, #11]
          break;
 8009326:	e06f      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	7c12      	ldrb	r2, [r2, #16]
 8009340:	f107 0108 	add.w	r1, r7, #8
 8009344:	4610      	mov	r0, r2
 8009346:	4798      	blx	r3
 8009348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800934a:	e05d      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa97 	bl	8009882 <USBD_CtlError>
            err++;
 8009354:	7afb      	ldrb	r3, [r7, #11]
 8009356:	3301      	adds	r3, #1
 8009358:	72fb      	strb	r3, [r7, #11]
          break;
 800935a:	e055      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	7c12      	ldrb	r2, [r2, #16]
 8009374:	f107 0108 	add.w	r1, r7, #8
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
 800937c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937e:	e043      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fa7d 	bl	8009882 <USBD_CtlError>
            err++;
 8009388:	7afb      	ldrb	r3, [r7, #11]
 800938a:	3301      	adds	r3, #1
 800938c:	72fb      	strb	r3, [r7, #11]
          break;
 800938e:	e03b      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	7c12      	ldrb	r2, [r2, #16]
 80093a8:	f107 0108 	add.w	r1, r7, #8
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
 80093b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b2:	e029      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fa63 	bl	8009882 <USBD_CtlError>
            err++;
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	3301      	adds	r3, #1
 80093c0:	72fb      	strb	r3, [r7, #11]
          break;
 80093c2:	e021      	b.n	8009408 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7c12      	ldrb	r2, [r2, #16]
 80093dc:	f107 0108 	add.w	r1, r7, #8
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e6:	e00f      	b.n	8009408 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fa49 	bl	8009882 <USBD_CtlError>
            err++;
 80093f0:	7afb      	ldrb	r3, [r7, #11]
 80093f2:	3301      	adds	r3, #1
 80093f4:	72fb      	strb	r3, [r7, #11]
          break;
 80093f6:	e007      	b.n	8009408 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa41 	bl	8009882 <USBD_CtlError>
          err++;
 8009400:	7afb      	ldrb	r3, [r7, #11]
 8009402:	3301      	adds	r3, #1
 8009404:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009406:	bf00      	nop
      }
      break;
 8009408:	e037      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	7c1b      	ldrb	r3, [r3, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d109      	bne.n	8009426 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800941a:	f107 0208 	add.w	r2, r7, #8
 800941e:	4610      	mov	r0, r2
 8009420:	4798      	blx	r3
 8009422:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009424:	e029      	b.n	800947a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fa2a 	bl	8009882 <USBD_CtlError>
        err++;
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	3301      	adds	r3, #1
 8009432:	72fb      	strb	r3, [r7, #11]
      break;
 8009434:	e021      	b.n	800947a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7c1b      	ldrb	r3, [r3, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10d      	bne.n	800945a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009446:	f107 0208 	add.w	r2, r7, #8
 800944a:	4610      	mov	r0, r2
 800944c:	4798      	blx	r3
 800944e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3301      	adds	r3, #1
 8009454:	2207      	movs	r2, #7
 8009456:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009458:	e00f      	b.n	800947a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fa10 	bl	8009882 <USBD_CtlError>
        err++;
 8009462:	7afb      	ldrb	r3, [r7, #11]
 8009464:	3301      	adds	r3, #1
 8009466:	72fb      	strb	r3, [r7, #11]
      break;
 8009468:	e007      	b.n	800947a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fa08 	bl	8009882 <USBD_CtlError>
      err++;
 8009472:	7afb      	ldrb	r3, [r7, #11]
 8009474:	3301      	adds	r3, #1
 8009476:	72fb      	strb	r3, [r7, #11]
      break;
 8009478:	bf00      	nop
  }

  if (err != 0U)
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d11e      	bne.n	80094be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	88db      	ldrh	r3, [r3, #6]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d016      	beq.n	80094b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009488:	893b      	ldrh	r3, [r7, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00e      	beq.n	80094ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	88da      	ldrh	r2, [r3, #6]
 8009492:	893b      	ldrh	r3, [r7, #8]
 8009494:	4293      	cmp	r3, r2
 8009496:	bf28      	it	cs
 8009498:	4613      	movcs	r3, r2
 800949a:	b29b      	uxth	r3, r3
 800949c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800949e:	893b      	ldrh	r3, [r7, #8]
 80094a0:	461a      	mov	r2, r3
 80094a2:	68f9      	ldr	r1, [r7, #12]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fa69 	bl	800997c <USBD_CtlSendData>
 80094aa:	e009      	b.n	80094c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f9e7 	bl	8009882 <USBD_CtlError>
 80094b4:	e004      	b.n	80094c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 faba 	bl	8009a30 <USBD_CtlSendStatus>
 80094bc:	e000      	b.n	80094c0 <USBD_GetDescriptor+0x2cc>
    return;
 80094be:	bf00      	nop
  }
}
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop

080094c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	889b      	ldrh	r3, [r3, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d131      	bne.n	800953e <USBD_SetAddress+0x76>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	88db      	ldrh	r3, [r3, #6]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d12d      	bne.n	800953e <USBD_SetAddress+0x76>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	885b      	ldrh	r3, [r3, #2]
 80094e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80094e8:	d829      	bhi.n	800953e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	885b      	ldrh	r3, [r3, #2]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d104      	bne.n	800950c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f9bc 	bl	8009882 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950a:	e01d      	b.n	8009548 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	7bfa      	ldrb	r2, [r7, #15]
 8009510:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 ff15 	bl	800a348 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa86 	bl	8009a30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d004      	beq.n	8009534 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2202      	movs	r2, #2
 800952e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009532:	e009      	b.n	8009548 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953c:	e004      	b.n	8009548 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f99e 	bl	8009882 <USBD_CtlError>
  }
}
 8009546:	bf00      	nop
 8009548:	bf00      	nop
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	885b      	ldrh	r3, [r3, #2]
 8009562:	b2da      	uxtb	r2, r3
 8009564:	4b4e      	ldr	r3, [pc, #312]	@ (80096a0 <USBD_SetConfig+0x150>)
 8009566:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009568:	4b4d      	ldr	r3, [pc, #308]	@ (80096a0 <USBD_SetConfig+0x150>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d905      	bls.n	800957c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f985 	bl	8009882 <USBD_CtlError>
    return USBD_FAIL;
 8009578:	2303      	movs	r3, #3
 800957a:	e08c      	b.n	8009696 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d002      	beq.n	800958e <USBD_SetConfig+0x3e>
 8009588:	2b03      	cmp	r3, #3
 800958a:	d029      	beq.n	80095e0 <USBD_SetConfig+0x90>
 800958c:	e075      	b.n	800967a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800958e:	4b44      	ldr	r3, [pc, #272]	@ (80096a0 <USBD_SetConfig+0x150>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d020      	beq.n	80095d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009596:	4b42      	ldr	r3, [pc, #264]	@ (80096a0 <USBD_SetConfig+0x150>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	461a      	mov	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095a0:	4b3f      	ldr	r3, [pc, #252]	@ (80096a0 <USBD_SetConfig+0x150>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7fe ffe3 	bl	8008572 <USBD_SetClassConfig>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d008      	beq.n	80095c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f962 	bl	8009882 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2202      	movs	r2, #2
 80095c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095c6:	e065      	b.n	8009694 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fa31 	bl	8009a30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2203      	movs	r2, #3
 80095d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80095d6:	e05d      	b.n	8009694 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fa29 	bl	8009a30 <USBD_CtlSendStatus>
      break;
 80095de:	e059      	b.n	8009694 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095e0:	4b2f      	ldr	r3, [pc, #188]	@ (80096a0 <USBD_SetConfig+0x150>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d112      	bne.n	800960e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80095f0:	4b2b      	ldr	r3, [pc, #172]	@ (80096a0 <USBD_SetConfig+0x150>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	461a      	mov	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095fa:	4b29      	ldr	r3, [pc, #164]	@ (80096a0 <USBD_SetConfig+0x150>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7fe ffd2 	bl	80085aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fa12 	bl	8009a30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800960c:	e042      	b.n	8009694 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800960e:	4b24      	ldr	r3, [pc, #144]	@ (80096a0 <USBD_SetConfig+0x150>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	429a      	cmp	r2, r3
 800961a:	d02a      	beq.n	8009672 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	b2db      	uxtb	r3, r3
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7fe ffc0 	bl	80085aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800962a:	4b1d      	ldr	r3, [pc, #116]	@ (80096a0 <USBD_SetConfig+0x150>)
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	461a      	mov	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009634:	4b1a      	ldr	r3, [pc, #104]	@ (80096a0 <USBD_SetConfig+0x150>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7fe ff99 	bl	8008572 <USBD_SetClassConfig>
 8009640:	4603      	mov	r3, r0
 8009642:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00f      	beq.n	800966a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f918 	bl	8009882 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7fe ffa5 	bl	80085aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009668:	e014      	b.n	8009694 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f9e0 	bl	8009a30 <USBD_CtlSendStatus>
      break;
 8009670:	e010      	b.n	8009694 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f9dc 	bl	8009a30 <USBD_CtlSendStatus>
      break;
 8009678:	e00c      	b.n	8009694 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f900 	bl	8009882 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009682:	4b07      	ldr	r3, [pc, #28]	@ (80096a0 <USBD_SetConfig+0x150>)
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7fe ff8e 	bl	80085aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800968e:	2303      	movs	r3, #3
 8009690:	73fb      	strb	r3, [r7, #15]
      break;
 8009692:	bf00      	nop
  }

  return ret;
 8009694:	7bfb      	ldrb	r3, [r7, #15]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20000430 	.word	0x20000430

080096a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	88db      	ldrh	r3, [r3, #6]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d004      	beq.n	80096c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f8e2 	bl	8009882 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096be:	e023      	b.n	8009708 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	dc02      	bgt.n	80096d2 <USBD_GetConfig+0x2e>
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	dc03      	bgt.n	80096d8 <USBD_GetConfig+0x34>
 80096d0:	e015      	b.n	80096fe <USBD_GetConfig+0x5a>
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d00b      	beq.n	80096ee <USBD_GetConfig+0x4a>
 80096d6:	e012      	b.n	80096fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3308      	adds	r3, #8
 80096e2:	2201      	movs	r2, #1
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f948 	bl	800997c <USBD_CtlSendData>
        break;
 80096ec:	e00c      	b.n	8009708 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3304      	adds	r3, #4
 80096f2:	2201      	movs	r2, #1
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f940 	bl	800997c <USBD_CtlSendData>
        break;
 80096fc:	e004      	b.n	8009708 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f8be 	bl	8009882 <USBD_CtlError>
        break;
 8009706:	bf00      	nop
}
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009720:	b2db      	uxtb	r3, r3
 8009722:	3b01      	subs	r3, #1
 8009724:	2b02      	cmp	r3, #2
 8009726:	d81e      	bhi.n	8009766 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	88db      	ldrh	r3, [r3, #6]
 800972c:	2b02      	cmp	r3, #2
 800972e:	d004      	beq.n	800973a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f8a5 	bl	8009882 <USBD_CtlError>
        break;
 8009738:	e01a      	b.n	8009770 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009746:	2b00      	cmp	r3, #0
 8009748:	d005      	beq.n	8009756 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f043 0202 	orr.w	r2, r3, #2
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	330c      	adds	r3, #12
 800975a:	2202      	movs	r2, #2
 800975c:	4619      	mov	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f90c 	bl	800997c <USBD_CtlSendData>
      break;
 8009764:	e004      	b.n	8009770 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f88a 	bl	8009882 <USBD_CtlError>
      break;
 800976e:	bf00      	nop
  }
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	885b      	ldrh	r3, [r3, #2]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d107      	bne.n	800979a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f94c 	bl	8009a30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009798:	e013      	b.n	80097c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	885b      	ldrh	r3, [r3, #2]
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d10b      	bne.n	80097ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	889b      	ldrh	r3, [r3, #4]
 80097a6:	0a1b      	lsrs	r3, r3, #8
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f93c 	bl	8009a30 <USBD_CtlSendStatus>
}
 80097b8:	e003      	b.n	80097c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f860 	bl	8009882 <USBD_CtlError>
}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	3b01      	subs	r3, #1
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d80b      	bhi.n	80097fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	885b      	ldrh	r3, [r3, #2]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d10c      	bne.n	8009804 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f91c 	bl	8009a30 <USBD_CtlSendStatus>
      }
      break;
 80097f8:	e004      	b.n	8009804 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097fa:	6839      	ldr	r1, [r7, #0]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f840 	bl	8009882 <USBD_CtlError>
      break;
 8009802:	e000      	b.n	8009806 <USBD_ClrFeature+0x3c>
      break;
 8009804:	bf00      	nop
  }
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	781a      	ldrb	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3301      	adds	r3, #1
 8009828:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff fa40 	bl	8008cbe <SWAPBYTE>
 800983e:	4603      	mov	r3, r0
 8009840:	461a      	mov	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f7ff fa33 	bl	8008cbe <SWAPBYTE>
 8009858:	4603      	mov	r3, r0
 800985a:	461a      	mov	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3301      	adds	r3, #1
 8009864:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	3301      	adds	r3, #1
 800986a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f7ff fa26 	bl	8008cbe <SWAPBYTE>
 8009872:	4603      	mov	r3, r0
 8009874:	461a      	mov	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	80da      	strh	r2, [r3, #6]
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800988c:	2180      	movs	r1, #128	@ 0x80
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fcf0 	bl	800a274 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009894:	2100      	movs	r1, #0
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fcec 	bl	800a274 <USBD_LL_StallEP>
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d042      	beq.n	8009940 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80098be:	6938      	ldr	r0, [r7, #16]
 80098c0:	f000 f842 	bl	8009948 <USBD_GetLen>
 80098c4:	4603      	mov	r3, r0
 80098c6:	3301      	adds	r3, #1
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ce:	d808      	bhi.n	80098e2 <USBD_GetString+0x3e>
 80098d0:	6938      	ldr	r0, [r7, #16]
 80098d2:	f000 f839 	bl	8009948 <USBD_GetLen>
 80098d6:	4603      	mov	r3, r0
 80098d8:	3301      	adds	r3, #1
 80098da:	b29b      	uxth	r3, r3
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	b29a      	uxth	r2, r3
 80098e0:	e001      	b.n	80098e6 <USBD_GetString+0x42>
 80098e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	4413      	add	r3, r2
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	7812      	ldrb	r2, [r2, #0]
 80098f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	3301      	adds	r3, #1
 80098fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098fc:	7dfb      	ldrb	r3, [r7, #23]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	4413      	add	r3, r2
 8009902:	2203      	movs	r2, #3
 8009904:	701a      	strb	r2, [r3, #0]
  idx++;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	3301      	adds	r3, #1
 800990a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800990c:	e013      	b.n	8009936 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	4413      	add	r3, r2
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	7812      	ldrb	r2, [r2, #0]
 8009918:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	3301      	adds	r3, #1
 800991e:	613b      	str	r3, [r7, #16]
    idx++;
 8009920:	7dfb      	ldrb	r3, [r7, #23]
 8009922:	3301      	adds	r3, #1
 8009924:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	4413      	add	r3, r2
 800992c:	2200      	movs	r2, #0
 800992e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	3301      	adds	r3, #1
 8009934:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e7      	bne.n	800990e <USBD_GetString+0x6a>
 800993e:	e000      	b.n	8009942 <USBD_GetString+0x9e>
    return;
 8009940:	bf00      	nop
  }
}
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009958:	e005      	b.n	8009966 <USBD_GetLen+0x1e>
  {
    len++;
 800995a:	7bfb      	ldrb	r3, [r7, #15]
 800995c:	3301      	adds	r3, #1
 800995e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	3301      	adds	r3, #1
 8009964:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1f5      	bne.n	800995a <USBD_GetLen+0x12>
  }

  return len;
 800996e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2202      	movs	r2, #2
 800998c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	2100      	movs	r1, #0
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f000 fcef 	bl	800a386 <USBD_LL_Transmit>

  return USBD_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b084      	sub	sp, #16
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	2100      	movs	r1, #0
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 fcde 	bl	800a386 <USBD_LL_Transmit>

  return USBD_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2203      	movs	r2, #3
 80099e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	2100      	movs	r1, #0
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f000 fce2 	bl	800a3c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	2100      	movs	r1, #0
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 fcd1 	bl	800a3c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2204      	movs	r2, #4
 8009a3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a40:	2300      	movs	r3, #0
 8009a42:	2200      	movs	r2, #0
 8009a44:	2100      	movs	r1, #0
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fc9d 	bl	800a386 <USBD_LL_Transmit>

  return USBD_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2205      	movs	r2, #5
 8009a62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a66:	2300      	movs	r3, #0
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fcab 	bl	800a3c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a80:	2200      	movs	r2, #0
 8009a82:	4912      	ldr	r1, [pc, #72]	@ (8009acc <MX_USB_DEVICE_Init+0x50>)
 8009a84:	4812      	ldr	r0, [pc, #72]	@ (8009ad0 <MX_USB_DEVICE_Init+0x54>)
 8009a86:	f7fe fcf7 	bl	8008478 <USBD_Init>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a90:	f7f7 fd06 	bl	80014a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a94:	490f      	ldr	r1, [pc, #60]	@ (8009ad4 <MX_USB_DEVICE_Init+0x58>)
 8009a96:	480e      	ldr	r0, [pc, #56]	@ (8009ad0 <MX_USB_DEVICE_Init+0x54>)
 8009a98:	f7fe fd1e 	bl	80084d8 <USBD_RegisterClass>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009aa2:	f7f7 fcfd 	bl	80014a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009aa6:	490c      	ldr	r1, [pc, #48]	@ (8009ad8 <MX_USB_DEVICE_Init+0x5c>)
 8009aa8:	4809      	ldr	r0, [pc, #36]	@ (8009ad0 <MX_USB_DEVICE_Init+0x54>)
 8009aaa:	f7fe fc15 	bl	80082d8 <USBD_CDC_RegisterInterface>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ab4:	f7f7 fcf4 	bl	80014a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ab8:	4805      	ldr	r0, [pc, #20]	@ (8009ad0 <MX_USB_DEVICE_Init+0x54>)
 8009aba:	f7fe fd43 	bl	8008544 <USBD_Start>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ac4:	f7f7 fcec 	bl	80014a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ac8:	bf00      	nop
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	200000ac 	.word	0x200000ac
 8009ad0:	20000434 	.word	0x20000434
 8009ad4:	20000018 	.word	0x20000018
 8009ad8:	20000098 	.word	0x20000098

08009adc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	4905      	ldr	r1, [pc, #20]	@ (8009af8 <CDC_Init_FS+0x1c>)
 8009ae4:	4805      	ldr	r0, [pc, #20]	@ (8009afc <CDC_Init_FS+0x20>)
 8009ae6:	f7fe fc11 	bl	800830c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009aea:	4905      	ldr	r1, [pc, #20]	@ (8009b00 <CDC_Init_FS+0x24>)
 8009aec:	4803      	ldr	r0, [pc, #12]	@ (8009afc <CDC_Init_FS+0x20>)
 8009aee:	f7fe fc2f 	bl	8008350 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009af2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	20000f10 	.word	0x20000f10
 8009afc:	20000434 	.word	0x20000434
 8009b00:	20000710 	.word	0x20000710

08009b04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	6039      	str	r1, [r7, #0]
 8009b1e:	71fb      	strb	r3, [r7, #7]
 8009b20:	4613      	mov	r3, r2
 8009b22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	2b23      	cmp	r3, #35	@ 0x23
 8009b28:	d84a      	bhi.n	8009bc0 <CDC_Control_FS+0xac>
 8009b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b30 <CDC_Control_FS+0x1c>)
 8009b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b30:	08009bc1 	.word	0x08009bc1
 8009b34:	08009bc1 	.word	0x08009bc1
 8009b38:	08009bc1 	.word	0x08009bc1
 8009b3c:	08009bc1 	.word	0x08009bc1
 8009b40:	08009bc1 	.word	0x08009bc1
 8009b44:	08009bc1 	.word	0x08009bc1
 8009b48:	08009bc1 	.word	0x08009bc1
 8009b4c:	08009bc1 	.word	0x08009bc1
 8009b50:	08009bc1 	.word	0x08009bc1
 8009b54:	08009bc1 	.word	0x08009bc1
 8009b58:	08009bc1 	.word	0x08009bc1
 8009b5c:	08009bc1 	.word	0x08009bc1
 8009b60:	08009bc1 	.word	0x08009bc1
 8009b64:	08009bc1 	.word	0x08009bc1
 8009b68:	08009bc1 	.word	0x08009bc1
 8009b6c:	08009bc1 	.word	0x08009bc1
 8009b70:	08009bc1 	.word	0x08009bc1
 8009b74:	08009bc1 	.word	0x08009bc1
 8009b78:	08009bc1 	.word	0x08009bc1
 8009b7c:	08009bc1 	.word	0x08009bc1
 8009b80:	08009bc1 	.word	0x08009bc1
 8009b84:	08009bc1 	.word	0x08009bc1
 8009b88:	08009bc1 	.word	0x08009bc1
 8009b8c:	08009bc1 	.word	0x08009bc1
 8009b90:	08009bc1 	.word	0x08009bc1
 8009b94:	08009bc1 	.word	0x08009bc1
 8009b98:	08009bc1 	.word	0x08009bc1
 8009b9c:	08009bc1 	.word	0x08009bc1
 8009ba0:	08009bc1 	.word	0x08009bc1
 8009ba4:	08009bc1 	.word	0x08009bc1
 8009ba8:	08009bc1 	.word	0x08009bc1
 8009bac:	08009bc1 	.word	0x08009bc1
 8009bb0:	08009bc1 	.word	0x08009bc1
 8009bb4:	08009bc1 	.word	0x08009bc1
 8009bb8:	08009bc1 	.word	0x08009bc1
 8009bbc:	08009bc1 	.word	0x08009bc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009bc0:	bf00      	nop
  }

  return (USBD_OK);
 8009bc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009bda:	6879      	ldr	r1, [r7, #4]
 8009bdc:	480b      	ldr	r0, [pc, #44]	@ (8009c0c <CDC_Receive_FS+0x3c>)
 8009bde:	f7fe fbb7 	bl	8008350 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009be2:	480a      	ldr	r0, [pc, #40]	@ (8009c0c <CDC_Receive_FS+0x3c>)
 8009be4:	f7fe fc12 	bl	800840c <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4619      	mov	r1, r3
 8009bee:	4808      	ldr	r0, [pc, #32]	@ (8009c10 <CDC_Receive_FS+0x40>)
 8009bf0:	f7f7 fc32 	bl	8001458 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	4804      	ldr	r0, [pc, #16]	@ (8009c10 <CDC_Receive_FS+0x40>)
 8009bfe:	f000 fc5b 	bl	800a4b8 <memset>
  return (USBD_OK);
 8009c02:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20000434 	.word	0x20000434
 8009c10:	20000710 	.word	0x20000710

08009c14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c20:	2300      	movs	r3, #0
 8009c22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c24:	4b0d      	ldr	r3, [pc, #52]	@ (8009c5c <CDC_Transmit_FS+0x48>)
 8009c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e00b      	b.n	8009c52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009c3a:	887b      	ldrh	r3, [r7, #2]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	4806      	ldr	r0, [pc, #24]	@ (8009c5c <CDC_Transmit_FS+0x48>)
 8009c42:	f7fe fb63 	bl	800830c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009c46:	4805      	ldr	r0, [pc, #20]	@ (8009c5c <CDC_Transmit_FS+0x48>)
 8009c48:	f7fe fba0 	bl	800838c <USBD_CDC_TransmitPacket>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	20000434 	.word	0x20000434

08009c60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	371c      	adds	r7, #28
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
	...

08009c84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	6039      	str	r1, [r7, #0]
 8009c8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2212      	movs	r2, #18
 8009c94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c96:	4b03      	ldr	r3, [pc, #12]	@ (8009ca4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	200000c8 	.word	0x200000c8

08009ca8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	6039      	str	r1, [r7, #0]
 8009cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2204      	movs	r2, #4
 8009cb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009cba:	4b03      	ldr	r3, [pc, #12]	@ (8009cc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	200000dc 	.word	0x200000dc

08009ccc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	6039      	str	r1, [r7, #0]
 8009cd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d105      	bne.n	8009cea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	4907      	ldr	r1, [pc, #28]	@ (8009d00 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ce2:	4808      	ldr	r0, [pc, #32]	@ (8009d04 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ce4:	f7ff fdde 	bl	80098a4 <USBD_GetString>
 8009ce8:	e004      	b.n	8009cf4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	4904      	ldr	r1, [pc, #16]	@ (8009d00 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cee:	4805      	ldr	r0, [pc, #20]	@ (8009d04 <USBD_FS_ProductStrDescriptor+0x38>)
 8009cf0:	f7ff fdd8 	bl	80098a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cf4:	4b02      	ldr	r3, [pc, #8]	@ (8009d00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20001710 	.word	0x20001710
 8009d04:	0800a544 	.word	0x0800a544

08009d08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	6039      	str	r1, [r7, #0]
 8009d12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	4904      	ldr	r1, [pc, #16]	@ (8009d28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d18:	4804      	ldr	r0, [pc, #16]	@ (8009d2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d1a:	f7ff fdc3 	bl	80098a4 <USBD_GetString>
  return USBD_StrDesc;
 8009d1e:	4b02      	ldr	r3, [pc, #8]	@ (8009d28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	20001710 	.word	0x20001710
 8009d2c:	0800a55c 	.word	0x0800a55c

08009d30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	6039      	str	r1, [r7, #0]
 8009d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	221a      	movs	r2, #26
 8009d40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d42:	f000 f843 	bl	8009dcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d46:	4b02      	ldr	r3, [pc, #8]	@ (8009d50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	200000e0 	.word	0x200000e0

08009d54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	6039      	str	r1, [r7, #0]
 8009d5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d105      	bne.n	8009d72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	4907      	ldr	r1, [pc, #28]	@ (8009d88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d6a:	4808      	ldr	r0, [pc, #32]	@ (8009d8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d6c:	f7ff fd9a 	bl	80098a4 <USBD_GetString>
 8009d70:	e004      	b.n	8009d7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	4904      	ldr	r1, [pc, #16]	@ (8009d88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d76:	4805      	ldr	r0, [pc, #20]	@ (8009d8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d78:	f7ff fd94 	bl	80098a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d7c:	4b02      	ldr	r3, [pc, #8]	@ (8009d88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	20001710 	.word	0x20001710
 8009d8c:	0800a570 	.word	0x0800a570

08009d90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	4603      	mov	r3, r0
 8009d98:	6039      	str	r1, [r7, #0]
 8009d9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d105      	bne.n	8009dae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	4907      	ldr	r1, [pc, #28]	@ (8009dc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009da6:	4808      	ldr	r0, [pc, #32]	@ (8009dc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009da8:	f7ff fd7c 	bl	80098a4 <USBD_GetString>
 8009dac:	e004      	b.n	8009db8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	4904      	ldr	r1, [pc, #16]	@ (8009dc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009db2:	4805      	ldr	r0, [pc, #20]	@ (8009dc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009db4:	f7ff fd76 	bl	80098a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009db8:	4b02      	ldr	r3, [pc, #8]	@ (8009dc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20001710 	.word	0x20001710
 8009dc8:	0800a57c 	.word	0x0800a57c

08009dcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8009e10 <Get_SerialNum+0x44>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e14 <Get_SerialNum+0x48>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009dde:	4b0e      	ldr	r3, [pc, #56]	@ (8009e18 <Get_SerialNum+0x4c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4413      	add	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d009      	beq.n	8009e06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009df2:	2208      	movs	r2, #8
 8009df4:	4909      	ldr	r1, [pc, #36]	@ (8009e1c <Get_SerialNum+0x50>)
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f000 f814 	bl	8009e24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009dfc:	2204      	movs	r2, #4
 8009dfe:	4908      	ldr	r1, [pc, #32]	@ (8009e20 <Get_SerialNum+0x54>)
 8009e00:	68b8      	ldr	r0, [r7, #8]
 8009e02:	f000 f80f 	bl	8009e24 <IntToUnicode>
  }
}
 8009e06:	bf00      	nop
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	1fff7a10 	.word	0x1fff7a10
 8009e14:	1fff7a14 	.word	0x1fff7a14
 8009e18:	1fff7a18 	.word	0x1fff7a18
 8009e1c:	200000e2 	.word	0x200000e2
 8009e20:	200000f2 	.word	0x200000f2

08009e24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]
 8009e3a:	e027      	b.n	8009e8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	0f1b      	lsrs	r3, r3, #28
 8009e40:	2b09      	cmp	r3, #9
 8009e42:	d80b      	bhi.n	8009e5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	0f1b      	lsrs	r3, r3, #28
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	4619      	mov	r1, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	440b      	add	r3, r1
 8009e54:	3230      	adds	r2, #48	@ 0x30
 8009e56:	b2d2      	uxtb	r2, r2
 8009e58:	701a      	strb	r2, [r3, #0]
 8009e5a:	e00a      	b.n	8009e72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	0f1b      	lsrs	r3, r3, #28
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	4619      	mov	r1, r3
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	440b      	add	r3, r1
 8009e6c:	3237      	adds	r2, #55	@ 0x37
 8009e6e:	b2d2      	uxtb	r2, r2
 8009e70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	011b      	lsls	r3, r3, #4
 8009e76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	005b      	lsls	r3, r3, #1
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	4413      	add	r3, r2
 8009e82:	2200      	movs	r2, #0
 8009e84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	75fb      	strb	r3, [r7, #23]
 8009e8c:	7dfa      	ldrb	r2, [r7, #23]
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d3d3      	bcc.n	8009e3c <IntToUnicode+0x18>
  }
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	371c      	adds	r7, #28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
	...

08009ea4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08a      	sub	sp, #40	@ 0x28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009eac:	f107 0314 	add.w	r3, r7, #20
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	605a      	str	r2, [r3, #4]
 8009eb6:	609a      	str	r2, [r3, #8]
 8009eb8:	60da      	str	r2, [r3, #12]
 8009eba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ec4:	d13a      	bne.n	8009f3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	613b      	str	r3, [r7, #16]
 8009eca:	4b1e      	ldr	r3, [pc, #120]	@ (8009f44 <HAL_PCD_MspInit+0xa0>)
 8009ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ece:	4a1d      	ldr	r2, [pc, #116]	@ (8009f44 <HAL_PCD_MspInit+0xa0>)
 8009ed0:	f043 0301 	orr.w	r3, r3, #1
 8009ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8009f44 <HAL_PCD_MspInit+0xa0>)
 8009ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	613b      	str	r3, [r7, #16]
 8009ee0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ee2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ee8:	2302      	movs	r3, #2
 8009eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eec:	2300      	movs	r3, #0
 8009eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ef4:	230a      	movs	r3, #10
 8009ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ef8:	f107 0314 	add.w	r3, r7, #20
 8009efc:	4619      	mov	r1, r3
 8009efe:	4812      	ldr	r0, [pc, #72]	@ (8009f48 <HAL_PCD_MspInit+0xa4>)
 8009f00:	f7f8 fa5c 	bl	80023bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f04:	4b0f      	ldr	r3, [pc, #60]	@ (8009f44 <HAL_PCD_MspInit+0xa0>)
 8009f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f08:	4a0e      	ldr	r2, [pc, #56]	@ (8009f44 <HAL_PCD_MspInit+0xa0>)
 8009f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f0e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	4b0b      	ldr	r3, [pc, #44]	@ (8009f44 <HAL_PCD_MspInit+0xa0>)
 8009f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f18:	4a0a      	ldr	r2, [pc, #40]	@ (8009f44 <HAL_PCD_MspInit+0xa0>)
 8009f1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f20:	4b08      	ldr	r3, [pc, #32]	@ (8009f44 <HAL_PCD_MspInit+0xa0>)
 8009f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2100      	movs	r1, #0
 8009f30:	2043      	movs	r0, #67	@ 0x43
 8009f32:	f7f7 fe0a 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f36:	2043      	movs	r0, #67	@ 0x43
 8009f38:	f7f7 fe23 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f3c:	bf00      	nop
 8009f3e:	3728      	adds	r7, #40	@ 0x28
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	40023800 	.word	0x40023800
 8009f48:	40020000 	.word	0x40020000

08009f4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f7fe fb3b 	bl	80085de <USBD_LL_SetupStage>
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009f82:	78fa      	ldrb	r2, [r7, #3]
 8009f84:	6879      	ldr	r1, [r7, #4]
 8009f86:	4613      	mov	r3, r2
 8009f88:	00db      	lsls	r3, r3, #3
 8009f8a:	4413      	add	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	440b      	add	r3, r1
 8009f90:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	78fb      	ldrb	r3, [r7, #3]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	f7fe fb75 	bl	8008688 <USBD_LL_DataOutStage>
}
 8009f9e:	bf00      	nop
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b082      	sub	sp, #8
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009fb8:	78fa      	ldrb	r2, [r7, #3]
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	3320      	adds	r3, #32
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	f7fe fc0e 	bl	80087ee <USBD_LL_DataInStage>
}
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fe fd48 	bl	8008a7e <USBD_LL_SOF>
}
 8009fee:	bf00      	nop
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b084      	sub	sp, #16
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ffe:	2301      	movs	r3, #1
 800a000:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	79db      	ldrb	r3, [r3, #7]
 800a006:	2b02      	cmp	r3, #2
 800a008:	d001      	beq.n	800a00e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a00a:	f7f7 fa49 	bl	80014a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a014:	7bfa      	ldrb	r2, [r7, #15]
 800a016:	4611      	mov	r1, r2
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe fcec 	bl	80089f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a024:	4618      	mov	r0, r3
 800a026:	f7fe fc94 	bl	8008952 <USBD_LL_Reset>
}
 800a02a:	bf00      	nop
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a042:	4618      	mov	r0, r3
 800a044:	f7fe fce7 	bl	8008a16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	6812      	ldr	r2, [r2, #0]
 800a056:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a05a:	f043 0301 	orr.w	r3, r3, #1
 800a05e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	7adb      	ldrb	r3, [r3, #11]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d005      	beq.n	800a074 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a068:	4b04      	ldr	r3, [pc, #16]	@ (800a07c <HAL_PCD_SuspendCallback+0x48>)
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	4a03      	ldr	r2, [pc, #12]	@ (800a07c <HAL_PCD_SuspendCallback+0x48>)
 800a06e:	f043 0306 	orr.w	r3, r3, #6
 800a072:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	e000ed00 	.word	0xe000ed00

0800a080 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fe fcdd 	bl	8008a4e <USBD_LL_Resume>
}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0ae:	78fa      	ldrb	r2, [r7, #3]
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe fd35 	bl	8008b22 <USBD_LL_IsoOUTIncomplete>
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0d2:	78fa      	ldrb	r2, [r7, #3]
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fe fcf1 	bl	8008abe <USBD_LL_IsoINIncomplete>
}
 800a0dc:	bf00      	nop
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fe fd47 	bl	8008b86 <USBD_LL_DevConnected>
}
 800a0f8:	bf00      	nop
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fe fd44 	bl	8008b9c <USBD_LL_DevDisconnected>
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d13c      	bne.n	800a1a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a12c:	4a20      	ldr	r2, [pc, #128]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a1e      	ldr	r2, [pc, #120]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a138:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a13c:	4b1c      	ldr	r3, [pc, #112]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a13e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a142:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a144:	4b1a      	ldr	r3, [pc, #104]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a146:	2204      	movs	r2, #4
 800a148:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a14a:	4b19      	ldr	r3, [pc, #100]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a14c:	2202      	movs	r2, #2
 800a14e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a150:	4b17      	ldr	r3, [pc, #92]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a152:	2200      	movs	r2, #0
 800a154:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a156:	4b16      	ldr	r3, [pc, #88]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a158:	2202      	movs	r2, #2
 800a15a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a15c:	4b14      	ldr	r3, [pc, #80]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a15e:	2200      	movs	r2, #0
 800a160:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a162:	4b13      	ldr	r3, [pc, #76]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a164:	2200      	movs	r2, #0
 800a166:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a168:	4b11      	ldr	r3, [pc, #68]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a16e:	4b10      	ldr	r3, [pc, #64]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a170:	2200      	movs	r2, #0
 800a172:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a174:	4b0e      	ldr	r3, [pc, #56]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a176:	2200      	movs	r2, #0
 800a178:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a17a:	480d      	ldr	r0, [pc, #52]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a17c:	f7f8 fabb 	bl	80026f6 <HAL_PCD_Init>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a186:	f7f7 f98b 	bl	80014a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a18a:	2180      	movs	r1, #128	@ 0x80
 800a18c:	4808      	ldr	r0, [pc, #32]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a18e:	f7f9 fce8 	bl	8003b62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a192:	2240      	movs	r2, #64	@ 0x40
 800a194:	2100      	movs	r1, #0
 800a196:	4806      	ldr	r0, [pc, #24]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a198:	f7f9 fc9c 	bl	8003ad4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a19c:	2280      	movs	r2, #128	@ 0x80
 800a19e:	2101      	movs	r1, #1
 800a1a0:	4803      	ldr	r0, [pc, #12]	@ (800a1b0 <USBD_LL_Init+0x94>)
 800a1a2:	f7f9 fc97 	bl	8003ad4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	20001910 	.word	0x20001910

0800a1b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7f8 fba2 	bl	8002914 <HAL_PCD_Start>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 f942 	bl	800a460 <USBD_Get_USB_Status>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b084      	sub	sp, #16
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	4608      	mov	r0, r1
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	70fb      	strb	r3, [r7, #3]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70bb      	strb	r3, [r7, #2]
 800a200:	4613      	mov	r3, r2
 800a202:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a212:	78bb      	ldrb	r3, [r7, #2]
 800a214:	883a      	ldrh	r2, [r7, #0]
 800a216:	78f9      	ldrb	r1, [r7, #3]
 800a218:	f7f9 f876 	bl	8003308 <HAL_PCD_EP_Open>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 f91c 	bl	800a460 <USBD_Get_USB_Status>
 800a228:	4603      	mov	r3, r0
 800a22a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b084      	sub	sp, #16
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	460b      	mov	r3, r1
 800a240:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a250:	78fa      	ldrb	r2, [r7, #3]
 800a252:	4611      	mov	r1, r2
 800a254:	4618      	mov	r0, r3
 800a256:	f7f9 f8c1 	bl	80033dc <HAL_PCD_EP_Close>
 800a25a:	4603      	mov	r3, r0
 800a25c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	4618      	mov	r0, r3
 800a262:	f000 f8fd 	bl	800a460 <USBD_Get_USB_Status>
 800a266:	4603      	mov	r3, r0
 800a268:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a28e:	78fa      	ldrb	r2, [r7, #3]
 800a290:	4611      	mov	r1, r2
 800a292:	4618      	mov	r0, r3
 800a294:	f7f9 f979 	bl	800358a <HAL_PCD_EP_SetStall>
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 f8de 	bl	800a460 <USBD_Get_USB_Status>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2cc:	78fa      	ldrb	r2, [r7, #3]
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7f9 f9bd 	bl	8003650 <HAL_PCD_EP_ClrStall>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 f8bf 	bl	800a460 <USBD_Get_USB_Status>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a302:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	da0b      	bge.n	800a324 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a30c:	78fb      	ldrb	r3, [r7, #3]
 800a30e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a312:	68f9      	ldr	r1, [r7, #12]
 800a314:	4613      	mov	r3, r2
 800a316:	00db      	lsls	r3, r3, #3
 800a318:	4413      	add	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	440b      	add	r3, r1
 800a31e:	3316      	adds	r3, #22
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	e00b      	b.n	800a33c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a324:	78fb      	ldrb	r3, [r7, #3]
 800a326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a32a:	68f9      	ldr	r1, [r7, #12]
 800a32c:	4613      	mov	r3, r2
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	440b      	add	r3, r1
 800a336:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a33a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	460b      	mov	r3, r1
 800a352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a362:	78fa      	ldrb	r2, [r7, #3]
 800a364:	4611      	mov	r1, r2
 800a366:	4618      	mov	r0, r3
 800a368:	f7f8 ffaa 	bl	80032c0 <HAL_PCD_SetAddress>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	4618      	mov	r0, r3
 800a374:	f000 f874 	bl	800a460 <USBD_Get_USB_Status>
 800a378:	4603      	mov	r3, r0
 800a37a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b086      	sub	sp, #24
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	60f8      	str	r0, [r7, #12]
 800a38e:	607a      	str	r2, [r7, #4]
 800a390:	603b      	str	r3, [r7, #0]
 800a392:	460b      	mov	r3, r1
 800a394:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a3a4:	7af9      	ldrb	r1, [r7, #11]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	f7f9 f8b4 	bl	8003516 <HAL_PCD_EP_Transmit>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 f853 	bl	800a460 <USBD_Get_USB_Status>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3be:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	607a      	str	r2, [r7, #4]
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a3e6:	7af9      	ldrb	r1, [r7, #11]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	f7f9 f840 	bl	8003470 <HAL_PCD_EP_Receive>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 f832 	bl	800a460 <USBD_Get_USB_Status>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a400:	7dbb      	ldrb	r3, [r7, #22]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a41c:	78fa      	ldrb	r2, [r7, #3]
 800a41e:	4611      	mov	r1, r2
 800a420:	4618      	mov	r0, r3
 800a422:	f7f9 f860 	bl	80034e6 <HAL_PCD_EP_GetRxCount>
 800a426:	4603      	mov	r3, r0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a438:	4b03      	ldr	r3, [pc, #12]	@ (800a448 <USBD_static_malloc+0x18>)
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	370c      	adds	r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	20001df4 	.word	0x20001df4

0800a44c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]

}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a46a:	2300      	movs	r3, #0
 800a46c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a46e:	79fb      	ldrb	r3, [r7, #7]
 800a470:	2b03      	cmp	r3, #3
 800a472:	d817      	bhi.n	800a4a4 <USBD_Get_USB_Status+0x44>
 800a474:	a201      	add	r2, pc, #4	@ (adr r2, 800a47c <USBD_Get_USB_Status+0x1c>)
 800a476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47a:	bf00      	nop
 800a47c:	0800a48d 	.word	0x0800a48d
 800a480:	0800a493 	.word	0x0800a493
 800a484:	0800a499 	.word	0x0800a499
 800a488:	0800a49f 	.word	0x0800a49f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73fb      	strb	r3, [r7, #15]
    break;
 800a490:	e00b      	b.n	800a4aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a492:	2303      	movs	r3, #3
 800a494:	73fb      	strb	r3, [r7, #15]
    break;
 800a496:	e008      	b.n	800a4aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a498:	2301      	movs	r3, #1
 800a49a:	73fb      	strb	r3, [r7, #15]
    break;
 800a49c:	e005      	b.n	800a4aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a2:	e002      	b.n	800a4aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a8:	bf00      	nop
  }
  return usb_status;
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <memset>:
 800a4b8:	4402      	add	r2, r0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d100      	bne.n	800a4c2 <memset+0xa>
 800a4c0:	4770      	bx	lr
 800a4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4c6:	e7f9      	b.n	800a4bc <memset+0x4>

0800a4c8 <__libc_init_array>:
 800a4c8:	b570      	push	{r4, r5, r6, lr}
 800a4ca:	4d0d      	ldr	r5, [pc, #52]	@ (800a500 <__libc_init_array+0x38>)
 800a4cc:	4c0d      	ldr	r4, [pc, #52]	@ (800a504 <__libc_init_array+0x3c>)
 800a4ce:	1b64      	subs	r4, r4, r5
 800a4d0:	10a4      	asrs	r4, r4, #2
 800a4d2:	2600      	movs	r6, #0
 800a4d4:	42a6      	cmp	r6, r4
 800a4d6:	d109      	bne.n	800a4ec <__libc_init_array+0x24>
 800a4d8:	4d0b      	ldr	r5, [pc, #44]	@ (800a508 <__libc_init_array+0x40>)
 800a4da:	4c0c      	ldr	r4, [pc, #48]	@ (800a50c <__libc_init_array+0x44>)
 800a4dc:	f000 f826 	bl	800a52c <_init>
 800a4e0:	1b64      	subs	r4, r4, r5
 800a4e2:	10a4      	asrs	r4, r4, #2
 800a4e4:	2600      	movs	r6, #0
 800a4e6:	42a6      	cmp	r6, r4
 800a4e8:	d105      	bne.n	800a4f6 <__libc_init_array+0x2e>
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f0:	4798      	blx	r3
 800a4f2:	3601      	adds	r6, #1
 800a4f4:	e7ee      	b.n	800a4d4 <__libc_init_array+0xc>
 800a4f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4fa:	4798      	blx	r3
 800a4fc:	3601      	adds	r6, #1
 800a4fe:	e7f2      	b.n	800a4e6 <__libc_init_array+0x1e>
 800a500:	0800a5b4 	.word	0x0800a5b4
 800a504:	0800a5b4 	.word	0x0800a5b4
 800a508:	0800a5b4 	.word	0x0800a5b4
 800a50c:	0800a5b8 	.word	0x0800a5b8

0800a510 <memcpy>:
 800a510:	440a      	add	r2, r1
 800a512:	4291      	cmp	r1, r2
 800a514:	f100 33ff 	add.w	r3, r0, #4294967295
 800a518:	d100      	bne.n	800a51c <memcpy+0xc>
 800a51a:	4770      	bx	lr
 800a51c:	b510      	push	{r4, lr}
 800a51e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a522:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a526:	4291      	cmp	r1, r2
 800a528:	d1f9      	bne.n	800a51e <memcpy+0xe>
 800a52a:	bd10      	pop	{r4, pc}

0800a52c <_init>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	bf00      	nop
 800a530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a532:	bc08      	pop	{r3}
 800a534:	469e      	mov	lr, r3
 800a536:	4770      	bx	lr

0800a538 <_fini>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	bf00      	nop
 800a53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53e:	bc08      	pop	{r3}
 800a540:	469e      	mov	lr, r3
 800a542:	4770      	bx	lr
