
USB_to_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091f0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009388  08009388  0000a388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093f0  080093f0  0000b0fc  2**0
                  CONTENTS
  4 .ARM          00000008  080093f0  080093f0  0000a3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093f8  080093f8  0000b0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093f8  080093f8  0000a3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093fc  080093fc  0000a3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08009400  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ed4  200000fc  080094fc  0000b0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fd0  080094fc  0000bfd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015802  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be3  00000000  00000000  0002092e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00024518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd3  00000000  00000000  00025618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005781  00000000  00000000  000262eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d80  00000000  00000000  0002ba6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb64  00000000  00000000  000437ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b0  00000000  00000000  000cf394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d3844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009370 	.word	0x08009370

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08009370 	.word	0x08009370

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Coms_IncIdx>:

#include "Coms_Handler.h"
#include "usbd_cdc_if.h"
#include "usart.h"

static void Coms_IncIdx(uint8_t *idx) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	(*idx)++;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	701a      	strb	r2, [r3, #0]
	if(*idx >= FIFO_SIZE) (*idx) = 0;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b07      	cmp	r3, #7
 80004e2:	d902      	bls.n	80004ea <Coms_IncIdx+0x22>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <ComsHandler_PacketToBuf>:

static void ComsHandler_PacketToBuf(DecodedPacket_t *packet, StringBuffer_t *buffer) {
 80004f6:	b480      	push	{r7}
 80004f8:	b085      	sub	sp, #20
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]

	if(packet->invalid) return;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	7adb      	ldrb	r3, [r3, #11]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d14c      	bne.n	80005a2 <ComsHandler_PacketToBuf+0xac>
	buffer->length = 5 + packet->length;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	7a9b      	ldrb	r3, [r3, #10]
 800050c:	3305      	adds	r3, #5
 800050e:	b2da      	uxtb	r2, r3
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	701a      	strb	r2, [r3, #0]

	buffer->data[0] = START_BYTE;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	22aa      	movs	r2, #170	@ 0xaa
 8000518:	705a      	strb	r2, [r3, #1]
	buffer->data[1] = packet->length;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	7a9a      	ldrb	r2, [r3, #10]
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	709a      	strb	r2, [r3, #2]
	buffer->data[2] = (packet->command & 0xFF00) >> 8;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	0a1b      	lsrs	r3, r3, #8
 8000528:	b29b      	uxth	r3, r3
 800052a:	b2da      	uxtb	r2, r3
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	70da      	strb	r2, [r3, #3]
	buffer->data[3] = packet->command & 0x00FF;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	b2da      	uxtb	r2, r3
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 800053a:	2304      	movs	r3, #4
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	e00c      	b.n	800055a <ComsHandler_PacketToBuf+0x64>
		buffer->data[i] = packet->data[i-4];
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	1f1a      	subs	r2, r3, #4
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	440a      	add	r2, r1
 800054a:	7891      	ldrb	r1, [r2, #2]
 800054c:	683a      	ldr	r2, [r7, #0]
 800054e:	4413      	add	r3, r2
 8000550:	460a      	mov	r2, r1
 8000552:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 4; i < (buffer->length - 1); i++) {
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	3301      	adds	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
 800055a:	7bfa      	ldrb	r2, [r7, #15]
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	3b01      	subs	r3, #1
 8000562:	429a      	cmp	r2, r3
 8000564:	dbec      	blt.n	8000540 <ComsHandler_PacketToBuf+0x4a>
	}

	uint8_t checksum = buffer->data[0];
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	785b      	ldrb	r3, [r3, #1]
 800056a:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 800056c:	2301      	movs	r3, #1
 800056e:	737b      	strb	r3, [r7, #13]
 8000570:	e009      	b.n	8000586 <ComsHandler_PacketToBuf+0x90>
		checksum ^= buffer->data[i];
 8000572:	7b7b      	ldrb	r3, [r7, #13]
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	4413      	add	r3, r2
 8000578:	785a      	ldrb	r2, [r3, #1]
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	4053      	eors	r3, r2
 800057e:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 1; i < (buffer->length - 1); i++) {
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	3301      	adds	r3, #1
 8000584:	737b      	strb	r3, [r7, #13]
 8000586:	7b7a      	ldrb	r2, [r7, #13]
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	429a      	cmp	r2, r3
 8000590:	dbef      	blt.n	8000572 <ComsHandler_PacketToBuf+0x7c>
	}

	buffer->data[buffer->length - 1] = checksum;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	3b01      	subs	r3, #1
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	4413      	add	r3, r2
 800059c:	7bba      	ldrb	r2, [r7, #14]
 800059e:	705a      	strb	r2, [r3, #1]
 80005a0:	e000      	b.n	80005a4 <ComsHandler_PacketToBuf+0xae>
	if(packet->invalid) return;
 80005a2:	bf00      	nop
}
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <ComsHandler_BufToPacket>:

static void ComsHandler_BufToPacket(DecodedPacket_t *packet, void *buf) {
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b086      	sub	sp, #24
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]

	StringBuffer_t *buffer = (StringBuffer_t *)buf;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	60fb      	str	r3, [r7, #12]

	uint8_t length = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	75fb      	strb	r3, [r7, #23]

	memset(packet->data, 0, MAX_DATA_SIZE);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3302      	adds	r3, #2
 80005c4:	2208      	movs	r2, #8
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f008 fe97 	bl	80092fc <memset>

	packet->invalid = false;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	72da      	strb	r2, [r3, #11]

    if (buffer->data[0] != START_BYTE) {
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	2baa      	cmp	r3, #170	@ 0xaa
 80005da:	d002      	beq.n	80005e2 <ComsHandler_BufToPacket+0x34>
    	packet->invalid = true; // Invalid start byte, discard packet
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2201      	movs	r2, #1
 80005e0:	72da      	strb	r2, [r3, #11]
    }

    packet->length = buffer->data[1];
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	789a      	ldrb	r2, [r3, #2]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	729a      	strb	r2, [r3, #10]
    if (buffer->data[1] > MAX_DATA_SIZE) {
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	789b      	ldrb	r3, [r3, #2]
 80005ee:	2b08      	cmp	r3, #8
 80005f0:	d905      	bls.n	80005fe <ComsHandler_BufToPacket+0x50>
		packet->invalid = true;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2201      	movs	r2, #1
 80005f6:	72da      	strb	r2, [r3, #11]
		packet->length = 0;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	729a      	strb	r2, [r3, #10]
	}

    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 80005fe:	230c      	movs	r3, #12
 8000600:	75bb      	strb	r3, [r7, #22]
 8000602:	e00b      	b.n	800061c <ComsHandler_BufToPacket+0x6e>
    	if(buffer->data[i] != 0) {
 8000604:	7dbb      	ldrb	r3, [r7, #22]
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	785b      	ldrb	r3, [r3, #1]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <ComsHandler_BufToPacket+0x68>
    		length = i;
 8000610:	7dbb      	ldrb	r3, [r7, #22]
 8000612:	75fb      	strb	r3, [r7, #23]
    		break;
 8000614:	e005      	b.n	8000622 <ComsHandler_BufToPacket+0x74>
    for(uint8_t i = (MAX_BUF_SIZE - 1); i > 1 ; i--) {
 8000616:	7dbb      	ldrb	r3, [r7, #22]
 8000618:	3b01      	subs	r3, #1
 800061a:	75bb      	strb	r3, [r7, #22]
 800061c:	7dbb      	ldrb	r3, [r7, #22]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d8f0      	bhi.n	8000604 <ComsHandler_BufToPacket+0x56>
    	}
    }

    uint8_t checksum = buffer->data[0];
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 8000628:	2301      	movs	r3, #1
 800062a:	753b      	strb	r3, [r7, #20]
 800062c:	e009      	b.n	8000642 <ComsHandler_BufToPacket+0x94>
		checksum ^= buffer->data[i];
 800062e:	7d3b      	ldrb	r3, [r7, #20]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	4413      	add	r3, r2
 8000634:	785a      	ldrb	r2, [r3, #1]
 8000636:	7d7b      	ldrb	r3, [r7, #21]
 8000638:	4053      	eors	r3, r2
 800063a:	757b      	strb	r3, [r7, #21]
    for(uint8_t i = 1; i < length; i++) {
 800063c:	7d3b      	ldrb	r3, [r7, #20]
 800063e:	3301      	adds	r3, #1
 8000640:	753b      	strb	r3, [r7, #20]
 8000642:	7d3a      	ldrb	r2, [r7, #20]
 8000644:	7dfb      	ldrb	r3, [r7, #23]
 8000646:	429a      	cmp	r2, r3
 8000648:	d3f1      	bcc.n	800062e <ComsHandler_BufToPacket+0x80>
	}

	if(checksum != buffer->data[length]) {
 800064a:	7dfb      	ldrb	r3, [r7, #23]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	7d7a      	ldrb	r2, [r7, #21]
 8000654:	429a      	cmp	r2, r3
 8000656:	d002      	beq.n	800065e <ComsHandler_BufToPacket+0xb0>
		packet->invalid = true;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2201      	movs	r2, #1
 800065c:	72da      	strb	r2, [r3, #11]
	}

    // Populate the command structure
    packet->command = (buffer->data[2] << 8) | buffer->data[3];
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	78db      	ldrb	r3, [r3, #3]
 8000662:	021b      	lsls	r3, r3, #8
 8000664:	b21a      	sxth	r2, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	791b      	ldrb	r3, [r3, #4]
 800066a:	b21b      	sxth	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b21b      	sxth	r3, r3
 8000670:	b29a      	uxth	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	801a      	strh	r2, [r3, #0]

    if(packet->length != 0) {
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7a9b      	ldrb	r3, [r3, #10]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d014      	beq.n	80006a8 <ComsHandler_BufToPacket+0xfa>
    	for(uint8_t i = 0; i < packet->length; i++) {
 800067e:	2300      	movs	r3, #0
 8000680:	74fb      	strb	r3, [r7, #19]
 8000682:	e00c      	b.n	800069e <ComsHandler_BufToPacket+0xf0>
    		packet->data[i] = buffer->data[4+i];
 8000684:	7cfb      	ldrb	r3, [r7, #19]
 8000686:	1d1a      	adds	r2, r3, #4
 8000688:	7cfb      	ldrb	r3, [r7, #19]
 800068a:	68f9      	ldr	r1, [r7, #12]
 800068c:	440a      	add	r2, r1
 800068e:	7851      	ldrb	r1, [r2, #1]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	4413      	add	r3, r2
 8000694:	460a      	mov	r2, r1
 8000696:	709a      	strb	r2, [r3, #2]
    	for(uint8_t i = 0; i < packet->length; i++) {
 8000698:	7cfb      	ldrb	r3, [r7, #19]
 800069a:	3301      	adds	r3, #1
 800069c:	74fb      	strb	r3, [r7, #19]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	7a9b      	ldrb	r3, [r3, #10]
 80006a2:	7cfa      	ldrb	r2, [r7, #19]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d3ed      	bcc.n	8000684 <ComsHandler_BufToPacket+0xd6>
    	}
    }
}
 80006a8:	bf00      	nop
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <UART_Send>:

// UART Send Function
static HAL_StatusTypeDef UART_Send(void *config, DecodedPacket_t *packet)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)config;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	61fb      	str	r3, [r7, #28]

    StringBuffer_t buf;

    ComsHandler_PacketToBuf(packet, &buf);
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4619      	mov	r1, r3
 80006c4:	6838      	ldr	r0, [r7, #0]
 80006c6:	f7ff ff16 	bl	80004f6 <ComsHandler_PacketToBuf>

    return HAL_UART_Transmit(huart, buf.data, buf.length, HAL_MAX_DELAY);
 80006ca:	7b3b      	ldrb	r3, [r7, #12]
 80006cc:	461a      	mov	r2, r3
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	1c59      	adds	r1, r3, #1
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	69f8      	ldr	r0, [r7, #28]
 80006da:	f003 fc08 	bl	8003eee <HAL_UART_Transmit>
 80006de:	4603      	mov	r3, r0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <UART_SetupReceive>:

// UART Receive Function
//All data will be recieved in interrupt callback. this function will place the data in the appropriate buffer

static HAL_StatusTypeDef UART_SetupReceive(void *inst)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	60fb      	str	r3, [r7, #12]
    UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80006fa:	60bb      	str	r3, [r7, #8]

    memset(instance->rxBuf[instance->rxIdx].data, 0, MAX_BUF_SIZE);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4613      	mov	r3, r2
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	3360      	adds	r3, #96	@ 0x60
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	4413      	add	r3, r2
 8000710:	3305      	adds	r3, #5
 8000712:	220d      	movs	r2, #13
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f008 fdf0 	bl	80092fc <memset>
    HAL_UARTEx_ReceiveToIdle_DMA(huart, instance->rxBuf[instance->rxIdx].data, MAX_BUF_SIZE);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4613      	mov	r3, r2
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	1a9b      	subs	r3, r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	3360      	adds	r3, #96	@ 0x60
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	3305      	adds	r3, #5
 8000732:	220d      	movs	r2, #13
 8000734:	4619      	mov	r1, r3
 8000736:	68b8      	ldr	r0, [r7, #8]
 8000738:	f003 fc64 	bl	8004004 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(DMA_UART_HANDLE, DMA_IT_HT);
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <UART_SetupReceive+0x70>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <UART_SetupReceive+0x70>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f022 0208 	bic.w	r2, r2, #8
 800074a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000388 	.word	0x20000388

0800075c <UART_Receive>:

static HAL_StatusTypeDef UART_Receive(void *inst, uint8_t *data, uint16_t length)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	4613      	mov	r3, r2
 8000768:	80fb      	strh	r3, [r7, #6]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	617b      	str	r3, [r7, #20]
    //UART_HandleTypeDef *huart = (UART_HandleTypeDef *)instance->config;

    instance->rxBuf[instance->rxIdx].length = length;
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4619      	mov	r1, r3
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	b2d8      	uxtb	r0, r3
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	460b      	mov	r3, r1
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	1a5b      	subs	r3, r3, r1
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	3364      	adds	r3, #100	@ 0x64
 8000786:	4602      	mov	r2, r0
 8000788:	701a      	strb	r2, [r3, #0]

    Coms_IncIdx(&instance->rxIdx);
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fe9b 	bl	80004c8 <Coms_IncIdx>

    UART_SetupReceive(inst);
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f7ff ffa8 	bl	80006e8 <UART_SetupReceive>
    //__HAL_DMA_DISABLE_IT(hdma_usart1_rx, DMA_IT_HT);

    return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <USB_Send>:



// USB Send Function
static HAL_StatusTypeDef USB_Send(void *config, DecodedPacket_t *packet)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]

	StringBuffer_t buf;

	ComsHandler_PacketToBuf(packet, &buf);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4619      	mov	r1, r3
 80007b2:	6838      	ldr	r0, [r7, #0]
 80007b4:	f7ff fe9f 	bl	80004f6 <ComsHandler_PacketToBuf>

    if (CDC_Transmit_FS(buf.data, buf.length) == USBD_OK)
 80007b8:	7a3b      	ldrb	r3, [r7, #8]
 80007ba:	461a      	mov	r2, r3
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	3301      	adds	r3, #1
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f008 f947 	bl	8008a58 <CDC_Transmit_FS>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d101      	bne.n	80007d4 <USB_Send+0x32>
        return HAL_OK;
 80007d0:	2300      	movs	r3, #0
 80007d2:	e000      	b.n	80007d6 <USB_Send+0x34>
    else
        return HAL_ERROR;
 80007d4:	2301      	movs	r3, #1
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <USB_Receive>:

// USB Receive Function (not implemented for USB CDC)
//All data will be recieved in interrupt callback. this function will place the data in the appropriate buffer
static HAL_StatusTypeDef USB_Receive(void *inst, uint8_t *data, uint16_t length)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	4613      	mov	r3, r2
 80007ea:	80fb      	strh	r3, [r7, #6]
	ComsInterface_t *instance = (ComsInterface_t *)inst;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	617b      	str	r3, [r7, #20]

	instance->rxBuf[instance->rxIdx].length = length;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	b2d8      	uxtb	r0, r3
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	460b      	mov	r3, r1
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	1a5b      	subs	r3, r3, r1
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	3364      	adds	r3, #100	@ 0x64
 8000808:	4602      	mov	r2, r0
 800080a:	701a      	strb	r2, [r3, #0]
	memset(instance->rxBuf[instance->rxIdx].data, 0, MAX_BUF_SIZE);
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4613      	mov	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	3360      	adds	r3, #96	@ 0x60
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	4413      	add	r3, r2
 8000820:	3305      	adds	r3, #5
 8000822:	220d      	movs	r2, #13
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f008 fd68 	bl	80092fc <memset>
	memcpy(instance->rxBuf[instance->rxIdx].data, data, length);
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4613      	mov	r3, r2
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	1a9b      	subs	r3, r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	3360      	adds	r3, #96	@ 0x60
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	4413      	add	r3, r2
 8000840:	3305      	adds	r3, #5
 8000842:	88fa      	ldrh	r2, [r7, #6]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	4618      	mov	r0, r3
 8000848:	f008 fd84 	bl	8009354 <memcpy>

	Coms_IncIdx(&instance->rxIdx);
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fe3a 	bl	80004c8 <Coms_IncIdx>

    return HAL_OK;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <CAN_Send>:

// CAN Send Function
static HAL_StatusTypeDef CAN_Send(void *config, DecodedPacket_t *packet)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]

    // Only include data bytes 5 to N-1
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, &data[4]);
#endif

	return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <CAN_Receive>:

// CAN Receive Function
//going to be handled in an interrupt as with the all receive functions
static HAL_StatusTypeDef CAN_Receive(void *config, uint8_t *data, uint16_t length)
{
 8000876:	b480      	push	{r7}
 8000878:	b085      	sub	sp, #20
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	4613      	mov	r3, r2
 8000882:	80fb      	strh	r3, [r7, #6]
    data[3] = rxHeader.Identifier & 0xFF;       // Header byte 2
    for (uint8_t i = 0; i < dlc; i++) {
        data[4 + i] = canData[i];
    }
#endif
    return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <Comm_Init>:

// Initialize Communication Instance
void Comm_Init(ComsInterface_t *instance, CommType type, void *config)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	460b      	mov	r3, r1
 800089e:	607a      	str	r2, [r7, #4]
 80008a0:	72fb      	strb	r3, [r7, #11]
    instance->type = type;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	7afa      	ldrb	r2, [r7, #11]
 80008a6:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    instance->config = config;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    instance->decodeIdx = 0;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2200      	movs	r2, #0
 80008b6:	705a      	strb	r2, [r3, #1]
    instance->rxIdx = 0;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
    instance->processIdx = 0;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2200      	movs	r2, #0
 80008c2:	709a      	strb	r2, [r3, #2]

    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	75fb      	strb	r3, [r7, #23]
 80008c8:	e00c      	b.n	80008e4 <Comm_Init+0x50>
    	instance->rxPacket[i].invalid = true;
 80008ca:	7dfa      	ldrb	r2, [r7, #23]
 80008cc:	68f9      	ldr	r1, [r7, #12]
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	440b      	add	r3, r1
 80008d8:	330f      	adds	r3, #15
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < FIFO_SIZE; i++) {
 80008de:	7dfb      	ldrb	r3, [r7, #23]
 80008e0:	3301      	adds	r3, #1
 80008e2:	75fb      	strb	r3, [r7, #23]
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	2b07      	cmp	r3, #7
 80008e8:	d9ef      	bls.n	80008ca <Comm_Init+0x36>
    }

    if (type == COMM_UART) {
 80008ea:	7afb      	ldrb	r3, [r7, #11]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d10b      	bne.n	8000908 <Comm_Init+0x74>
        instance->interface.Send = UART_Send;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4a18      	ldr	r2, [pc, #96]	@ (8000954 <Comm_Init+0xc0>)
 80008f4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->interface.Receive = UART_Receive;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4a17      	ldr	r2, [pc, #92]	@ (8000958 <Comm_Init+0xc4>)
 80008fc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        UART_SetupReceive(instance);
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f7ff fef1 	bl	80006e8 <UART_SetupReceive>
 8000906:	e016      	b.n	8000936 <Comm_Init+0xa2>
    } else if (type == COMM_USB) {
 8000908:	7afb      	ldrb	r3, [r7, #11]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d108      	bne.n	8000920 <Comm_Init+0x8c>
        instance->interface.Send = USB_Send;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	4a12      	ldr	r2, [pc, #72]	@ (800095c <Comm_Init+0xc8>)
 8000912:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->interface.Receive = USB_Receive;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4a11      	ldr	r2, [pc, #68]	@ (8000960 <Comm_Init+0xcc>)
 800091a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 800091e:	e00a      	b.n	8000936 <Comm_Init+0xa2>
    } else if (type == COMM_CAN) {
 8000920:	7afb      	ldrb	r3, [r7, #11]
 8000922:	2b02      	cmp	r3, #2
 8000924:	d107      	bne.n	8000936 <Comm_Init+0xa2>
        instance->interface.Send = CAN_Send;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4a0e      	ldr	r2, [pc, #56]	@ (8000964 <Comm_Init+0xd0>)
 800092a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->interface.Receive = CAN_Receive;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <Comm_Init+0xd4>)
 8000932:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if (type == COMM_UART || type == COMM_USB) {
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d002      	beq.n	8000942 <Comm_Init+0xae>
 800093c:	7afb      	ldrb	r3, [r7, #11]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d103      	bne.n	800094a <Comm_Init+0xb6>
    	instance->interface.ConvertToPacket = ComsHandler_BufToPacket;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4a09      	ldr	r2, [pc, #36]	@ (800096c <Comm_Init+0xd8>)
 8000946:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    } else if (type == COMM_CAN) {

    }
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	080006b1 	.word	0x080006b1
 8000958:	0800075d 	.word	0x0800075d
 800095c:	080007a3 	.word	0x080007a3
 8000960:	080007df 	.word	0x080007df
 8000964:	0800085f 	.word	0x0800085f
 8000968:	08000877 	.word	0x08000877
 800096c:	080005af 	.word	0x080005af

08000970 <Comm_Send>:

// Wrapper for Sending Data
HAL_StatusTypeDef Comm_Send(ComsInterface_t *instance, DecodedPacket_t *packet)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	if(packet->invalid) return HAL_ERROR;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	7adb      	ldrb	r3, [r3, #11]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <Comm_Send+0x16>
 8000982:	2301      	movs	r3, #1
 8000984:	e009      	b.n	800099a <Comm_Send+0x2a>

    return instance->interface.Send(instance->config, packet);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 8000992:	6839      	ldr	r1, [r7, #0]
 8000994:	4610      	mov	r0, r2
 8000996:	4798      	blx	r3
 8000998:	4603      	mov	r3, r0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <Comm_Receive>:

// Wrapper for Receiving Data
HAL_StatusTypeDef Comm_Receive(ComsInterface_t *instance, uint8_t *data, uint16_t length)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	4613      	mov	r3, r2
 80009ae:	80fb      	strh	r3, [r7, #6]
    return instance->interface.Receive(instance, data, length);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80009b6:	88fa      	ldrh	r2, [r7, #6]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	4798      	blx	r3
 80009be:	4603      	mov	r3, r0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <Comm_Process>:

void Comm_Process(ComsInterface_t *instance) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

	if(instance->decodeIdx == instance->rxIdx) return;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	785a      	ldrb	r2, [r3, #1]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d022      	beq.n	8000a22 <Comm_Process+0x5a>
	instance->interface.ConvertToPacket(&instance->rxPacket[instance->decodeIdx],&instance->rxBuf[instance->decodeIdx]);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	4619      	mov	r1, r3
 80009e8:	460b      	mov	r3, r1
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	440b      	add	r3, r1
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	440b      	add	r3, r1
 80009f4:	1d18      	adds	r0, r3, #4
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	785b      	ldrb	r3, [r3, #1]
 80009fa:	4619      	mov	r1, r3
 80009fc:	460b      	mov	r3, r1
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	1a5b      	subs	r3, r3, r1
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	3360      	adds	r3, #96	@ 0x60
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	440b      	add	r3, r1
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4790      	blx	r2
	Coms_IncIdx(&instance->decodeIdx);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3301      	adds	r3, #1
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fd57 	bl	80004c8 <Coms_IncIdx>
	Comm_Process(instance);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ffd4 	bl	80009c8 <Comm_Process>
 8000a20:	e000      	b.n	8000a24 <Comm_Process+0x5c>
	if(instance->decodeIdx == instance->rxIdx) return;
 8000a22:	bf00      	nop
}
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <Comm_GetPacket>:

DecodedPacket_t Comm_GetPacket(ComsInterface_t *instance) {
 8000a2a:	b590      	push	{r4, r7, lr}
 8000a2c:	b087      	sub	sp, #28
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6039      	str	r1, [r7, #0]
	DecodedPacket_t invalidPacket = {
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	2301      	movs	r3, #1
 8000a42:	74fb      	strb	r3, [r7, #19]
			.invalid = true
	};
	if(instance->decodeIdx == instance->processIdx) {
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	785a      	ldrb	r2, [r3, #1]
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	789b      	ldrb	r3, [r3, #2]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d108      	bne.n	8000a62 <Comm_GetPacket+0x38>
		return invalidPacket;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	461c      	mov	r4, r3
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a5a:	6020      	str	r0, [r4, #0]
 8000a5c:	6061      	str	r1, [r4, #4]
 8000a5e:	60a2      	str	r2, [r4, #8]
 8000a60:	e015      	b.n	8000a8e <Comm_GetPacket+0x64>
	}
	uint8_t idx = instance->processIdx;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	789b      	ldrb	r3, [r3, #2]
 8000a66:	75fb      	strb	r3, [r7, #23]

	Coms_IncIdx(&instance->processIdx);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fd2b 	bl	80004c8 <Coms_IncIdx>

	return instance->rxPacket[idx];
 8000a72:	7dfa      	ldrb	r2, [r7, #23]
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	6839      	ldr	r1, [r7, #0]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	440b      	add	r3, r1
 8000a82:	4604      	mov	r4, r0
 8000a84:	3304      	adds	r3, #4
 8000a86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a88:	6020      	str	r0, [r4, #0]
 8000a8a:	6061      	str	r1, [r4, #4]
 8000a8c:	60a2      	str	r2, [r4, #8]
}
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	371c      	adds	r7, #28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd90      	pop	{r4, r7, pc}
	...

08000a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_DMA_Init+0x3c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad4 <MX_DMA_Init+0x3c>)
 8000aa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_DMA_Init+0x3c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	203a      	movs	r0, #58	@ 0x3a
 8000ac0:	f000 fcbb 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ac4:	203a      	movs	r0, #58	@ 0x3a
 8000ac6:	f000 fcd4 	bl	8001472 <HAL_NVIC_EnableIRQ>

}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b37      	ldr	r3, [pc, #220]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a36      	ldr	r2, [pc, #216]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b34      	ldr	r3, [pc, #208]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b30      	ldr	r3, [pc, #192]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a2f      	ldr	r2, [pc, #188]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a28      	ldr	r2, [pc, #160]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b22      	ldr	r3, [pc, #136]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a21      	ldr	r2, [pc, #132]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_GPIO_Init+0xf8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLED_GPIO_Port, nLED_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b64:	481b      	ldr	r0, [pc, #108]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b66:	f001 fa25 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_MCP_GPIO_Port, nCS_MCP_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2140      	movs	r1, #64	@ 0x40
 8000b6e:	481a      	ldr	r0, [pc, #104]	@ (8000bd8 <MX_GPIO_Init+0x100>)
 8000b70:	f001 fa20 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nLED_Pin;
 8000b74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nLED_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4811      	ldr	r0, [pc, #68]	@ (8000bd4 <MX_GPIO_Init+0xfc>)
 8000b8e:	f001 f88d 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MCP_Pin;
 8000b92:	2304      	movs	r3, #4
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MCP_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <MX_GPIO_Init+0x100>)
 8000ba8:	f001 f880 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_MCP_Pin;
 8000bac:	2340      	movs	r3, #64	@ 0x40
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nCS_MCP_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_GPIO_Init+0x100>)
 8000bc4:	f001 f872 	bl	8001cac <HAL_GPIO_Init>

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	@ 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be2:	f000 fab9 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be6:	f000 f847 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bea:	f7ff ff75 	bl	8000ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bee:	f7ff ff53 	bl	8000a98 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000bf2:	f007 fe65 	bl	80088c0 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000bf6:	f000 f9d7 	bl	8000fa8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000bfa:	f000 f8cf 	bl	8000d9c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //CANSPI_Initialize();
  Comm_Init(&usb, COMM_USB, NULL);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2101      	movs	r1, #1
 8000c02:	481a      	ldr	r0, [pc, #104]	@ (8000c6c <main+0x90>)
 8000c04:	f7ff fe46 	bl	8000894 <Comm_Init>
  Comm_Init(&serial, COMM_UART, &huart1);
 8000c08:	4a19      	ldr	r2, [pc, #100]	@ (8000c70 <main+0x94>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4819      	ldr	r0, [pc, #100]	@ (8000c74 <main+0x98>)
 8000c0e:	f7ff fe41 	bl	8000894 <Comm_Init>
  while (1)
  {

	  DecodedPacket_t input;
	  DecodedPacket_t response;
	  Comm_Process(&usb);
 8000c12:	4816      	ldr	r0, [pc, #88]	@ (8000c6c <main+0x90>)
 8000c14:	f7ff fed8 	bl	80009c8 <Comm_Process>
	  Comm_Process(&serial);
 8000c18:	4816      	ldr	r0, [pc, #88]	@ (8000c74 <main+0x98>)
 8000c1a:	f7ff fed5 	bl	80009c8 <Comm_Process>

	  input = Comm_GetPacket(&usb);
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4912      	ldr	r1, [pc, #72]	@ (8000c6c <main+0x90>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff01 	bl	8000a2a <Comm_GetPacket>
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	463a      	mov	r2, r7
 8000c2e:	6810      	ldr	r0, [r2, #0]
 8000c30:	6851      	ldr	r1, [r2, #4]
 8000c32:	6892      	ldr	r2, [r2, #8]
 8000c34:	c307      	stmia	r3!, {r0, r1, r2}
	  Comm_Send(&serial, &input);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <main+0x98>)
 8000c3e:	f7ff fe97 	bl	8000970 <Comm_Send>

	  response = Comm_GetPacket(&serial);
 8000c42:	463b      	mov	r3, r7
 8000c44:	490b      	ldr	r1, [pc, #44]	@ (8000c74 <main+0x98>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff feef 	bl	8000a2a <Comm_GetPacket>
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	463a      	mov	r2, r7
 8000c52:	6810      	ldr	r0, [r2, #0]
 8000c54:	6851      	ldr	r1, [r2, #4]
 8000c56:	6892      	ldr	r2, [r2, #8]
 8000c58:	c307      	stmia	r3!, {r0, r1, r2}
	  Comm_Send(&usb, &response);
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <main+0x90>)
 8000c62:	f7ff fe85 	bl	8000970 <Comm_Send>
  {
 8000c66:	bf00      	nop
 8000c68:	e7d3      	b.n	8000c12 <main+0x36>
 8000c6a:	bf00      	nop
 8000c6c:	20000118 	.word	0x20000118
 8000c70:	20000340 	.word	0x20000340
 8000c74:	20000200 	.word	0x20000200

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b094      	sub	sp, #80	@ 0x50
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	2230      	movs	r2, #48	@ 0x30
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f008 fb38 	bl	80092fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <SystemClock_Config+0xc8>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	4a26      	ldr	r2, [pc, #152]	@ (8000d40 <SystemClock_Config+0xc8>)
 8000ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cac:	4b24      	ldr	r3, [pc, #144]	@ (8000d40 <SystemClock_Config+0xc8>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <SystemClock_Config+0xcc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a20      	ldr	r2, [pc, #128]	@ (8000d44 <SystemClock_Config+0xcc>)
 8000cc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <SystemClock_Config+0xcc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ce8:	2319      	movs	r3, #25
 8000cea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cec:	23c0      	movs	r3, #192	@ 0xc0
 8000cee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 fbc5 	bl	800348c <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d08:	f000 f842 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2103      	movs	r1, #3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 fe27 	bl	800397c <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d34:	f000 f82c 	bl	8000d90 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	@ 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <USB_CDC_RxHandler>:

/* USER CODE BEGIN 4 */
void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
	Comm_Receive(&usb, Buf, Len);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	461a      	mov	r2, r3
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <USB_CDC_RxHandler+0x20>)
 8000d5c:	f7ff fe21 	bl	80009a2 <Comm_Receive>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000118 	.word	0x20000118

08000d6c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
	Comm_Receive(&serial, 0, size);
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4803      	ldr	r0, [pc, #12]	@ (8000d8c <HAL_UARTEx_RxEventCallback+0x20>)
 8000d80:	f7ff fe0f 	bl	80009a2 <Comm_Receive>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000200 	.word	0x20000200

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <Error_Handler+0x8>

08000d9c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000da0:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000da2:	4a18      	ldr	r2, [pc, #96]	@ (8000e04 <MX_SPI2_Init+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000da6:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000da8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dcc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000de8:	220a      	movs	r2, #10
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <MX_SPI2_Init+0x64>)
 8000dee:	f002 ffa5 	bl	8003d3c <HAL_SPI_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000df8:	f7ff ffca 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200002e8 	.word	0x200002e8
 8000e04:	40003800 	.word	0x40003800

08000e08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <HAL_SPI_MspInit+0x84>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d12c      	bne.n	8000e84 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <HAL_SPI_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e62:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e74:	2305      	movs	r3, #5
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <HAL_SPI_MspInit+0x8c>)
 8000e80:	f000 ff14 	bl	8001cac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	@ 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40003800 	.word	0x40003800
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020400 	.word	0x40020400

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a08      	ldr	r2, [pc, #32]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <NMI_Handler+0x4>

08000ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <MemManage_Handler+0x4>

08000f00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3e:	f000 f95d 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <USART1_IRQHandler+0x10>)
 8000f4e:	f003 f8b7 	bl	80040c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000340 	.word	0x20000340

08000f5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <DMA2_Stream2_IRQHandler+0x10>)
 8000f62:	f000 fc39 	bl	80017d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000388 	.word	0x20000388

08000f70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <OTG_FS_IRQHandler+0x10>)
 8000f76:	f001 f97a 	bl	800226e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200018cc 	.word	0x200018cc

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <MX_USART1_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fb4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	f002 ff35 	bl	8003e4e <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fea:	f7ff fed1 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000340 	.word	0x20000340
 8000ff8:	40011000 	.word	0x40011000

08000ffc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a35      	ldr	r2, [pc, #212]	@ (80010f0 <HAL_UART_MspInit+0xf4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d163      	bne.n	80010e6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <HAL_UART_MspInit+0xf8>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a33      	ldr	r2, [pc, #204]	@ (80010f4 <HAL_UART_MspInit+0xf8>)
 8001028:	f043 0310 	orr.w	r3, r3, #16
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b31      	ldr	r3, [pc, #196]	@ (80010f4 <HAL_UART_MspInit+0xf8>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <HAL_UART_MspInit+0xf8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a2c      	ldr	r2, [pc, #176]	@ (80010f4 <HAL_UART_MspInit+0xf8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <HAL_UART_MspInit+0xf8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001056:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001068:	2307      	movs	r3, #7
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4821      	ldr	r0, [pc, #132]	@ (80010f8 <HAL_UART_MspInit+0xfc>)
 8001074:	f000 fe1a 	bl	8001cac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <HAL_UART_MspInit+0x100>)
 800107a:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <HAL_UART_MspInit+0x104>)
 800107c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800107e:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <HAL_UART_MspInit+0x100>)
 8001080:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001084:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001086:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <HAL_UART_MspInit+0x100>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <HAL_UART_MspInit+0x100>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_UART_MspInit+0x100>)
 8001094:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001098:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <HAL_UART_MspInit+0x100>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <HAL_UART_MspInit+0x100>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <HAL_UART_MspInit+0x100>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_UART_MspInit+0x100>)
 80010ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HAL_UART_MspInit+0x100>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010ba:	4810      	ldr	r0, [pc, #64]	@ (80010fc <HAL_UART_MspInit+0x100>)
 80010bc:	f000 f9f4 	bl	80014a8 <HAL_DMA_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80010c6:	f7ff fe63 	bl	8000d90 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	@ (80010fc <HAL_UART_MspInit+0x100>)
 80010ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010d0:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <HAL_UART_MspInit+0x100>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2025      	movs	r0, #37	@ 0x25
 80010dc:	f000 f9ad 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010e0:	2025      	movs	r0, #37	@ 0x25
 80010e2:	f000 f9c6 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	@ 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40011000 	.word	0x40011000
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	20000388 	.word	0x20000388
 8001100:	40026440 	.word	0x40026440

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800113c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001108:	f7ff ff3c 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	@ (8001140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	@ (8001144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	@ (8001150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001132:	f008 f8eb 	bl	800930c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fd51 	bl	8000bdc <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800113c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001148:	08009400 	.word	0x08009400
  ldr r2, =_sbss
 800114c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001150:	20001fd0 	.word	0x20001fd0

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <HAL_Init+0x40>)
 8001162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <HAL_Init+0x40>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <HAL_Init+0x40>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f94f 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fe84 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f967 	bl	800148e <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 f92f 	bl	800143a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	@ (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	200003e8 	.word	0x200003e8

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200003e8 	.word	0x200003e8

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4907      	ldr	r1, [pc, #28]	@ (8001320 <__NVIC_EnableIRQ+0x38>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	@ (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	@ (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff29 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff3e 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff8e 	bl	8001378 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff31 	bl	80012e8 <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa2 	bl	80013e0 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff feb6 	bl	8001224 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e099      	b.n	80015f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e4:	e00f      	b.n	8001506 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014e6:	f7ff fe9d 	bl	8001224 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d908      	bls.n	8001506 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2220      	movs	r2, #32
 80014f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2203      	movs	r2, #3
 80014fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e078      	b.n	80015f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e8      	bne.n	80014e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <HAL_DMA_Init+0x158>)
 8001520:	4013      	ands	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001532:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4313      	orrs	r3, r2
 8001556:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155c:	2b04      	cmp	r3, #4
 800155e:	d107      	bne.n	8001570 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	4313      	orrs	r3, r2
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4313      	orrs	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f023 0307 	bic.w	r3, r3, #7
 8001586:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	4313      	orrs	r3, r2
 8001590:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	2b04      	cmp	r3, #4
 8001598:	d117      	bne.n	80015ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00e      	beq.n	80015ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 fb01 	bl	8001bb4 <DMA_CheckFifoParam>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2240      	movs	r2, #64	@ 0x40
 80015bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80015c6:	2301      	movs	r3, #1
 80015c8:	e016      	b.n	80015f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fab8 	bl	8001b48 <DMA_CalcBaseAndBitshift>
 80015d8:	4603      	mov	r3, r0
 80015da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e0:	223f      	movs	r2, #63	@ 0x3f
 80015e2:	409a      	lsls	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	f010803f 	.word	0xf010803f

08001604 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_DMA_Start_IT+0x26>
 8001626:	2302      	movs	r3, #2
 8001628:	e040      	b.n	80016ac <HAL_DMA_Start_IT+0xa8>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b01      	cmp	r3, #1
 800163c:	d12f      	bne.n	800169e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2202      	movs	r2, #2
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 fa4a 	bl	8001aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165c:	223f      	movs	r2, #63	@ 0x3f
 800165e:	409a      	lsls	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0216 	orr.w	r2, r2, #22
 8001672:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0208 	orr.w	r2, r2, #8
 800168a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e005      	b.n	80016aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016a6:	2302      	movs	r3, #2
 80016a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016c2:	f7ff fdaf 	bl	8001224 <HAL_GetTick>
 80016c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d008      	beq.n	80016e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2280      	movs	r2, #128	@ 0x80
 80016d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e052      	b.n	800178c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0216 	bic.w	r2, r2, #22
 80016f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001704:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <HAL_DMA_Abort+0x62>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0208 	bic.w	r2, r2, #8
 8001724:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001736:	e013      	b.n	8001760 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001738:	f7ff fd74 	bl	8001224 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b05      	cmp	r3, #5
 8001744:	d90c      	bls.n	8001760 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2220      	movs	r2, #32
 800174a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2203      	movs	r2, #3
 8001750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e015      	b.n	800178c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1e4      	bne.n	8001738 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	223f      	movs	r2, #63	@ 0x3f
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d004      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2280      	movs	r2, #128	@ 0x80
 80017ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00c      	b.n	80017cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2205      	movs	r2, #5
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0201 	bic.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001a20 <HAL_DMA_IRQHandler+0x248>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001a24 <HAL_DMA_IRQHandler+0x24c>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	0a9b      	lsrs	r3, r3, #10
 80017f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001802:	2208      	movs	r2, #8
 8001804:	409a      	lsls	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01a      	beq.n	8001844 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0204 	bic.w	r2, r2, #4
 800182a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001830:	2208      	movs	r2, #8
 8001832:	409a      	lsls	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001848:	2201      	movs	r2, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d012      	beq.n	800187a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001866:	2201      	movs	r2, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001872:	f043 0202 	orr.w	r2, r3, #2
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187e:	2204      	movs	r2, #4
 8001880:	409a      	lsls	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d012      	beq.n	80018b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00b      	beq.n	80018b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189c:	2204      	movs	r2, #4
 800189e:	409a      	lsls	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a8:	f043 0204 	orr.w	r2, r3, #4
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b4:	2210      	movs	r2, #16
 80018b6:	409a      	lsls	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d043      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d03c      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d2:	2210      	movs	r2, #16
 80018d4:	409a      	lsls	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d018      	beq.n	800191a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d108      	bne.n	8001908 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d024      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
 8001906:	e01f      	b.n	8001948 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01b      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
 8001918:	e016      	b.n	8001948 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d107      	bne.n	8001938 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0208 	bic.w	r2, r2, #8
 8001936:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194c:	2220      	movs	r2, #32
 800194e:	409a      	lsls	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 808f 	beq.w	8001a78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8087 	beq.w	8001a78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196e:	2220      	movs	r2, #32
 8001970:	409a      	lsls	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b05      	cmp	r3, #5
 8001980:	d136      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0216 	bic.w	r2, r2, #22
 8001990:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d103      	bne.n	80019b2 <HAL_DMA_IRQHandler+0x1da>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0208 	bic.w	r2, r2, #8
 80019c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c6:	223f      	movs	r2, #63	@ 0x3f
 80019c8:	409a      	lsls	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d07e      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
        }
        return;
 80019ee:	e079      	b.n	8001ae4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d01d      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10d      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d031      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4798      	blx	r3
 8001a1c:	e02c      	b.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
 8001a1e:	bf00      	nop
 8001a20:	20000000 	.word	0x20000000
 8001a24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d023      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
 8001a38:	e01e      	b.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10f      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0210 	bic.w	r2, r2, #16
 8001a56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d032      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d022      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2205      	movs	r2, #5
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d307      	bcc.n	8001ac0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f2      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x2cc>
 8001abe:	e000      	b.n	8001ac2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ac0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
 8001ae2:	e000      	b.n	8001ae6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ae4:	bf00      	nop
    }
  }
}
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b40      	cmp	r3, #64	@ 0x40
 8001b18:	d108      	bne.n	8001b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b2a:	e007      	b.n	8001b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3b10      	subs	r3, #16
 8001b58:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <DMA_CalcBaseAndBitshift+0x64>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b62:	4a13      	ldr	r2, [pc, #76]	@ (8001bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d909      	bls.n	8001b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b7e:	f023 0303 	bic.w	r3, r3, #3
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b88:	e007      	b.n	8001b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b92:	f023 0303 	bic.w	r3, r3, #3
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	aaaaaaab 	.word	0xaaaaaaab
 8001bb0:	080093e8 	.word	0x080093e8

08001bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d11f      	bne.n	8001c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d856      	bhi.n	8001c82 <DMA_CheckFifoParam+0xce>
 8001bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bdc <DMA_CheckFifoParam+0x28>)
 8001bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bda:	bf00      	nop
 8001bdc:	08001bed 	.word	0x08001bed
 8001be0:	08001bff 	.word	0x08001bff
 8001be4:	08001bed 	.word	0x08001bed
 8001be8:	08001c83 	.word	0x08001c83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d046      	beq.n	8001c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bfc:	e043      	b.n	8001c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c06:	d140      	bne.n	8001c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c0c:	e03d      	b.n	8001c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c16:	d121      	bne.n	8001c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d837      	bhi.n	8001c8e <DMA_CheckFifoParam+0xda>
 8001c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c24 <DMA_CheckFifoParam+0x70>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c35 	.word	0x08001c35
 8001c28:	08001c3b 	.word	0x08001c3b
 8001c2c:	08001c35 	.word	0x08001c35
 8001c30:	08001c4d 	.word	0x08001c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
      break;
 8001c38:	e030      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d025      	beq.n	8001c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c4a:	e022      	b.n	8001c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c54:	d11f      	bne.n	8001c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c5a:	e01c      	b.n	8001c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d903      	bls.n	8001c6a <DMA_CheckFifoParam+0xb6>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d003      	beq.n	8001c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c68:	e018      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6e:	e015      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00e      	beq.n	8001c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c80:	e00b      	b.n	8001c9a <DMA_CheckFifoParam+0xe6>
      break;
 8001c82:	bf00      	nop
 8001c84:	e00a      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c86:	bf00      	nop
 8001c88:	e008      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c8a:	bf00      	nop
 8001c8c:	e006      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c8e:	bf00      	nop
 8001c90:	e004      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c92:	bf00      	nop
 8001c94:	e002      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c96:	bf00      	nop
 8001c98:	e000      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	e159      	b.n	8001f7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	f040 8148 	bne.w	8001f76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d005      	beq.n	8001cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d130      	bne.n	8001d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	2203      	movs	r2, #3
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 0201 	and.w	r2, r3, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d017      	beq.n	8001d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d123      	bne.n	8001df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	08da      	lsrs	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3208      	adds	r2, #8
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80a2 	beq.w	8001f76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b57      	ldr	r3, [pc, #348]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	4a56      	ldr	r2, [pc, #344]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e42:	4b54      	ldr	r3, [pc, #336]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4e:	4a52      	ldr	r2, [pc, #328]	@ (8001f98 <HAL_GPIO_Init+0x2ec>)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a49      	ldr	r2, [pc, #292]	@ (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d019      	beq.n	8001eae <HAL_GPIO_Init+0x202>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a48      	ldr	r2, [pc, #288]	@ (8001fa0 <HAL_GPIO_Init+0x2f4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0x1fe>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a47      	ldr	r2, [pc, #284]	@ (8001fa4 <HAL_GPIO_Init+0x2f8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00d      	beq.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a46      	ldr	r2, [pc, #280]	@ (8001fa8 <HAL_GPIO_Init+0x2fc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <HAL_GPIO_Init+0x1f6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a45      	ldr	r2, [pc, #276]	@ (8001fac <HAL_GPIO_Init+0x300>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_GPIO_Init+0x1f2>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e008      	b.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e004      	b.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e002      	b.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	f002 0203 	and.w	r2, r2, #3
 8001eb6:	0092      	lsls	r2, r2, #2
 8001eb8:	4093      	lsls	r3, r2
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec0:	4935      	ldr	r1, [pc, #212]	@ (8001f98 <HAL_GPIO_Init+0x2ec>)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ece:	4b38      	ldr	r3, [pc, #224]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f1c:	4a24      	ldr	r2, [pc, #144]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f22:	4b23      	ldr	r3, [pc, #140]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f46:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f70:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2b0f      	cmp	r3, #15
 8001f80:	f67f aea2 	bls.w	8001cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3724      	adds	r7, #36	@ 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40013c00 	.word	0x40013c00

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af02      	add	r7, sp, #8
 8001fec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e101      	b.n	80021fc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f006 fe68 	bl	8008ce8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2203      	movs	r2, #3
 800201c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002026:	d102      	bne.n	800202e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f003 fa41 	bl	80054ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7c1a      	ldrb	r2, [r3, #16]
 8002040:	f88d 2000 	strb.w	r2, [sp]
 8002044:	3304      	adds	r3, #4
 8002046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002048:	f003 f920 	bl	800528c <USB_CoreInit>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2202      	movs	r2, #2
 8002056:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e0ce      	b.n	80021fc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fa39 	bl	80054dc <USB_SetCurrentMode>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0bf      	b.n	80021fc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e04a      	b.n	8002118 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	3315      	adds	r3, #21
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3314      	adds	r3, #20
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	b298      	uxth	r0, r3
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	332e      	adds	r3, #46	@ 0x2e
 80020be:	4602      	mov	r2, r0
 80020c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3318      	adds	r3, #24
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	331c      	adds	r3, #28
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	3320      	adds	r3, #32
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	3324      	adds	r3, #36	@ 0x24
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	3301      	adds	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	791b      	ldrb	r3, [r3, #4]
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3af      	bcc.n	8002082 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	e044      	b.n	80021b2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	3301      	adds	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	791b      	ldrb	r3, [r3, #4]
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d3b5      	bcc.n	8002128 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7c1a      	ldrb	r2, [r3, #16]
 80021c4:	f88d 2000 	strb.w	r2, [sp]
 80021c8:	3304      	adds	r3, #4
 80021ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021cc:	f003 f9d2 	bl	8005574 <USB_DevInit>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2202      	movs	r2, #2
 80021da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00c      	b.n	80021fc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f004 fa1c 	bl	8006632 <USB_DevDisconnect>

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_PCD_Start+0x1c>
 800221c:	2302      	movs	r3, #2
 800221e:	e022      	b.n	8002266 <HAL_PCD_Start+0x62>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d009      	beq.n	8002248 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002238:	2b01      	cmp	r3, #1
 800223a:	d105      	bne.n	8002248 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002240:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f003 f923 	bl	8005498 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f004 f9ca 	bl	80065f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800226e:	b590      	push	{r4, r7, lr}
 8002270:	b08d      	sub	sp, #52	@ 0x34
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f004 fa88 	bl	800679a <USB_GetMode>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	f040 848c 	bne.w	8002baa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f004 f9ec 	bl	8006674 <USB_ReadInterrupts>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8482 	beq.w	8002ba8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 f9d9 	bl	8006674 <USB_ReadInterrupts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d107      	bne.n	80022dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f002 0202 	and.w	r2, r2, #2
 80022da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f004 f9c7 	bl	8006674 <USB_ReadInterrupts>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b10      	cmp	r3, #16
 80022ee:	d161      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0210 	bic.w	r2, r2, #16
 80022fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f003 020f 	and.w	r2, r3, #15
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	3304      	adds	r3, #4
 800231e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	0c5b      	lsrs	r3, r3, #17
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	2b02      	cmp	r3, #2
 800232a:	d124      	bne.n	8002376 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d035      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	6a38      	ldr	r0, [r7, #32]
 800234c:	f003 fffe 	bl	800634c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800235c:	441a      	add	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800236e:	441a      	add	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	615a      	str	r2, [r3, #20]
 8002374:	e016      	b.n	80023a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	0c5b      	lsrs	r3, r3, #17
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	2b06      	cmp	r3, #6
 8002380:	d110      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002388:	2208      	movs	r2, #8
 800238a:	4619      	mov	r1, r3
 800238c:	6a38      	ldr	r0, [r7, #32]
 800238e:	f003 ffdd 	bl	800634c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800239e:	441a      	add	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0210 	orr.w	r2, r2, #16
 80023b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f004 f95b 	bl	8006674 <USB_ReadInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80023c8:	f040 80a7 	bne.w	800251a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 f960 	bl	800669a <USB_ReadDevAllOutEpInterrupt>
 80023da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80023dc:	e099      	b.n	8002512 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 808e 	beq.w	8002506 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 f984 	bl	8006702 <USB_ReadDevOutEPInterrupt>
 80023fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002412:	461a      	mov	r2, r3
 8002414:	2301      	movs	r3, #1
 8002416:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002418:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fea4 	bl	8003168 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00c      	beq.n	8002444 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002436:	461a      	mov	r2, r3
 8002438:	2308      	movs	r3, #8
 800243a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800243c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 ff7a 	bl	8003338 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800245a:	461a      	mov	r2, r3
 800245c:	2310      	movs	r3, #16
 800245e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d030      	beq.n	80024cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002472:	2b80      	cmp	r3, #128	@ 0x80
 8002474:	d109      	bne.n	800248a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002484:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002488:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800248a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	3304      	adds	r3, #4
 800249e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	78db      	ldrb	r3, [r3, #3]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d108      	bne.n	80024ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2200      	movs	r2, #0
 80024ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f006 fd13 	bl	8008ee0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024c6:	461a      	mov	r2, r3
 80024c8:	2302      	movs	r3, #2
 80024ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024e2:	461a      	mov	r2, r3
 80024e4:	2320      	movs	r3, #32
 80024e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024fe:	461a      	mov	r2, r3
 8002500:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002504:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	3301      	adds	r3, #1
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800250c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002514:	2b00      	cmp	r3, #0
 8002516:	f47f af62 	bne.w	80023de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f004 f8a8 	bl	8006674 <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800252a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800252e:	f040 80db 	bne.w	80026e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f004 f8c9 	bl	80066ce <USB_ReadDevAllInEpInterrupt>
 800253c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002542:	e0cd      	b.n	80026e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80c2 	beq.w	80026d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f004 f8ef 	bl	800673e <USB_ReadDevInEPInterrupt>
 8002560:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d057      	beq.n	800261c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	2201      	movs	r2, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43db      	mvns	r3, r3
 8002586:	69f9      	ldr	r1, [r7, #28]
 8002588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800258c:	4013      	ands	r3, r2
 800258e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	4413      	add	r3, r2
 8002598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800259c:	461a      	mov	r2, r3
 800259e:	2301      	movs	r3, #1
 80025a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	799b      	ldrb	r3, [r3, #6]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d132      	bne.n	8002610 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	3320      	adds	r3, #32
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4403      	add	r3, r0
 80025ca:	331c      	adds	r3, #28
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4419      	add	r1, r3
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4403      	add	r3, r0
 80025de:	3320      	adds	r3, #32
 80025e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d113      	bne.n	8002610 <HAL_PCD_IRQHandler+0x3a2>
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	3324      	adds	r3, #36	@ 0x24
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d108      	bne.n	8002610 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002608:	461a      	mov	r2, r3
 800260a:	2101      	movs	r1, #1
 800260c:	f004 f8f6 	bl	80067fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f006 fbe7 	bl	8008dea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4413      	add	r3, r2
 800262e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002632:	461a      	mov	r2, r3
 8002634:	2308      	movs	r3, #8
 8002636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800264e:	461a      	mov	r2, r3
 8002650:	2310      	movs	r3, #16
 8002652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	4413      	add	r3, r2
 8002666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800266a:	461a      	mov	r2, r3
 800266c:	2340      	movs	r3, #64	@ 0x40
 800266e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d023      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800267a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800267c:	6a38      	ldr	r0, [r7, #32]
 800267e:	f003 f8dd 	bl	800583c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	3310      	adds	r3, #16
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	3304      	adds	r3, #4
 8002694:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	78db      	ldrb	r3, [r3, #3]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d108      	bne.n	80026b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2200      	movs	r2, #0
 80026a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f006 fc2a 	bl	8008f04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026bc:	461a      	mov	r2, r3
 80026be:	2302      	movs	r3, #2
 80026c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fcbd 	bl	800304e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	3301      	adds	r3, #1
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80026da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80026e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f47f af2e 	bne.w	8002544 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 ffc1 	bl	8006674 <USB_ReadInterrupts>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026fc:	d122      	bne.n	8002744 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002718:	2b01      	cmp	r3, #1
 800271a:	d108      	bne.n	800272e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002724:	2100      	movs	r1, #0
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fea4 	bl	8003474 <HAL_PCDEx_LPM_Callback>
 800272c:	e002      	b.n	8002734 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f006 fbc8 	bl	8008ec4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f003 ff93 	bl	8006674 <USB_ReadInterrupts>
 800274e:	4603      	mov	r3, r0
 8002750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002758:	d112      	bne.n	8002780 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d102      	bne.n	8002770 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f006 fb84 	bl	8008e78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800277e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f003 ff75 	bl	8006674 <USB_ReadInterrupts>
 800278a:	4603      	mov	r3, r0
 800278c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002794:	f040 80b7 	bne.w	8002906 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2110      	movs	r1, #16
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 f842 	bl	800583c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027bc:	e046      	b.n	800284c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027ca:	461a      	mov	r2, r3
 80027cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027e2:	0151      	lsls	r1, r2, #5
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	440a      	add	r2, r1
 80027e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80027ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027fe:	461a      	mov	r2, r3
 8002800:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002804:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002816:	0151      	lsls	r1, r2, #5
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	440a      	add	r2, r1
 800281c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002820:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002824:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002836:	0151      	lsls	r1, r2, #5
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	440a      	add	r2, r1
 800283c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002840:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002844:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002848:	3301      	adds	r3, #1
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	791b      	ldrb	r3, [r3, #4]
 8002850:	461a      	mov	r2, r3
 8002852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002854:	4293      	cmp	r3, r2
 8002856:	d3b2      	bcc.n	80027be <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002866:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800286a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7bdb      	ldrb	r3, [r3, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d016      	beq.n	80028a2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800287a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002884:	f043 030b 	orr.w	r3, r3, #11
 8002888:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800289a:	f043 030b 	orr.w	r3, r3, #11
 800289e:	6453      	str	r3, [r2, #68]	@ 0x44
 80028a0:	e015      	b.n	80028ce <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028b4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80028b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028c8:	f043 030b 	orr.w	r3, r3, #11
 80028cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028dc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80028e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028f0:	461a      	mov	r2, r3
 80028f2:	f003 ff83 	bl	80067fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f003 feb2 	bl	8006674 <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800291a:	d123      	bne.n	8002964 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f003 ff48 	bl	80067b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f002 ffff 	bl	800592e <USB_GetDevSpeed>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681c      	ldr	r4, [r3, #0]
 800293c:	f001 f9ca 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8002940:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002946:	461a      	mov	r2, r3
 8002948:	4620      	mov	r0, r4
 800294a:	f002 fd03 	bl	8005354 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f006 fa73 	bl	8008e3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002962:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f003 fe83 	bl	8006674 <USB_ReadInterrupts>
 800296e:	4603      	mov	r3, r0
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b08      	cmp	r3, #8
 8002976:	d10a      	bne.n	800298e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f006 fa50 	bl	8008e1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f002 0208 	and.w	r2, r2, #8
 800298c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fe6e 	bl	8006674 <USB_ReadInterrupts>
 8002998:	4603      	mov	r3, r0
 800299a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299e:	2b80      	cmp	r3, #128	@ 0x80
 80029a0:	d123      	bne.n	80029ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ae:	2301      	movs	r3, #1
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029b2:	e014      	b.n	80029de <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fb0a 	bl	8002fec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	3301      	adds	r3, #1
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	791b      	ldrb	r3, [r3, #4]
 80029e2:	461a      	mov	r2, r3
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d3e4      	bcc.n	80029b4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 fe40 	bl	8006674 <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029fe:	d13c      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a00:	2301      	movs	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a04:	e02b      	b.n	8002a5e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3318      	adds	r3, #24
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d115      	bne.n	8002a58 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da12      	bge.n	8002a58 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	3317      	adds	r3, #23
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 faca 	bl	8002fec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	791b      	ldrb	r3, [r3, #4]
 8002a62:	461a      	mov	r2, r3
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d3cd      	bcc.n	8002a06 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 fdf8 	bl	8006674 <USB_ReadInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a8e:	d156      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a90:	2301      	movs	r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a94:	e045      	b.n	8002b22 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d12e      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002abe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	da2b      	bge.n	8002b1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002ad0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d121      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b18:	6053      	str	r3, [r2, #4]
            break;
 8002b1a:	e008      	b.n	8002b2e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	3301      	adds	r3, #1
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	791b      	ldrb	r3, [r3, #4]
 8002b26:	461a      	mov	r2, r3
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d3b3      	bcc.n	8002a96 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 fd96 	bl	8006674 <USB_ReadInterrupts>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b52:	d10a      	bne.n	8002b6a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f006 f9e7 	bl	8008f28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fd80 	bl	8006674 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d115      	bne.n	8002baa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f006 f9d7 	bl	8008f44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	e000      	b.n	8002baa <HAL_PCD_IRQHandler+0x93c>
      return;
 8002ba8:	bf00      	nop
    }
  }
}
 8002baa:	3734      	adds	r7, #52	@ 0x34
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd90      	pop	{r4, r7, pc}

08002bb0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_PCD_SetAddress+0x1a>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e012      	b.n	8002bf0 <HAL_PCD_SetAddress+0x40>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 fcdf 	bl	80065a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	4608      	mov	r0, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	70fb      	strb	r3, [r7, #3]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	803b      	strh	r3, [r7, #0]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	da0f      	bge.n	8002c3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	f003 020f 	and.w	r2, r3, #15
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	3310      	adds	r3, #16
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	3304      	adds	r3, #4
 8002c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	705a      	strb	r2, [r3, #1]
 8002c3c:	e00f      	b.n	8002c5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002c6a:	883b      	ldrh	r3, [r7, #0]
 8002c6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	78ba      	ldrb	r2, [r7, #2]
 8002c78:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	785b      	ldrb	r3, [r3, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c8c:	78bb      	ldrb	r3, [r7, #2]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d102      	bne.n	8002c98 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_PCD_EP_Open+0xae>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e00e      	b.n	8002cc4 <HAL_PCD_EP_Open+0xcc>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68f9      	ldr	r1, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 fe5f 	bl	8005978 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	da0f      	bge.n	8002d00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	f003 020f 	and.w	r2, r3, #15
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	3310      	adds	r3, #16
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	705a      	strb	r2, [r3, #1]
 8002cfe:	e00f      	b.n	8002d20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	f003 020f 	and.w	r2, r3, #15
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	3304      	adds	r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_PCD_EP_Close+0x6e>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e00e      	b.n	8002d58 <HAL_PCD_EP_Close+0x8c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68f9      	ldr	r1, [r7, #12]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f002 fe9d 	bl	8005a88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d70:	7afb      	ldrb	r3, [r7, #11]
 8002d72:	f003 020f 	and.w	r2, r3, #15
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	3304      	adds	r3, #4
 8002d88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	799b      	ldrb	r3, [r3, #6]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	799b      	ldrb	r3, [r3, #6]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6979      	ldr	r1, [r7, #20]
 8002dc8:	f002 ff3a 	bl	8005c40 <USB_EPStartXfer>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 020f 	and.w	r2, r3, #15
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002df8:	681b      	ldr	r3, [r3, #0]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	460b      	mov	r3, r1
 8002e14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e16:	7afb      	ldrb	r3, [r7, #11]
 8002e18:	f003 020f 	and.w	r2, r3, #15
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	3310      	adds	r3, #16
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4413      	add	r3, r2
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2201      	movs	r2, #1
 8002e44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e46:	7afb      	ldrb	r3, [r7, #11]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	799b      	ldrb	r3, [r3, #6]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d102      	bne.n	8002e60 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	799b      	ldrb	r3, [r3, #6]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6979      	ldr	r1, [r7, #20]
 8002e6c:	f002 fee8 	bl	8005c40 <USB_EPStartXfer>

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	7912      	ldrb	r2, [r2, #4]
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d901      	bls.n	8002e98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e04f      	b.n	8002f38 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	da0f      	bge.n	8002ec0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	3310      	adds	r3, #16
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	705a      	strb	r2, [r3, #1]
 8002ebe:	e00d      	b.n	8002edc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_PCD_EP_SetStall+0x82>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e01d      	b.n	8002f38 <HAL_PCD_EP_SetStall+0xbe>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68f9      	ldr	r1, [r7, #12]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 fa76 	bl	80063fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	7999      	ldrb	r1, [r3, #6]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f003 fc67 	bl	80067fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	7912      	ldrb	r2, [r2, #4]
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e042      	b.n	8002fe4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	da0f      	bge.n	8002f86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 020f 	and.w	r2, r3, #15
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	3310      	adds	r3, #16
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	705a      	strb	r2, [r3, #1]
 8002f84:	e00f      	b.n	8002fa6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 020f 	and.w	r2, r3, #15
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_PCD_EP_ClrStall+0x86>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e00e      	b.n	8002fe4 <HAL_PCD_EP_ClrStall+0xa4>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68f9      	ldr	r1, [r7, #12]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fa7f 	bl	80064d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	da0c      	bge.n	800301a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	3310      	adds	r3, #16
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	3304      	adds	r3, #4
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e00c      	b.n	8003034 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	f003 020f 	and.w	r2, r3, #15
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	3304      	adds	r3, #4
 8003032:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68f9      	ldr	r1, [r7, #12]
 800303a:	4618      	mov	r0, r3
 800303c:	f003 f89e 	bl	800617c <USB_EPStopXfer>
 8003040:	4603      	mov	r3, r0
 8003042:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003044:	7afb      	ldrb	r3, [r7, #11]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b08a      	sub	sp, #40	@ 0x28
 8003052:	af02      	add	r7, sp, #8
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	3310      	adds	r3, #16
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	3304      	adds	r3, #4
 8003074:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	d901      	bls.n	8003086 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e06b      	b.n	800315e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	429a      	cmp	r2, r3
 800309a:	d902      	bls.n	80030a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3303      	adds	r3, #3
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030aa:	e02a      	b.n	8003102 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d902      	bls.n	80030c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	3303      	adds	r3, #3
 80030cc:	089b      	lsrs	r3, r3, #2
 80030ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	68d9      	ldr	r1, [r3, #12]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	4603      	mov	r3, r0
 80030e4:	6978      	ldr	r0, [r7, #20]
 80030e6:	f003 f8f3 	bl	80062d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	441a      	add	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	441a      	add	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	429a      	cmp	r2, r3
 8003116:	d809      	bhi.n	800312c <PCD_WriteEmptyTxFifo+0xde>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003120:	429a      	cmp	r2, r3
 8003122:	d203      	bcs.n	800312c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1bf      	bne.n	80030ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	429a      	cmp	r2, r3
 8003136:	d811      	bhi.n	800315c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	2201      	movs	r2, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800314c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	43db      	mvns	r3, r3
 8003152:	6939      	ldr	r1, [r7, #16]
 8003154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003158:	4013      	ands	r3, r2
 800315a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	333c      	adds	r3, #60	@ 0x3c
 8003180:	3304      	adds	r3, #4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	799b      	ldrb	r3, [r3, #6]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d17b      	bne.n	8003296 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	4a61      	ldr	r2, [pc, #388]	@ (8003330 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	f240 80b9 	bls.w	8003324 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80b3 	beq.w	8003324 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ca:	461a      	mov	r2, r3
 80031cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031d0:	6093      	str	r3, [r2, #8]
 80031d2:	e0a7      	b.n	8003324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ea:	461a      	mov	r2, r3
 80031ec:	2320      	movs	r3, #32
 80031ee:	6093      	str	r3, [r2, #8]
 80031f0:	e098      	b.n	8003324 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f040 8093 	bne.w	8003324 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	4a4b      	ldr	r2, [pc, #300]	@ (8003330 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d90f      	bls.n	8003226 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003222:	6093      	str	r3, [r2, #8]
 8003224:	e07e      	b.n	8003324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4413      	add	r3, r2
 8003238:	3304      	adds	r3, #4
 800323a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	0159      	lsls	r1, r3, #5
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	440b      	add	r3, r1
 8003248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	1ad2      	subs	r2, r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d114      	bne.n	8003288 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003270:	461a      	mov	r2, r3
 8003272:	2101      	movs	r1, #1
 8003274:	f003 fac2 	bl	80067fc <USB_EP0_OutStart>
 8003278:	e006      	b.n	8003288 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	441a      	add	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	4619      	mov	r1, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f005 fd90 	bl	8008db4 <HAL_PCD_DataOutStageCallback>
 8003294:	e046      	b.n	8003324 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	4a26      	ldr	r2, [pc, #152]	@ (8003334 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d124      	bne.n	80032e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b4:	461a      	mov	r2, r3
 80032b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ba:	6093      	str	r3, [r2, #8]
 80032bc:	e032      	b.n	8003324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d4:	461a      	mov	r2, r3
 80032d6:	2320      	movs	r3, #32
 80032d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	4619      	mov	r1, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f005 fd67 	bl	8008db4 <HAL_PCD_DataOutStageCallback>
 80032e6:	e01d      	b.n	8003324 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d114      	bne.n	8003318 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d108      	bne.n	8003318 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003310:	461a      	mov	r2, r3
 8003312:	2100      	movs	r1, #0
 8003314:	f003 fa72 	bl	80067fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	4619      	mov	r1, r3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f005 fd48 	bl	8008db4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3720      	adds	r7, #32
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	4f54300a 	.word	0x4f54300a
 8003334:	4f54310a 	.word	0x4f54310a

08003338 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	333c      	adds	r3, #60	@ 0x3c
 8003350:	3304      	adds	r3, #4
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a15      	ldr	r2, [pc, #84]	@ (80033c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d90e      	bls.n	800338c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003384:	461a      	mov	r2, r3
 8003386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800338a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f005 fcff 	bl	8008d90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a0a      	ldr	r2, [pc, #40]	@ (80033c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d90c      	bls.n	80033b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	799b      	ldrb	r3, [r3, #6]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d108      	bne.n	80033b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033ac:	461a      	mov	r2, r3
 80033ae:	2101      	movs	r1, #1
 80033b0:	f003 fa24 	bl	80067fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	4f54300a 	.word	0x4f54300a

080033c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
 80033d0:	4613      	mov	r3, r2
 80033d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033e2:	883b      	ldrh	r3, [r7, #0]
 80033e4:	0419      	lsls	r1, r3, #16
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80033f0:	e028      	b.n	8003444 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4413      	add	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
 8003404:	e00d      	b.n	8003422 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	3340      	adds	r3, #64	@ 0x40
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4413      	add	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	3301      	adds	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	3b01      	subs	r3, #1
 8003428:	429a      	cmp	r2, r3
 800342a:	d3ec      	bcc.n	8003406 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800342c:	883b      	ldrh	r3, [r7, #0]
 800342e:	0418      	lsls	r0, r3, #16
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	3b01      	subs	r3, #1
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	4302      	orrs	r2, r0
 800343c:	3340      	adds	r3, #64	@ 0x40
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e267      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d075      	beq.n	8003596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034aa:	4b88      	ldr	r3, [pc, #544]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d00c      	beq.n	80034d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b6:	4b85      	ldr	r3, [pc, #532]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d112      	bne.n	80034e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c2:	4b82      	ldr	r3, [pc, #520]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ce:	d10b      	bne.n	80034e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d0:	4b7e      	ldr	r3, [pc, #504]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d05b      	beq.n	8003594 <HAL_RCC_OscConfig+0x108>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d157      	bne.n	8003594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e242      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f0:	d106      	bne.n	8003500 <HAL_RCC_OscConfig+0x74>
 80034f2:	4b76      	ldr	r3, [pc, #472]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a75      	ldr	r2, [pc, #468]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e01d      	b.n	800353c <HAL_RCC_OscConfig+0xb0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0x98>
 800350a:	4b70      	ldr	r3, [pc, #448]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a6f      	ldr	r2, [pc, #444]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b6d      	ldr	r3, [pc, #436]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6c      	ldr	r2, [pc, #432]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e00b      	b.n	800353c <HAL_RCC_OscConfig+0xb0>
 8003524:	4b69      	ldr	r3, [pc, #420]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a68      	ldr	r2, [pc, #416]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 800352a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b66      	ldr	r3, [pc, #408]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a65      	ldr	r2, [pc, #404]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800353a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d013      	beq.n	800356c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fd fe6e 	bl	8001224 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7fd fe6a 	bl	8001224 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	@ 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e207      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b5b      	ldr	r3, [pc, #364]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0xc0>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fd fe5a 	bl	8001224 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fd fe56 	bl	8001224 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	@ 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e1f3      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	4b51      	ldr	r3, [pc, #324]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0xe8>
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d063      	beq.n	800366a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035a2:	4b4a      	ldr	r3, [pc, #296]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ae:	4b47      	ldr	r3, [pc, #284]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d11c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ba:	4b44      	ldr	r3, [pc, #272]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d116      	bne.n	80035f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	4b41      	ldr	r3, [pc, #260]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_RCC_OscConfig+0x152>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e1c7      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035de:	4b3b      	ldr	r3, [pc, #236]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4937      	ldr	r1, [pc, #220]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f2:	e03a      	b.n	800366a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fc:	4b34      	ldr	r3, [pc, #208]	@ (80036d0 <HAL_RCC_OscConfig+0x244>)
 80035fe:	2201      	movs	r2, #1
 8003600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7fd fe0f 	bl	8001224 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360a:	f7fd fe0b 	bl	8001224 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e1a8      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361c:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003628:	4b28      	ldr	r3, [pc, #160]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4925      	ldr	r1, [pc, #148]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003638:	4313      	orrs	r3, r2
 800363a:	600b      	str	r3, [r1, #0]
 800363c:	e015      	b.n	800366a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363e:	4b24      	ldr	r3, [pc, #144]	@ (80036d0 <HAL_RCC_OscConfig+0x244>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fd fdee 	bl	8001224 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364c:	f7fd fdea 	bl	8001224 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e187      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365e:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d036      	beq.n	80036e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367e:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <HAL_RCC_OscConfig+0x248>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003684:	f7fd fdce 	bl	8001224 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368c:	f7fd fdca 	bl	8001224 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e167      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369e:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80036a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x200>
 80036aa:	e01b      	b.n	80036e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ac:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <HAL_RCC_OscConfig+0x248>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b2:	f7fd fdb7 	bl	8001224 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	e00e      	b.n	80036d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ba:	f7fd fdb3 	bl	8001224 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d907      	bls.n	80036d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e150      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
 80036cc:	40023800 	.word	0x40023800
 80036d0:	42470000 	.word	0x42470000
 80036d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	4b88      	ldr	r3, [pc, #544]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80036da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ea      	bne.n	80036ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8097 	beq.w	8003820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f6:	4b81      	ldr	r3, [pc, #516]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10f      	bne.n	8003722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	4b7d      	ldr	r3, [pc, #500]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	4a7c      	ldr	r2, [pc, #496]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800370c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003710:	6413      	str	r3, [r2, #64]	@ 0x40
 8003712:	4b7a      	ldr	r3, [pc, #488]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003722:	4b77      	ldr	r3, [pc, #476]	@ (8003900 <HAL_RCC_OscConfig+0x474>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d118      	bne.n	8003760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372e:	4b74      	ldr	r3, [pc, #464]	@ (8003900 <HAL_RCC_OscConfig+0x474>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a73      	ldr	r2, [pc, #460]	@ (8003900 <HAL_RCC_OscConfig+0x474>)
 8003734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373a:	f7fd fd73 	bl	8001224 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003742:	f7fd fd6f 	bl	8001224 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e10c      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	4b6a      	ldr	r3, [pc, #424]	@ (8003900 <HAL_RCC_OscConfig+0x474>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x2ea>
 8003768:	4b64      	ldr	r3, [pc, #400]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376c:	4a63      	ldr	r2, [pc, #396]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6713      	str	r3, [r2, #112]	@ 0x70
 8003774:	e01c      	b.n	80037b0 <HAL_RCC_OscConfig+0x324>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b05      	cmp	r3, #5
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x30c>
 800377e:	4b5f      	ldr	r3, [pc, #380]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003782:	4a5e      	ldr	r2, [pc, #376]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003784:	f043 0304 	orr.w	r3, r3, #4
 8003788:	6713      	str	r3, [r2, #112]	@ 0x70
 800378a:	4b5c      	ldr	r3, [pc, #368]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	4a5b      	ldr	r2, [pc, #364]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	6713      	str	r3, [r2, #112]	@ 0x70
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_OscConfig+0x324>
 8003798:	4b58      	ldr	r3, [pc, #352]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379c:	4a57      	ldr	r2, [pc, #348]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a4:	4b55      	ldr	r3, [pc, #340]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a8:	4a54      	ldr	r2, [pc, #336]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80037aa:	f023 0304 	bic.w	r3, r3, #4
 80037ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d015      	beq.n	80037e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7fd fd34 	bl	8001224 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c0:	f7fd fd30 	bl	8001224 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e0cb      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d6:	4b49      	ldr	r3, [pc, #292]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0ee      	beq.n	80037c0 <HAL_RCC_OscConfig+0x334>
 80037e2:	e014      	b.n	800380e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e4:	f7fd fd1e 	bl	8001224 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ec:	f7fd fd1a 	bl	8001224 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e0b5      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003802:	4b3e      	ldr	r3, [pc, #248]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1ee      	bne.n	80037ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d105      	bne.n	8003820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003814:	4b39      	ldr	r3, [pc, #228]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	4a38      	ldr	r2, [pc, #224]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800381a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800381e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80a1 	beq.w	800396c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800382a:	4b34      	ldr	r3, [pc, #208]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b08      	cmp	r3, #8
 8003834:	d05c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d141      	bne.n	80038c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383e:	4b31      	ldr	r3, [pc, #196]	@ (8003904 <HAL_RCC_OscConfig+0x478>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fd fcee 	bl	8001224 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384c:	f7fd fcea 	bl	8001224 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e087      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385e:	4b27      	ldr	r3, [pc, #156]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	019b      	lsls	r3, r3, #6
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	3b01      	subs	r3, #1
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	491b      	ldr	r1, [pc, #108]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003894:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <HAL_RCC_OscConfig+0x478>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389a:	f7fd fcc3 	bl	8001224 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a2:	f7fd fcbf 	bl	8001224 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e05c      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b4:	4b11      	ldr	r3, [pc, #68]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x416>
 80038c0:	e054      	b.n	800396c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <HAL_RCC_OscConfig+0x478>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fd fcac 	bl	8001224 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fd fca8 	bl	8001224 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e045      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x444>
 80038ee:	e03d      	b.n	800396c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e038      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
 80038fc:	40023800 	.word	0x40023800
 8003900:	40007000 	.word	0x40007000
 8003904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003908:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <HAL_RCC_OscConfig+0x4ec>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d028      	beq.n	8003968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d121      	bne.n	8003968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d11a      	bne.n	8003968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003938:	4013      	ands	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800393e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003940:	4293      	cmp	r3, r2
 8003942:	d111      	bne.n	8003968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	3b01      	subs	r3, #1
 8003952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800

0800397c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0cc      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003990:	4b68      	ldr	r3, [pc, #416]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d90c      	bls.n	80039b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b65      	ldr	r3, [pc, #404]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b63      	ldr	r3, [pc, #396]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0b8      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d020      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d0:	4b59      	ldr	r3, [pc, #356]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4a58      	ldr	r2, [pc, #352]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e8:	4b53      	ldr	r3, [pc, #332]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a52      	ldr	r2, [pc, #328]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f4:	4b50      	ldr	r3, [pc, #320]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	494d      	ldr	r1, [pc, #308]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d044      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	4b47      	ldr	r3, [pc, #284]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d119      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e07f      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d003      	beq.n	8003a3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e06f      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e067      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5a:	4b37      	ldr	r3, [pc, #220]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4934      	ldr	r1, [pc, #208]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a6c:	f7fd fbda 	bl	8001224 <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a74:	f7fd fbd6 	bl	8001224 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e04f      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 020c 	and.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1eb      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b25      	ldr	r3, [pc, #148]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d20c      	bcs.n	8003ac4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b22      	ldr	r3, [pc, #136]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b20      	ldr	r3, [pc, #128]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e032      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad0:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4916      	ldr	r1, [pc, #88]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aee:	4b12      	ldr	r3, [pc, #72]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	490e      	ldr	r1, [pc, #56]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b02:	f000 f821 	bl	8003b48 <HAL_RCC_GetSysClockFreq>
 8003b06:	4602      	mov	r2, r0
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	490a      	ldr	r1, [pc, #40]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003b14:	5ccb      	ldrb	r3, [r1, r3]
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	4a09      	ldr	r2, [pc, #36]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b1e:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd fb3a 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023c00 	.word	0x40023c00
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	080093d0 	.word	0x080093d0
 8003b40:	20000000 	.word	0x20000000
 8003b44:	20000004 	.word	0x20000004

08003b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b4c:	b090      	sub	sp, #64	@ 0x40
 8003b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b60:	4b59      	ldr	r3, [pc, #356]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d00d      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x40>
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	f200 80a1 	bhi.w	8003cb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x34>
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b7a:	e09b      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b53      	ldr	r3, [pc, #332]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8003b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b80:	e09b      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b82:	4b53      	ldr	r3, [pc, #332]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b86:	e098      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b88:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b92:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d028      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	099b      	lsrs	r3, r3, #6
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	623b      	str	r3, [r7, #32]
 8003ba8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4b47      	ldr	r3, [pc, #284]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb4:	fb03 f201 	mul.w	r2, r3, r1
 8003bb8:	2300      	movs	r3, #0
 8003bba:	fb00 f303 	mul.w	r3, r0, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	4a43      	ldr	r2, [pc, #268]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bc2:	fba0 1202 	umull	r1, r2, r0, r2
 8003bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bc8:	460a      	mov	r2, r1
 8003bca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bce:	4413      	add	r3, r2
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	61fa      	str	r2, [r7, #28]
 8003bda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003be2:	f7fc faf9 	bl	80001d8 <__aeabi_uldivmod>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4613      	mov	r3, r2
 8003bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bee:	e053      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf0:	4b35      	ldr	r3, [pc, #212]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	617a      	str	r2, [r7, #20]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c02:	f04f 0b00 	mov.w	fp, #0
 8003c06:	4652      	mov	r2, sl
 8003c08:	465b      	mov	r3, fp
 8003c0a:	f04f 0000 	mov.w	r0, #0
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	0159      	lsls	r1, r3, #5
 8003c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c18:	0150      	lsls	r0, r2, #5
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	ebb2 080a 	subs.w	r8, r2, sl
 8003c22:	eb63 090b 	sbc.w	r9, r3, fp
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c3a:	ebb2 0408 	subs.w	r4, r2, r8
 8003c3e:	eb63 0509 	sbc.w	r5, r3, r9
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	00eb      	lsls	r3, r5, #3
 8003c4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c50:	00e2      	lsls	r2, r4, #3
 8003c52:	4614      	mov	r4, r2
 8003c54:	461d      	mov	r5, r3
 8003c56:	eb14 030a 	adds.w	r3, r4, sl
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	eb45 030b 	adc.w	r3, r5, fp
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c6e:	4629      	mov	r1, r5
 8003c70:	028b      	lsls	r3, r1, #10
 8003c72:	4621      	mov	r1, r4
 8003c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c78:	4621      	mov	r1, r4
 8003c7a:	028a      	lsls	r2, r1, #10
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c82:	2200      	movs	r2, #0
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	60fa      	str	r2, [r7, #12]
 8003c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c8c:	f7fc faa4 	bl	80001d8 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4613      	mov	r3, r2
 8003c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ca8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cb2:	e002      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8003cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3740      	adds	r7, #64	@ 0x40
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	00f42400 	.word	0x00f42400
 8003cd0:	017d7840 	.word	0x017d7840

08003cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	@ (8003ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000000 	.word	0x20000000

08003cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf0:	f7ff fff0 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0a9b      	lsrs	r3, r3, #10
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4903      	ldr	r1, [pc, #12]	@ (8003d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	080093e0 	.word	0x080093e0

08003d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d18:	f7ff ffdc 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	0b5b      	lsrs	r3, r3, #13
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	4903      	ldr	r1, [pc, #12]	@ (8003d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2a:	5ccb      	ldrb	r3, [r1, r3]
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40023800 	.word	0x40023800
 8003d38:	080093e0 	.word	0x080093e0

08003d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07b      	b.n	8003e46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d108      	bne.n	8003d68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d5e:	d009      	beq.n	8003d74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	61da      	str	r2, [r3, #28]
 8003d66:	e005      	b.n	8003d74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fd f83a 	bl	8000e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003daa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df8:	ea42 0103 	orr.w	r1, r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f003 0104 	and.w	r1, r3, #4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	f003 0210 	and.w	r2, r3, #16
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e042      	b.n	8003ee6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d106      	bne.n	8003e7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7fd f8c1 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2224      	movs	r2, #36	@ 0x24
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 ff86 	bl	8004da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ea6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ec6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b08a      	sub	sp, #40	@ 0x28
 8003ef2:	af02      	add	r7, sp, #8
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d175      	bne.n	8003ffa <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_UART_Transmit+0x2c>
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06e      	b.n	8003ffc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2221      	movs	r2, #33	@ 0x21
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f2c:	f7fd f97a 	bl	8001224 <HAL_GetTick>
 8003f30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	88fa      	ldrh	r2, [r7, #6]
 8003f36:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	88fa      	ldrh	r2, [r7, #6]
 8003f3c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f46:	d108      	bne.n	8003f5a <HAL_UART_Transmit+0x6c>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d104      	bne.n	8003f5a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	e003      	b.n	8003f62 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f62:	e02e      	b.n	8003fc2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2180      	movs	r1, #128	@ 0x80
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fc5e 	bl	8004830 <UART_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e03a      	b.n	8003ffc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f9a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	3302      	adds	r3, #2
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	e007      	b.n	8003fb4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1cb      	bne.n	8003f64 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2140      	movs	r1, #64	@ 0x40
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fc2a 	bl	8004830 <UART_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e006      	b.n	8003ffc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
  }
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3720      	adds	r7, #32
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08c      	sub	sp, #48	@ 0x30
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	4613      	mov	r3, r2
 8004010:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b20      	cmp	r3, #32
 800401c:	d14a      	bne.n	80040b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e043      	b.n	80040b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	461a      	mov	r2, r3
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fc4f 	bl	80048e4 <UART_Start_Receive_DMA>
 8004046:	4603      	mov	r3, r0
 8004048:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800404c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004050:	2b00      	cmp	r3, #0
 8004052:	d12c      	bne.n	80040ae <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004058:	2b01      	cmp	r3, #1
 800405a:	d125      	bne.n	80040a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	330c      	adds	r3, #12
 8004078:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	617b      	str	r3, [r7, #20]
   return(result);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f043 0310 	orr.w	r3, r3, #16
 8004088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	330c      	adds	r3, #12
 8004090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004092:	627a      	str	r2, [r7, #36]	@ 0x24
 8004094:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6a39      	ldr	r1, [r7, #32]
 8004098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e5      	bne.n	8004072 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80040a6:	e002      	b.n	80040ae <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80040ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80040b2:	e000      	b.n	80040b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
  }
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3730      	adds	r7, #48	@ 0x30
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b0ba      	sub	sp, #232	@ 0xe8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80040fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10f      	bne.n	8004126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_UART_IRQHandler+0x66>
 8004112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fd81 	bl	8004c26 <UART_Receive_IT>
      return;
 8004124:	e25b      	b.n	80045de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80de 	beq.w	80042ec <HAL_UART_IRQHandler+0x22c>
 8004130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d106      	bne.n	800414a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800413c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004140:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80d1 	beq.w	80042ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800414a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_UART_IRQHandler+0xae>
 8004156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800415a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	f043 0201 	orr.w	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800416e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <HAL_UART_IRQHandler+0xd2>
 800417a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	f043 0202 	orr.w	r2, r3, #2
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_UART_IRQHandler+0xf6>
 800419e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ae:	f043 0204 	orr.w	r2, r3, #4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d011      	beq.n	80041e6 <HAL_UART_IRQHandler+0x126>
 80041c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f043 0208 	orr.w	r2, r3, #8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 81f2 	beq.w	80045d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_UART_IRQHandler+0x14e>
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fd0c 	bl	8004c26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004218:	2b40      	cmp	r3, #64	@ 0x40
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_UART_IRQHandler+0x17a>
 8004232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d04f      	beq.n	80042da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fc14 	bl	8004a68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424a:	2b40      	cmp	r3, #64	@ 0x40
 800424c:	d141      	bne.n	80042d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800426c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3314      	adds	r3, #20
 8004276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800427a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800427e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1d9      	bne.n	800424e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d013      	beq.n	80042ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a6:	4a7e      	ldr	r2, [pc, #504]	@ (80044a0 <HAL_UART_IRQHandler+0x3e0>)
 80042a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fd fa70 	bl	8001794 <HAL_DMA_Abort_IT>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042c4:	4610      	mov	r0, r2
 80042c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c8:	e00e      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9a8 	bl	8004620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d0:	e00a      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9a4 	bl	8004620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	e006      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f9a0 	bl	8004620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80042e6:	e175      	b.n	80045d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	bf00      	nop
    return;
 80042ea:	e173      	b.n	80045d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 814f 	bne.w	8004594 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8148 	beq.w	8004594 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8141 	beq.w	8004594 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004332:	2b40      	cmp	r3, #64	@ 0x40
 8004334:	f040 80b6 	bne.w	80044a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8145 	beq.w	80045d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004356:	429a      	cmp	r2, r3
 8004358:	f080 813e 	bcs.w	80045d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004362:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436e:	f000 8088 	beq.w	8004482 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800438c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800439e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1d9      	bne.n	8004372 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3314      	adds	r3, #20
 80043de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e1      	bne.n	80043be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800440a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800440c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3314      	adds	r3, #20
 800441a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800441e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004420:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004424:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800442c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e3      	bne.n	80043fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004452:	f023 0310 	bic.w	r3, r3, #16
 8004456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004464:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004466:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800446a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e3      	bne.n	8004440 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd f919 	bl	80016b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004490:	b29b      	uxth	r3, r3
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	b29b      	uxth	r3, r3
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fc fc67 	bl	8000d6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800449e:	e09b      	b.n	80045d8 <HAL_UART_IRQHandler+0x518>
 80044a0:	08004b2f 	.word	0x08004b2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 808e 	beq.w	80045dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8089 	beq.w	80045dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	330c      	adds	r3, #12
 80044d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80044ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80044f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e3      	bne.n	80044ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3314      	adds	r3, #20
 8004508:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	623b      	str	r3, [r7, #32]
   return(result);
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3314      	adds	r3, #20
 8004522:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004526:	633a      	str	r2, [r7, #48]	@ 0x30
 8004528:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800452c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e3      	bne.n	8004502 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	60fb      	str	r3, [r7, #12]
   return(result);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0310 	bic.w	r3, r3, #16
 800455e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	330c      	adds	r3, #12
 8004568:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800456c:	61fa      	str	r2, [r7, #28]
 800456e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	69b9      	ldr	r1, [r7, #24]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	617b      	str	r3, [r7, #20]
   return(result);
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e3      	bne.n	8004548 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004586:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800458a:	4619      	mov	r1, r3
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7fc fbed 	bl	8000d6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004592:	e023      	b.n	80045dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <HAL_UART_IRQHandler+0x4f4>
 80045a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fad2 	bl	8004b56 <UART_Transmit_IT>
    return;
 80045b2:	e014      	b.n	80045de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00e      	beq.n	80045de <HAL_UART_IRQHandler+0x51e>
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fb12 	bl	8004bf6 <UART_EndTransmit_IT>
    return;
 80045d2:	e004      	b.n	80045de <HAL_UART_IRQHandler+0x51e>
    return;
 80045d4:	bf00      	nop
 80045d6:	e002      	b.n	80045de <HAL_UART_IRQHandler+0x51e>
      return;
 80045d8:	bf00      	nop
 80045da:	e000      	b.n	80045de <HAL_UART_IRQHandler+0x51e>
      return;
 80045dc:	bf00      	nop
  }
}
 80045de:	37e8      	adds	r7, #232	@ 0xe8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b09c      	sub	sp, #112	@ 0x70
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004640:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d172      	bne.n	8004736 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004652:	2200      	movs	r2, #0
 8004654:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800466c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800466e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004676:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004678:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800467c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e5      	bne.n	8004656 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3314      	adds	r3, #20
 8004690:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800469a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80046a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3314      	adds	r3, #20
 80046a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80046ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e5      	bne.n	800468a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	623b      	str	r3, [r7, #32]
   return(result);
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80046d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3314      	adds	r3, #20
 80046dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046de:	633a      	str	r2, [r7, #48]	@ 0x30
 80046e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d119      	bne.n	8004736 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	60fb      	str	r3, [r7, #12]
   return(result);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800471a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004722:	61fa      	str	r2, [r7, #28]
 8004724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	69b9      	ldr	r1, [r7, #24]
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	617b      	str	r3, [r7, #20]
   return(result);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e5      	bne.n	8004702 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004738:	2200      	movs	r2, #0
 800473a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004740:	2b01      	cmp	r3, #1
 8004742:	d106      	bne.n	8004752 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004746:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004748:	4619      	mov	r1, r3
 800474a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800474c:	f7fc fb0e 	bl	8000d6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004750:	e002      	b.n	8004758 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004752:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004754:	f7ff ff50 	bl	80045f8 <HAL_UART_RxCpltCallback>
}
 8004758:	bf00      	nop
 800475a:	3770      	adds	r7, #112	@ 0x70
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	2b01      	cmp	r3, #1
 800477a:	d108      	bne.n	800478e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	b29b      	uxth	r3, r3
 8004784:	4619      	mov	r1, r3
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7fc faf0 	bl	8000d6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800478c:	e002      	b.n	8004794 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff ff3c 	bl	800460c <HAL_UART_RxHalfCpltCallback>
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b8:	2b80      	cmp	r3, #128	@ 0x80
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b21      	cmp	r3, #33	@ 0x21
 80047ce:	d108      	bne.n	80047e2 <UART_DMAError+0x46>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2200      	movs	r2, #0
 80047da:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80047dc:	68b8      	ldr	r0, [r7, #8]
 80047de:	f000 f91b 	bl	8004a18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b22      	cmp	r3, #34	@ 0x22
 8004802:	d108      	bne.n	8004816 <UART_DMAError+0x7a>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2200      	movs	r2, #0
 800480e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004810:	68b8      	ldr	r0, [r7, #8]
 8004812:	f000 f929 	bl	8004a68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	f043 0210 	orr.w	r2, r3, #16
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004822:	68b8      	ldr	r0, [r7, #8]
 8004824:	f7ff fefc 	bl	8004620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004840:	e03b      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d037      	beq.n	80048ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484a:	f7fc fceb 	bl	8001224 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	429a      	cmp	r2, r3
 8004858:	d302      	bcc.n	8004860 <UART_WaitOnFlagUntilTimeout+0x30>
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e03a      	b.n	80048da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d023      	beq.n	80048ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b80      	cmp	r3, #128	@ 0x80
 8004876:	d020      	beq.n	80048ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b40      	cmp	r3, #64	@ 0x40
 800487c:	d01d      	beq.n	80048ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b08      	cmp	r3, #8
 800488a:	d116      	bne.n	80048ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f8e0 	bl	8004a68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2208      	movs	r2, #8
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e00f      	b.n	80048da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d0b4      	beq.n	8004842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b098      	sub	sp, #96	@ 0x60
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2222      	movs	r2, #34	@ 0x22
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004910:	4a3e      	ldr	r2, [pc, #248]	@ (8004a0c <UART_Start_Receive_DMA+0x128>)
 8004912:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004918:	4a3d      	ldr	r2, [pc, #244]	@ (8004a10 <UART_Start_Receive_DMA+0x12c>)
 800491a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004920:	4a3c      	ldr	r2, [pc, #240]	@ (8004a14 <UART_Start_Receive_DMA+0x130>)
 8004922:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004928:	2200      	movs	r2, #0
 800492a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800492c:	f107 0308 	add.w	r3, r7, #8
 8004930:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	f7fc fe5e 	bl	8001604 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d019      	beq.n	800499a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	330c      	adds	r3, #12
 800496c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800497c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004986:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004988:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800498c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e5      	bne.n	8004966 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3314      	adds	r3, #20
 80049a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80049ba:	63ba      	str	r2, [r7, #56]	@ 0x38
 80049bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80049c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e5      	bne.n	800499a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3314      	adds	r3, #20
 80049d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	617b      	str	r3, [r7, #20]
   return(result);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3314      	adds	r3, #20
 80049ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80049ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80049f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6a39      	ldr	r1, [r7, #32]
 80049f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e5      	bne.n	80049ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3760      	adds	r7, #96	@ 0x60
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	08004635 	.word	0x08004635
 8004a10:	08004761 	.word	0x08004761
 8004a14:	0800479d 	.word	0x0800479d

08004a18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	@ 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	61ba      	str	r2, [r7, #24]
 8004a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6979      	ldr	r1, [r7, #20]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004a5c:	bf00      	nop
 8004a5e:	3724      	adds	r7, #36	@ 0x24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b095      	sub	sp, #84	@ 0x54
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a90:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a98:	e841 2300 	strex	r3, r2, [r1]
 8004a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e5      	bne.n	8004a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3314      	adds	r3, #20
 8004aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ac4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e5      	bne.n	8004aa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d119      	bne.n	8004b14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f023 0310 	bic.w	r3, r3, #16
 8004af6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b00:	61ba      	str	r2, [r7, #24]
 8004b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6979      	ldr	r1, [r7, #20]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b22:	bf00      	nop
 8004b24:	3754      	adds	r7, #84	@ 0x54
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7ff fd69 	bl	8004620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b21      	cmp	r3, #33	@ 0x21
 8004b68:	d13e      	bne.n	8004be8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b72:	d114      	bne.n	8004b9e <UART_Transmit_IT+0x48>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d110      	bne.n	8004b9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	621a      	str	r2, [r3, #32]
 8004b9c:	e008      	b.n	8004bb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	1c59      	adds	r1, r3, #1
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6211      	str	r1, [r2, #32]
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10f      	bne.n	8004be4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004be2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	e000      	b.n	8004bea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004be8:	2302      	movs	r3, #2
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fce4 	bl	80045e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b08c      	sub	sp, #48	@ 0x30
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b22      	cmp	r3, #34	@ 0x22
 8004c38:	f040 80ae 	bne.w	8004d98 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c44:	d117      	bne.n	8004c76 <UART_Receive_IT+0x50>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d113      	bne.n	8004c76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6e:	1c9a      	adds	r2, r3, #2
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c74:	e026      	b.n	8004cc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c88:	d007      	beq.n	8004c9a <UART_Receive_IT+0x74>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <UART_Receive_IT+0x82>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	e008      	b.n	8004cba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d15d      	bne.n	8004d94 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0220 	bic.w	r2, r2, #32
 8004ce6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d135      	bne.n	8004d8a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	613b      	str	r3, [r7, #16]
   return(result);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f023 0310 	bic.w	r3, r3, #16
 8004d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d44:	623a      	str	r2, [r7, #32]
 8004d46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	69f9      	ldr	r1, [r7, #28]
 8004d4a:	6a3a      	ldr	r2, [r7, #32]
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e5      	bne.n	8004d24 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	d10a      	bne.n	8004d7c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fb fff2 	bl	8000d6c <HAL_UARTEx_RxEventCallback>
 8004d88:	e002      	b.n	8004d90 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fc34 	bl	80045f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e002      	b.n	8004d9a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e000      	b.n	8004d9a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
  }
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3730      	adds	r7, #48	@ 0x30
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da8:	b0c0      	sub	sp, #256	@ 0x100
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	68d9      	ldr	r1, [r3, #12]
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	ea40 0301 	orr.w	r3, r0, r1
 8004dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004dfc:	f021 010c 	bic.w	r1, r1, #12
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1e:	6999      	ldr	r1, [r3, #24]
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	ea40 0301 	orr.w	r3, r0, r1
 8004e2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b8f      	ldr	r3, [pc, #572]	@ (8005070 <UART_SetConfig+0x2cc>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d005      	beq.n	8004e44 <UART_SetConfig+0xa0>
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b8d      	ldr	r3, [pc, #564]	@ (8005074 <UART_SetConfig+0x2d0>)
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d104      	bne.n	8004e4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fe ff66 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8004e48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e4c:	e003      	b.n	8004e56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e4e:	f7fe ff4d 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8004e52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e60:	f040 810c 	bne.w	800507c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e76:	4622      	mov	r2, r4
 8004e78:	462b      	mov	r3, r5
 8004e7a:	1891      	adds	r1, r2, r2
 8004e7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e7e:	415b      	adcs	r3, r3
 8004e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e86:	4621      	mov	r1, r4
 8004e88:	eb12 0801 	adds.w	r8, r2, r1
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	eb43 0901 	adc.w	r9, r3, r1
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea6:	4690      	mov	r8, r2
 8004ea8:	4699      	mov	r9, r3
 8004eaa:	4623      	mov	r3, r4
 8004eac:	eb18 0303 	adds.w	r3, r8, r3
 8004eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	eb49 0303 	adc.w	r3, r9, r3
 8004eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004eca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	18db      	adds	r3, r3, r3
 8004ed6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ed8:	4613      	mov	r3, r2
 8004eda:	eb42 0303 	adc.w	r3, r2, r3
 8004ede:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ee4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ee8:	f7fb f976 	bl	80001d8 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4b61      	ldr	r3, [pc, #388]	@ (8005078 <UART_SetConfig+0x2d4>)
 8004ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	011c      	lsls	r4, r3, #4
 8004efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	1891      	adds	r1, r2, r2
 8004f12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f14:	415b      	adcs	r3, r3
 8004f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f22:	4649      	mov	r1, r9
 8004f24:	eb43 0b01 	adc.w	fp, r3, r1
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f3c:	4692      	mov	sl, r2
 8004f3e:	469b      	mov	fp, r3
 8004f40:	4643      	mov	r3, r8
 8004f42:	eb1a 0303 	adds.w	r3, sl, r3
 8004f46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	18db      	adds	r3, r3, r3
 8004f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f6e:	4613      	mov	r3, r2
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f7e:	f7fb f92b 	bl	80001d8 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	4b3b      	ldr	r3, [pc, #236]	@ (8005078 <UART_SetConfig+0x2d4>)
 8004f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2264      	movs	r2, #100	@ 0x64
 8004f92:	fb02 f303 	mul.w	r3, r2, r3
 8004f96:	1acb      	subs	r3, r1, r3
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f9e:	4b36      	ldr	r3, [pc, #216]	@ (8005078 <UART_SetConfig+0x2d4>)
 8004fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fac:	441c      	add	r4, r3
 8004fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	1891      	adds	r1, r2, r2
 8004fc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fc8:	415b      	adcs	r3, r3
 8004fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	1851      	adds	r1, r2, r1
 8004fd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	414b      	adcs	r3, r1
 8004fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fe8:	4659      	mov	r1, fp
 8004fea:	00cb      	lsls	r3, r1, #3
 8004fec:	4651      	mov	r1, sl
 8004fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff2:	4651      	mov	r1, sl
 8004ff4:	00ca      	lsls	r2, r1, #3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	189b      	adds	r3, r3, r2
 8005000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005004:	464b      	mov	r3, r9
 8005006:	460a      	mov	r2, r1
 8005008:	eb42 0303 	adc.w	r3, r2, r3
 800500c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800501c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005024:	460b      	mov	r3, r1
 8005026:	18db      	adds	r3, r3, r3
 8005028:	62bb      	str	r3, [r7, #40]	@ 0x28
 800502a:	4613      	mov	r3, r2
 800502c:	eb42 0303 	adc.w	r3, r2, r3
 8005030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005036:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800503a:	f7fb f8cd 	bl	80001d8 <__aeabi_uldivmod>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4b0d      	ldr	r3, [pc, #52]	@ (8005078 <UART_SetConfig+0x2d4>)
 8005044:	fba3 1302 	umull	r1, r3, r3, r2
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	2164      	movs	r1, #100	@ 0x64
 800504c:	fb01 f303 	mul.w	r3, r1, r3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	3332      	adds	r3, #50	@ 0x32
 8005056:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <UART_SetConfig+0x2d4>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	f003 0207 	and.w	r2, r3, #7
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4422      	add	r2, r4
 800506a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800506c:	e106      	b.n	800527c <UART_SetConfig+0x4d8>
 800506e:	bf00      	nop
 8005070:	40011000 	.word	0x40011000
 8005074:	40011400 	.word	0x40011400
 8005078:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800507c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005080:	2200      	movs	r2, #0
 8005082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005086:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800508a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800508e:	4642      	mov	r2, r8
 8005090:	464b      	mov	r3, r9
 8005092:	1891      	adds	r1, r2, r2
 8005094:	6239      	str	r1, [r7, #32]
 8005096:	415b      	adcs	r3, r3
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
 800509a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800509e:	4641      	mov	r1, r8
 80050a0:	1854      	adds	r4, r2, r1
 80050a2:	4649      	mov	r1, r9
 80050a4:	eb43 0501 	adc.w	r5, r3, r1
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	00eb      	lsls	r3, r5, #3
 80050b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050b6:	00e2      	lsls	r2, r4, #3
 80050b8:	4614      	mov	r4, r2
 80050ba:	461d      	mov	r5, r3
 80050bc:	4643      	mov	r3, r8
 80050be:	18e3      	adds	r3, r4, r3
 80050c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050c4:	464b      	mov	r3, r9
 80050c6:	eb45 0303 	adc.w	r3, r5, r3
 80050ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050ea:	4629      	mov	r1, r5
 80050ec:	008b      	lsls	r3, r1, #2
 80050ee:	4621      	mov	r1, r4
 80050f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f4:	4621      	mov	r1, r4
 80050f6:	008a      	lsls	r2, r1, #2
 80050f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050fc:	f7fb f86c 	bl	80001d8 <__aeabi_uldivmod>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4b60      	ldr	r3, [pc, #384]	@ (8005288 <UART_SetConfig+0x4e4>)
 8005106:	fba3 2302 	umull	r2, r3, r3, r2
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	011c      	lsls	r4, r3, #4
 800510e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005112:	2200      	movs	r2, #0
 8005114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005118:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800511c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005120:	4642      	mov	r2, r8
 8005122:	464b      	mov	r3, r9
 8005124:	1891      	adds	r1, r2, r2
 8005126:	61b9      	str	r1, [r7, #24]
 8005128:	415b      	adcs	r3, r3
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005130:	4641      	mov	r1, r8
 8005132:	1851      	adds	r1, r2, r1
 8005134:	6139      	str	r1, [r7, #16]
 8005136:	4649      	mov	r1, r9
 8005138:	414b      	adcs	r3, r1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005148:	4659      	mov	r1, fp
 800514a:	00cb      	lsls	r3, r1, #3
 800514c:	4651      	mov	r1, sl
 800514e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005152:	4651      	mov	r1, sl
 8005154:	00ca      	lsls	r2, r1, #3
 8005156:	4610      	mov	r0, r2
 8005158:	4619      	mov	r1, r3
 800515a:	4603      	mov	r3, r0
 800515c:	4642      	mov	r2, r8
 800515e:	189b      	adds	r3, r3, r2
 8005160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005164:	464b      	mov	r3, r9
 8005166:	460a      	mov	r2, r1
 8005168:	eb42 0303 	adc.w	r3, r2, r3
 800516c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	67bb      	str	r3, [r7, #120]	@ 0x78
 800517a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005188:	4649      	mov	r1, r9
 800518a:	008b      	lsls	r3, r1, #2
 800518c:	4641      	mov	r1, r8
 800518e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005192:	4641      	mov	r1, r8
 8005194:	008a      	lsls	r2, r1, #2
 8005196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800519a:	f7fb f81d 	bl	80001d8 <__aeabi_uldivmod>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4611      	mov	r1, r2
 80051a4:	4b38      	ldr	r3, [pc, #224]	@ (8005288 <UART_SetConfig+0x4e4>)
 80051a6:	fba3 2301 	umull	r2, r3, r3, r1
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	2264      	movs	r2, #100	@ 0x64
 80051ae:	fb02 f303 	mul.w	r3, r2, r3
 80051b2:	1acb      	subs	r3, r1, r3
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	3332      	adds	r3, #50	@ 0x32
 80051b8:	4a33      	ldr	r2, [pc, #204]	@ (8005288 <UART_SetConfig+0x4e4>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051c4:	441c      	add	r4, r3
 80051c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ca:	2200      	movs	r2, #0
 80051cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80051ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80051d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051d4:	4642      	mov	r2, r8
 80051d6:	464b      	mov	r3, r9
 80051d8:	1891      	adds	r1, r2, r2
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	415b      	adcs	r3, r3
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e4:	4641      	mov	r1, r8
 80051e6:	1851      	adds	r1, r2, r1
 80051e8:	6039      	str	r1, [r7, #0]
 80051ea:	4649      	mov	r1, r9
 80051ec:	414b      	adcs	r3, r1
 80051ee:	607b      	str	r3, [r7, #4]
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051fc:	4659      	mov	r1, fp
 80051fe:	00cb      	lsls	r3, r1, #3
 8005200:	4651      	mov	r1, sl
 8005202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005206:	4651      	mov	r1, sl
 8005208:	00ca      	lsls	r2, r1, #3
 800520a:	4610      	mov	r0, r2
 800520c:	4619      	mov	r1, r3
 800520e:	4603      	mov	r3, r0
 8005210:	4642      	mov	r2, r8
 8005212:	189b      	adds	r3, r3, r2
 8005214:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005216:	464b      	mov	r3, r9
 8005218:	460a      	mov	r2, r1
 800521a:	eb42 0303 	adc.w	r3, r2, r3
 800521e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	663b      	str	r3, [r7, #96]	@ 0x60
 800522a:	667a      	str	r2, [r7, #100]	@ 0x64
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005238:	4649      	mov	r1, r9
 800523a:	008b      	lsls	r3, r1, #2
 800523c:	4641      	mov	r1, r8
 800523e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005242:	4641      	mov	r1, r8
 8005244:	008a      	lsls	r2, r1, #2
 8005246:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800524a:	f7fa ffc5 	bl	80001d8 <__aeabi_uldivmod>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4b0d      	ldr	r3, [pc, #52]	@ (8005288 <UART_SetConfig+0x4e4>)
 8005254:	fba3 1302 	umull	r1, r3, r3, r2
 8005258:	095b      	lsrs	r3, r3, #5
 800525a:	2164      	movs	r1, #100	@ 0x64
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	3332      	adds	r3, #50	@ 0x32
 8005266:	4a08      	ldr	r2, [pc, #32]	@ (8005288 <UART_SetConfig+0x4e4>)
 8005268:	fba2 2303 	umull	r2, r3, r2, r3
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	f003 020f 	and.w	r2, r3, #15
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4422      	add	r2, r4
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005282:	46bd      	mov	sp, r7
 8005284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005288:	51eb851f 	.word	0x51eb851f

0800528c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800528c:	b084      	sub	sp, #16
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	f107 001c 	add.w	r0, r7, #28
 800529a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800529e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d123      	bne.n	80052ee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80052ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d105      	bne.n	80052e2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f001 fae8 	bl	80068b8 <USB_CoreReset>
 80052e8:	4603      	mov	r3, r0
 80052ea:	73fb      	strb	r3, [r7, #15]
 80052ec:	e01b      	b.n	8005326 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f001 fadc 	bl	80068b8 <USB_CoreReset>
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005304:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005308:	2b00      	cmp	r3, #0
 800530a:	d106      	bne.n	800531a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005310:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	639a      	str	r2, [r3, #56]	@ 0x38
 8005318:	e005      	b.n	8005326 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005326:	7fbb      	ldrb	r3, [r7, #30]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d10b      	bne.n	8005344 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f043 0206 	orr.w	r2, r3, #6
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f043 0220 	orr.w	r2, r3, #32
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005350:	b004      	add	sp, #16
 8005352:	4770      	bx	lr

08005354 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	4613      	mov	r3, r2
 8005360:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d165      	bne.n	8005434 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a41      	ldr	r2, [pc, #260]	@ (8005470 <USB_SetTurnaroundTime+0x11c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d906      	bls.n	800537e <USB_SetTurnaroundTime+0x2a>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a40      	ldr	r2, [pc, #256]	@ (8005474 <USB_SetTurnaroundTime+0x120>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d202      	bcs.n	800537e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005378:	230f      	movs	r3, #15
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	e062      	b.n	8005444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4a3c      	ldr	r2, [pc, #240]	@ (8005474 <USB_SetTurnaroundTime+0x120>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d306      	bcc.n	8005394 <USB_SetTurnaroundTime+0x40>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4a3b      	ldr	r2, [pc, #236]	@ (8005478 <USB_SetTurnaroundTime+0x124>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d202      	bcs.n	8005394 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800538e:	230e      	movs	r3, #14
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	e057      	b.n	8005444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4a38      	ldr	r2, [pc, #224]	@ (8005478 <USB_SetTurnaroundTime+0x124>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d306      	bcc.n	80053aa <USB_SetTurnaroundTime+0x56>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4a37      	ldr	r2, [pc, #220]	@ (800547c <USB_SetTurnaroundTime+0x128>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d202      	bcs.n	80053aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053a4:	230d      	movs	r3, #13
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e04c      	b.n	8005444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4a33      	ldr	r2, [pc, #204]	@ (800547c <USB_SetTurnaroundTime+0x128>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d306      	bcc.n	80053c0 <USB_SetTurnaroundTime+0x6c>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	4a32      	ldr	r2, [pc, #200]	@ (8005480 <USB_SetTurnaroundTime+0x12c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d802      	bhi.n	80053c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053ba:	230c      	movs	r3, #12
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e041      	b.n	8005444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4a2f      	ldr	r2, [pc, #188]	@ (8005480 <USB_SetTurnaroundTime+0x12c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d906      	bls.n	80053d6 <USB_SetTurnaroundTime+0x82>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4a2e      	ldr	r2, [pc, #184]	@ (8005484 <USB_SetTurnaroundTime+0x130>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d802      	bhi.n	80053d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053d0:	230b      	movs	r3, #11
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e036      	b.n	8005444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005484 <USB_SetTurnaroundTime+0x130>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d906      	bls.n	80053ec <USB_SetTurnaroundTime+0x98>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	4a29      	ldr	r2, [pc, #164]	@ (8005488 <USB_SetTurnaroundTime+0x134>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d802      	bhi.n	80053ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053e6:	230a      	movs	r3, #10
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e02b      	b.n	8005444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4a26      	ldr	r2, [pc, #152]	@ (8005488 <USB_SetTurnaroundTime+0x134>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d906      	bls.n	8005402 <USB_SetTurnaroundTime+0xae>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4a25      	ldr	r2, [pc, #148]	@ (800548c <USB_SetTurnaroundTime+0x138>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d202      	bcs.n	8005402 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053fc:	2309      	movs	r3, #9
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	e020      	b.n	8005444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4a21      	ldr	r2, [pc, #132]	@ (800548c <USB_SetTurnaroundTime+0x138>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d306      	bcc.n	8005418 <USB_SetTurnaroundTime+0xc4>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4a20      	ldr	r2, [pc, #128]	@ (8005490 <USB_SetTurnaroundTime+0x13c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d802      	bhi.n	8005418 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005412:	2308      	movs	r3, #8
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	e015      	b.n	8005444 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4a1d      	ldr	r2, [pc, #116]	@ (8005490 <USB_SetTurnaroundTime+0x13c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d906      	bls.n	800542e <USB_SetTurnaroundTime+0xda>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4a1c      	ldr	r2, [pc, #112]	@ (8005494 <USB_SetTurnaroundTime+0x140>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d202      	bcs.n	800542e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005428:	2307      	movs	r3, #7
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	e00a      	b.n	8005444 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800542e:	2306      	movs	r3, #6
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	e007      	b.n	8005444 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d102      	bne.n	8005440 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800543a:	2309      	movs	r3, #9
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e001      	b.n	8005444 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005440:	2309      	movs	r3, #9
 8005442:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	029b      	lsls	r3, r3, #10
 8005458:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800545c:	431a      	orrs	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	00d8acbf 	.word	0x00d8acbf
 8005474:	00e4e1c0 	.word	0x00e4e1c0
 8005478:	00f42400 	.word	0x00f42400
 800547c:	01067380 	.word	0x01067380
 8005480:	011a499f 	.word	0x011a499f
 8005484:	01312cff 	.word	0x01312cff
 8005488:	014ca43f 	.word	0x014ca43f
 800548c:	016e3600 	.word	0x016e3600
 8005490:	01a6ab1f 	.word	0x01a6ab1f
 8005494:	01e84800 	.word	0x01e84800

08005498 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f043 0201 	orr.w	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d115      	bne.n	800552a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800550a:	200a      	movs	r0, #10
 800550c:	f7fb fe96 	bl	800123c <HAL_Delay>
      ms += 10U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	330a      	adds	r3, #10
 8005514:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f001 f93f 	bl	800679a <USB_GetMode>
 800551c:	4603      	mov	r3, r0
 800551e:	2b01      	cmp	r3, #1
 8005520:	d01e      	beq.n	8005560 <USB_SetCurrentMode+0x84>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2bc7      	cmp	r3, #199	@ 0xc7
 8005526:	d9f0      	bls.n	800550a <USB_SetCurrentMode+0x2e>
 8005528:	e01a      	b.n	8005560 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d115      	bne.n	800555c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800553c:	200a      	movs	r0, #10
 800553e:	f7fb fe7d 	bl	800123c <HAL_Delay>
      ms += 10U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	330a      	adds	r3, #10
 8005546:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f001 f926 	bl	800679a <USB_GetMode>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <USB_SetCurrentMode+0x84>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2bc7      	cmp	r3, #199	@ 0xc7
 8005558:	d9f0      	bls.n	800553c <USB_SetCurrentMode+0x60>
 800555a:	e001      	b.n	8005560 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e005      	b.n	800556c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2bc8      	cmp	r3, #200	@ 0xc8
 8005564:	d101      	bne.n	800556a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005574:	b084      	sub	sp, #16
 8005576:	b580      	push	{r7, lr}
 8005578:	b086      	sub	sp, #24
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	e009      	b.n	80055a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	3340      	adds	r3, #64	@ 0x40
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	2200      	movs	r2, #0
 80055a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	3301      	adds	r3, #1
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b0e      	cmp	r3, #14
 80055ac:	d9f2      	bls.n	8005594 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d11c      	bne.n	80055f0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055c4:	f043 0302 	orr.w	r3, r3, #2
 80055c8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055da:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80055ee:	e00b      	b.n	8005608 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005600:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800560e:	461a      	mov	r2, r3
 8005610:	2300      	movs	r3, #0
 8005612:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005614:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005618:	2b01      	cmp	r3, #1
 800561a:	d10d      	bne.n	8005638 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800561c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005624:	2100      	movs	r1, #0
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f968 	bl	80058fc <USB_SetDevSpeed>
 800562c:	e008      	b.n	8005640 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800562e:	2101      	movs	r1, #1
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f963 	bl	80058fc <USB_SetDevSpeed>
 8005636:	e003      	b.n	8005640 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005638:	2103      	movs	r1, #3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f95e 	bl	80058fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005640:	2110      	movs	r1, #16
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f8fa 	bl	800583c <USB_FlushTxFifo>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f924 	bl	80058a0 <USB_FlushRxFifo>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005668:	461a      	mov	r2, r3
 800566a:	2300      	movs	r3, #0
 800566c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005674:	461a      	mov	r2, r3
 8005676:	2300      	movs	r3, #0
 8005678:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005680:	461a      	mov	r2, r3
 8005682:	2300      	movs	r3, #0
 8005684:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005686:	2300      	movs	r3, #0
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	e043      	b.n	8005714 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800569e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056a2:	d118      	bne.n	80056d6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b6:	461a      	mov	r2, r3
 80056b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	e013      	b.n	80056e8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056cc:	461a      	mov	r2, r3
 80056ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	e008      	b.n	80056e8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e2:	461a      	mov	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f4:	461a      	mov	r2, r3
 80056f6:	2300      	movs	r3, #0
 80056f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005706:	461a      	mov	r2, r3
 8005708:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800570c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	3301      	adds	r3, #1
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005718:	461a      	mov	r2, r3
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4293      	cmp	r3, r2
 800571e:	d3b5      	bcc.n	800568c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005720:	2300      	movs	r3, #0
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	e043      	b.n	80057ae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005738:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800573c:	d118      	bne.n	8005770 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005750:	461a      	mov	r2, r3
 8005752:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e013      	b.n	8005782 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005766:	461a      	mov	r2, r3
 8005768:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e008      	b.n	8005782 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577c:	461a      	mov	r2, r3
 800577e:	2300      	movs	r3, #0
 8005780:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578e:	461a      	mov	r2, r3
 8005790:	2300      	movs	r3, #0
 8005792:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a0:	461a      	mov	r2, r3
 80057a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	3301      	adds	r3, #1
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057b2:	461a      	mov	r2, r3
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d3b5      	bcc.n	8005726 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80057da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d105      	bne.n	80057f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f043 0210 	orr.w	r2, r3, #16
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699a      	ldr	r2, [r3, #24]
 80057f4:	4b10      	ldr	r3, [pc, #64]	@ (8005838 <USB_DevInit+0x2c4>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f043 0208 	orr.w	r2, r3, #8
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005810:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005814:	2b01      	cmp	r3, #1
 8005816:	d107      	bne.n	8005828 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005820:	f043 0304 	orr.w	r3, r3, #4
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005828:	7dfb      	ldrb	r3, [r7, #23]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005834:	b004      	add	sp, #16
 8005836:	4770      	bx	lr
 8005838:	803c3800 	.word	0x803c3800

0800583c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3301      	adds	r3, #1
 800584e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005856:	d901      	bls.n	800585c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e01b      	b.n	8005894 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	daf2      	bge.n	800584a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	019b      	lsls	r3, r3, #6
 800586c:	f043 0220 	orr.w	r2, r3, #32
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005880:	d901      	bls.n	8005886 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e006      	b.n	8005894 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b20      	cmp	r3, #32
 8005890:	d0f0      	beq.n	8005874 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3301      	adds	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058b8:	d901      	bls.n	80058be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e018      	b.n	80058f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	daf2      	bge.n	80058ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2210      	movs	r2, #16
 80058ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3301      	adds	r3, #1
 80058d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058dc:	d901      	bls.n	80058e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e006      	b.n	80058f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b10      	cmp	r3, #16
 80058ec:	d0f0      	beq.n	80058d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	68f9      	ldr	r1, [r7, #12]
 8005918:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800591c:	4313      	orrs	r3, r2
 800591e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800592e:	b480      	push	{r7}
 8005930:	b087      	sub	sp, #28
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0306 	and.w	r3, r3, #6
 8005946:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]
 8005952:	e00a      	b.n	800596a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d002      	beq.n	8005960 <USB_GetDevSpeed+0x32>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b06      	cmp	r3, #6
 800595e:	d102      	bne.n	8005966 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005960:	2302      	movs	r3, #2
 8005962:	75fb      	strb	r3, [r7, #23]
 8005964:	e001      	b.n	800596a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005966:	230f      	movs	r3, #15
 8005968:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800596a:	7dfb      	ldrb	r3, [r7, #23]
}
 800596c:	4618      	mov	r0, r3
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d13a      	bne.n	8005a0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599a:	69da      	ldr	r2, [r3, #28]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	68f9      	ldr	r1, [r7, #12]
 80059ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059b2:	4313      	orrs	r3, r2
 80059b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d155      	bne.n	8005a78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	791b      	ldrb	r3, [r3, #4]
 80059e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	059b      	lsls	r3, r3, #22
 80059ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059f0:	4313      	orrs	r3, r2
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	e036      	b.n	8005a78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a20:	041b      	lsls	r3, r3, #16
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11a      	bne.n	8005a78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	791b      	ldrb	r3, [r3, #4]
 8005a5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	4313      	orrs	r3, r2
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d161      	bne.n	8005b68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aba:	d11f      	bne.n	8005afc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	0151      	lsls	r1, r2, #5
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ad6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ada:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005af6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005afa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	43db      	mvns	r3, r3
 8005b16:	68f9      	ldr	r1, [r7, #12]
 8005b18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	2101      	movs	r1, #1
 8005b32:	fa01 f303 	lsl.w	r3, r1, r3
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b40:	4013      	ands	r3, r2
 8005b42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	0159      	lsls	r1, r3, #5
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	440b      	add	r3, r1
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4b35      	ldr	r3, [pc, #212]	@ (8005c38 <USB_DeactivateEndpoint+0x1b0>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]
 8005b66:	e060      	b.n	8005c2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b7e:	d11f      	bne.n	8005bc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd6:	041b      	lsls	r3, r3, #16
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	68f9      	ldr	r1, [r7, #12]
 8005bdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005be0:	4013      	ands	r3, r2
 8005be2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bea:	69da      	ldr	r2, [r3, #28]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfa:	041b      	lsls	r3, r3, #16
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	68f9      	ldr	r1, [r7, #12]
 8005c00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c04:	4013      	ands	r3, r2
 8005c06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	0159      	lsls	r1, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	440b      	add	r3, r1
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c22:	4619      	mov	r1, r3
 8005c24:	4b05      	ldr	r3, [pc, #20]	@ (8005c3c <USB_DeactivateEndpoint+0x1b4>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	ec337800 	.word	0xec337800
 8005c3c:	eff37800 	.word	0xeff37800

08005c40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	@ 0x28
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f040 817f 	bne.w	8005f60 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d132      	bne.n	8005cd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c84:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c88:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc8:	0cdb      	lsrs	r3, r3, #19
 8005cca:	04db      	lsls	r3, r3, #19
 8005ccc:	6113      	str	r3, [r2, #16]
 8005cce:	e097      	b.n	8005e00 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	0151      	lsls	r1, r2, #5
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cea:	0cdb      	lsrs	r3, r3, #19
 8005cec:	04db      	lsls	r3, r3, #19
 8005cee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d0a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d0e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d12:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d11a      	bne.n	8005d50 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	691a      	ldr	r2, [r3, #16]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d903      	bls.n	8005d2e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d4c:	6113      	str	r3, [r2, #16]
 8005d4e:	e044      	b.n	8005dda <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	4413      	add	r3, r2
 8005d5a:	1e5a      	subs	r2, r3, #1
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	8afb      	ldrh	r3, [r7, #22]
 8005d76:	04d9      	lsls	r1, r3, #19
 8005d78:	4ba4      	ldr	r3, [pc, #656]	@ (800600c <USB_EPStartXfer+0x3cc>)
 8005d7a:	400b      	ands	r3, r1
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	0148      	lsls	r0, r1, #5
 8005d80:	69f9      	ldr	r1, [r7, #28]
 8005d82:	4401      	add	r1, r0
 8005d84:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	791b      	ldrb	r3, [r3, #4]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d122      	bne.n	8005dda <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005db2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	8afb      	ldrh	r3, [r7, #22]
 8005dc4:	075b      	lsls	r3, r3, #29
 8005dc6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005dca:	69b9      	ldr	r1, [r7, #24]
 8005dcc:	0148      	lsls	r0, r1, #5
 8005dce:	69f9      	ldr	r1, [r7, #28]
 8005dd0:	4401      	add	r1, r0
 8005dd2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df0:	69b9      	ldr	r1, [r7, #24]
 8005df2:	0148      	lsls	r0, r1, #5
 8005df4:	69f9      	ldr	r1, [r7, #28]
 8005df6:	4401      	add	r1, r0
 8005df8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d14b      	bne.n	8005e9e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	791b      	ldrb	r3, [r3, #4]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d128      	bne.n	8005e7c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d110      	bne.n	8005e5c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e00f      	b.n	8005e7c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e7a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	e166      	b.n	800616c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eb8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ebc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	791b      	ldrb	r3, [r3, #4]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d015      	beq.n	8005ef2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 814e 	beq.w	800616c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee6:	69f9      	ldr	r1, [r7, #28]
 8005ee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005eec:	4313      	orrs	r3, r2
 8005eee:	634b      	str	r3, [r1, #52]	@ 0x34
 8005ef0:	e13c      	b.n	800616c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d110      	bne.n	8005f24 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	e00f      	b.n	8005f44 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f42:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	68d9      	ldr	r1, [r3, #12]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	b298      	uxth	r0, r3
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	4603      	mov	r3, r0
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f9b9 	bl	80062d0 <USB_WritePacket>
 8005f5e:	e105      	b.n	800616c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f7a:	0cdb      	lsrs	r3, r3, #19
 8005f7c:	04db      	lsls	r3, r3, #19
 8005f7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f9a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f9e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005fa2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d132      	bne.n	8006010 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd8:	69b9      	ldr	r1, [r7, #24]
 8005fda:	0148      	lsls	r0, r1, #5
 8005fdc:	69f9      	ldr	r1, [r7, #28]
 8005fde:	4401      	add	r1, r0
 8005fe0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006002:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006006:	6113      	str	r3, [r2, #16]
 8006008:	e062      	b.n	80060d0 <USB_EPStartXfer+0x490>
 800600a:	bf00      	nop
 800600c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d123      	bne.n	8006060 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800602e:	69b9      	ldr	r1, [r7, #24]
 8006030:	0148      	lsls	r0, r1, #5
 8006032:	69f9      	ldr	r1, [r7, #28]
 8006034:	4401      	add	r1, r0
 8006036:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800603a:	4313      	orrs	r3, r2
 800603c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	69fa      	ldr	r2, [r7, #28]
 8006052:	440a      	add	r2, r1
 8006054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006058:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800605c:	6113      	str	r3, [r2, #16]
 800605e:	e037      	b.n	80060d0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	4413      	add	r3, r2
 800606a:	1e5a      	subs	r2, r3, #1
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	fbb2 f3f3 	udiv	r3, r2, r3
 8006074:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	8afa      	ldrh	r2, [r7, #22]
 800607c:	fb03 f202 	mul.w	r2, r3, r2
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006090:	691a      	ldr	r2, [r3, #16]
 8006092:	8afb      	ldrh	r3, [r7, #22]
 8006094:	04d9      	lsls	r1, r3, #19
 8006096:	4b38      	ldr	r3, [pc, #224]	@ (8006178 <USB_EPStartXfer+0x538>)
 8006098:	400b      	ands	r3, r1
 800609a:	69b9      	ldr	r1, [r7, #24]
 800609c:	0148      	lsls	r0, r1, #5
 800609e:	69f9      	ldr	r1, [r7, #28]
 80060a0:	4401      	add	r1, r0
 80060a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060a6:	4313      	orrs	r3, r2
 80060a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c0:	69b9      	ldr	r1, [r7, #24]
 80060c2:	0148      	lsls	r0, r1, #5
 80060c4:	69f9      	ldr	r1, [r7, #28]
 80060c6:	4401      	add	r1, r0
 80060c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060cc:	4313      	orrs	r3, r2
 80060ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d10d      	bne.n	80060f2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	68d9      	ldr	r1, [r3, #12]
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ee:	460a      	mov	r2, r1
 80060f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	791b      	ldrb	r3, [r3, #4]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d128      	bne.n	800614c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d110      	bne.n	800612c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	440a      	add	r2, r1
 8006120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006124:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e00f      	b.n	800614c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800614a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006166:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800616a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	1ff80000 	.word	0x1ff80000

0800617c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d14a      	bne.n	8006230 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061b2:	f040 8086 	bne.w	80062c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	7812      	ldrb	r2, [r2, #0]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	7812      	ldrb	r2, [r2, #0]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3301      	adds	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f242 7210 	movw	r2, #10000	@ 0x2710
 800620a:	4293      	cmp	r3, r2
 800620c:	d902      	bls.n	8006214 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	75fb      	strb	r3, [r7, #23]
          break;
 8006212:	e056      	b.n	80062c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006228:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800622c:	d0e7      	beq.n	80061fe <USB_EPStopXfer+0x82>
 800622e:	e048      	b.n	80062c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006248:	d13b      	bne.n	80062c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	7812      	ldrb	r2, [r2, #0]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006268:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800626c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	7812      	ldrb	r2, [r2, #0]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800628c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006290:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3301      	adds	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800629e:	4293      	cmp	r3, r2
 80062a0:	d902      	bls.n	80062a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	75fb      	strb	r3, [r7, #23]
          break;
 80062a6:	e00c      	b.n	80062c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062c0:	d0e7      	beq.n	8006292 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b089      	sub	sp, #36	@ 0x24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4611      	mov	r1, r2
 80062dc:	461a      	mov	r2, r3
 80062de:	460b      	mov	r3, r1
 80062e0:	71fb      	strb	r3, [r7, #7]
 80062e2:	4613      	mov	r3, r2
 80062e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d123      	bne.n	800633e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062f6:	88bb      	ldrh	r3, [r7, #4]
 80062f8:	3303      	adds	r3, #3
 80062fa:	089b      	lsrs	r3, r3, #2
 80062fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062fe:	2300      	movs	r3, #0
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	e018      	b.n	8006336 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	031a      	lsls	r2, r3, #12
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4413      	add	r3, r2
 800630c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006310:	461a      	mov	r2, r3
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	3301      	adds	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	3301      	adds	r3, #1
 8006322:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	3301      	adds	r3, #1
 8006328:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	3301      	adds	r3, #1
 800632e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	3301      	adds	r3, #1
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	429a      	cmp	r2, r3
 800633c:	d3e2      	bcc.n	8006304 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3724      	adds	r7, #36	@ 0x24
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800634c:	b480      	push	{r7}
 800634e:	b08b      	sub	sp, #44	@ 0x2c
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	4613      	mov	r3, r2
 8006358:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	089b      	lsrs	r3, r3, #2
 8006366:	b29b      	uxth	r3, r3
 8006368:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006372:	2300      	movs	r3, #0
 8006374:	623b      	str	r3, [r7, #32]
 8006376:	e014      	b.n	80063a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	601a      	str	r2, [r3, #0]
    pDest++;
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	3301      	adds	r3, #1
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	3301      	adds	r3, #1
 800638e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	3301      	adds	r3, #1
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	3301      	adds	r3, #1
 800639a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	3301      	adds	r3, #1
 80063a0:	623b      	str	r3, [r7, #32]
 80063a2:	6a3a      	ldr	r2, [r7, #32]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d3e6      	bcc.n	8006378 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063aa:	8bfb      	ldrh	r3, [r7, #30]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01e      	beq.n	80063ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ba:	461a      	mov	r2, r3
 80063bc:	f107 0310 	add.w	r3, r7, #16
 80063c0:	6812      	ldr	r2, [r2, #0]
 80063c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	701a      	strb	r2, [r3, #0]
      i++;
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	3301      	adds	r3, #1
 80063da:	623b      	str	r3, [r7, #32]
      pDest++;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	3301      	adds	r3, #1
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80063e2:	8bfb      	ldrh	r3, [r7, #30]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063e8:	8bfb      	ldrh	r3, [r7, #30]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1ea      	bne.n	80063c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	372c      	adds	r7, #44	@ 0x2c
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d12c      	bne.n	8006472 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	db12      	blt.n	8006450 <USB_EPSetStall+0x54>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00f      	beq.n	8006450 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	440a      	add	r2, r1
 8006446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800644a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800644e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800646a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	e02b      	b.n	80064ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	db12      	blt.n	80064aa <USB_EPSetStall+0xae>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00f      	beq.n	80064aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	785b      	ldrb	r3, [r3, #1]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d128      	bne.n	8006546 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	0151      	lsls	r1, r2, #5
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	440a      	add	r2, r1
 800650a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800650e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006512:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	791b      	ldrb	r3, [r3, #4]
 8006518:	2b03      	cmp	r3, #3
 800651a:	d003      	beq.n	8006524 <USB_EPClearStall+0x4c>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	791b      	ldrb	r3, [r3, #4]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d138      	bne.n	8006596 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800653e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	e027      	b.n	8006596 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	0151      	lsls	r1, r2, #5
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	440a      	add	r2, r1
 800655c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006560:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006564:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	791b      	ldrb	r3, [r3, #4]
 800656a:	2b03      	cmp	r3, #3
 800656c:	d003      	beq.n	8006576 <USB_EPClearStall+0x9e>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	791b      	ldrb	r3, [r3, #4]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d10f      	bne.n	8006596 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	440a      	add	r2, r1
 800658c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006594:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80065c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80065d8:	68f9      	ldr	r1, [r7, #12]
 80065da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065de:	4313      	orrs	r3, r2
 80065e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800660a:	f023 0303 	bic.w	r3, r3, #3
 800660e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800661e:	f023 0302 	bic.w	r3, r3, #2
 8006622:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800664c:	f023 0303 	bic.w	r3, r3, #3
 8006650:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006660:	f043 0302 	orr.w	r3, r3, #2
 8006664:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4013      	ands	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800668c:	68fb      	ldr	r3, [r7, #12]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	4013      	ands	r3, r2
 80066bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	0c1b      	lsrs	r3, r3, #16
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b085      	sub	sp, #20
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	4013      	ands	r3, r2
 80066f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	b29b      	uxth	r3, r3
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	4013      	ands	r3, r2
 800672e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006730:	68bb      	ldr	r3, [r7, #8]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800673e:	b480      	push	{r7}
 8006740:	b087      	sub	sp, #28
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800675e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006760:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	fa22 f303 	lsr.w	r3, r2, r3
 800676e:	01db      	lsls	r3, r3, #7
 8006770:	b2db      	uxtb	r3, r3
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4013      	ands	r3, r2
 800678a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800678c:	68bb      	ldr	r3, [r7, #8]
}
 800678e:	4618      	mov	r0, r3
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	f003 0301 	and.w	r3, r3, #1
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80067d4:	f023 0307 	bic.w	r3, r3, #7
 80067d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	460b      	mov	r3, r1
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	333c      	adds	r3, #60	@ 0x3c
 8006812:	3304      	adds	r3, #4
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4a26      	ldr	r2, [pc, #152]	@ (80068b4 <USB_EP0_OutStart+0xb8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d90a      	bls.n	8006836 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800682c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006830:	d101      	bne.n	8006836 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	e037      	b.n	80068a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683c:	461a      	mov	r2, r3
 800683e:	2300      	movs	r3, #0
 8006840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006850:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006854:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006864:	f043 0318 	orr.w	r3, r3, #24
 8006868:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006878:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800687c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800687e:	7afb      	ldrb	r3, [r7, #11]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d10f      	bne.n	80068a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800688a:	461a      	mov	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800689e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80068a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	4f54300a 	.word	0x4f54300a

080068b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3301      	adds	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068d0:	d901      	bls.n	80068d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e01b      	b.n	800690e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	daf2      	bge.n	80068c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f043 0201 	orr.w	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3301      	adds	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068fa:	d901      	bls.n	8006900 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e006      	b.n	800690e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b01      	cmp	r3, #1
 800690a:	d0f0      	beq.n	80068ee <USB_CoreReset+0x36>

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
	...

0800691c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006928:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800692c:	f002 fca2 	bl	8009274 <USBD_static_malloc>
 8006930:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	32b0      	adds	r2, #176	@ 0xb0
 8006942:	2100      	movs	r1, #0
 8006944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006948:	2302      	movs	r3, #2
 800694a:	e0d4      	b.n	8006af6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800694c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006950:	2100      	movs	r1, #0
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f002 fcd2 	bl	80092fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	32b0      	adds	r2, #176	@ 0xb0
 8006962:	68f9      	ldr	r1, [r7, #12]
 8006964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	32b0      	adds	r2, #176	@ 0xb0
 8006972:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	7c1b      	ldrb	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d138      	bne.n	80069f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006984:	4b5e      	ldr	r3, [pc, #376]	@ (8006b00 <USBD_CDC_Init+0x1e4>)
 8006986:	7819      	ldrb	r1, [r3, #0]
 8006988:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800698c:	2202      	movs	r2, #2
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f002 fb4d 	bl	800902e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006994:	4b5a      	ldr	r3, [pc, #360]	@ (8006b00 <USBD_CDC_Init+0x1e4>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f003 020f 	and.w	r2, r3, #15
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	4613      	mov	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	440b      	add	r3, r1
 80069a8:	3324      	adds	r3, #36	@ 0x24
 80069aa:	2201      	movs	r2, #1
 80069ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069ae:	4b55      	ldr	r3, [pc, #340]	@ (8006b04 <USBD_CDC_Init+0x1e8>)
 80069b0:	7819      	ldrb	r1, [r3, #0]
 80069b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069b6:	2202      	movs	r2, #2
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f002 fb38 	bl	800902e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069be:	4b51      	ldr	r3, [pc, #324]	@ (8006b04 <USBD_CDC_Init+0x1e8>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	f003 020f 	and.w	r2, r3, #15
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80069d6:	2201      	movs	r2, #1
 80069d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80069da:	4b4b      	ldr	r3, [pc, #300]	@ (8006b08 <USBD_CDC_Init+0x1ec>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	f003 020f 	and.w	r2, r3, #15
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	3326      	adds	r3, #38	@ 0x26
 80069f0:	2210      	movs	r2, #16
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	e035      	b.n	8006a62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80069f6:	4b42      	ldr	r3, [pc, #264]	@ (8006b00 <USBD_CDC_Init+0x1e4>)
 80069f8:	7819      	ldrb	r1, [r3, #0]
 80069fa:	2340      	movs	r3, #64	@ 0x40
 80069fc:	2202      	movs	r2, #2
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f002 fb15 	bl	800902e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a04:	4b3e      	ldr	r3, [pc, #248]	@ (8006b00 <USBD_CDC_Init+0x1e4>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	f003 020f 	and.w	r2, r3, #15
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	440b      	add	r3, r1
 8006a18:	3324      	adds	r3, #36	@ 0x24
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006a1e:	4b39      	ldr	r3, [pc, #228]	@ (8006b04 <USBD_CDC_Init+0x1e8>)
 8006a20:	7819      	ldrb	r1, [r3, #0]
 8006a22:	2340      	movs	r3, #64	@ 0x40
 8006a24:	2202      	movs	r2, #2
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f002 fb01 	bl	800902e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006a2c:	4b35      	ldr	r3, [pc, #212]	@ (8006b04 <USBD_CDC_Init+0x1e8>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f003 020f 	and.w	r2, r3, #15
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	440b      	add	r3, r1
 8006a40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a44:	2201      	movs	r2, #1
 8006a46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a48:	4b2f      	ldr	r3, [pc, #188]	@ (8006b08 <USBD_CDC_Init+0x1ec>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	f003 020f 	and.w	r2, r3, #15
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	440b      	add	r3, r1
 8006a5c:	3326      	adds	r3, #38	@ 0x26
 8006a5e:	2210      	movs	r2, #16
 8006a60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a62:	4b29      	ldr	r3, [pc, #164]	@ (8006b08 <USBD_CDC_Init+0x1ec>)
 8006a64:	7819      	ldrb	r1, [r3, #0]
 8006a66:	2308      	movs	r3, #8
 8006a68:	2203      	movs	r2, #3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f002 fadf 	bl	800902e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006a70:	4b25      	ldr	r3, [pc, #148]	@ (8006b08 <USBD_CDC_Init+0x1ec>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	f003 020f 	and.w	r2, r3, #15
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	440b      	add	r3, r1
 8006a84:	3324      	adds	r3, #36	@ 0x24
 8006a86:	2201      	movs	r2, #1
 8006a88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	33b0      	adds	r3, #176	@ 0xb0
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e018      	b.n	8006af6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7c1b      	ldrb	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006acc:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <USBD_CDC_Init+0x1e8>)
 8006ace:	7819      	ldrb	r1, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f002 fb96 	bl	800920c <USBD_LL_PrepareReceive>
 8006ae0:	e008      	b.n	8006af4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ae2:	4b08      	ldr	r3, [pc, #32]	@ (8006b04 <USBD_CDC_Init+0x1e8>)
 8006ae4:	7819      	ldrb	r1, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006aec:	2340      	movs	r3, #64	@ 0x40
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f002 fb8c 	bl	800920c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20000093 	.word	0x20000093
 8006b04:	20000094 	.word	0x20000094
 8006b08:	20000095 	.word	0x20000095

08006b0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006b18:	4b3a      	ldr	r3, [pc, #232]	@ (8006c04 <USBD_CDC_DeInit+0xf8>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f002 faab 	bl	800907a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006b24:	4b37      	ldr	r3, [pc, #220]	@ (8006c04 <USBD_CDC_DeInit+0xf8>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	f003 020f 	and.w	r2, r3, #15
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	3324      	adds	r3, #36	@ 0x24
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006b3e:	4b32      	ldr	r3, [pc, #200]	@ (8006c08 <USBD_CDC_DeInit+0xfc>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f002 fa98 	bl	800907a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c08 <USBD_CDC_DeInit+0xfc>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	f003 020f 	and.w	r2, r3, #15
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006b62:	2200      	movs	r2, #0
 8006b64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006b66:	4b29      	ldr	r3, [pc, #164]	@ (8006c0c <USBD_CDC_DeInit+0x100>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f002 fa84 	bl	800907a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006b72:	4b26      	ldr	r3, [pc, #152]	@ (8006c0c <USBD_CDC_DeInit+0x100>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	f003 020f 	and.w	r2, r3, #15
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	3324      	adds	r3, #36	@ 0x24
 8006b88:	2200      	movs	r2, #0
 8006b8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8006c0c <USBD_CDC_DeInit+0x100>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f003 020f 	and.w	r2, r3, #15
 8006b94:	6879      	ldr	r1, [r7, #4]
 8006b96:	4613      	mov	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	440b      	add	r3, r1
 8006ba0:	3326      	adds	r3, #38	@ 0x26
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	32b0      	adds	r2, #176	@ 0xb0
 8006bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01f      	beq.n	8006bf8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	33b0      	adds	r3, #176	@ 0xb0
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	32b0      	adds	r2, #176	@ 0xb0
 8006bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f002 fb58 	bl	8009290 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	32b0      	adds	r2, #176	@ 0xb0
 8006bea:	2100      	movs	r1, #0
 8006bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000093 	.word	0x20000093
 8006c08:	20000094 	.word	0x20000094
 8006c0c:	20000095 	.word	0x20000095

08006c10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	32b0      	adds	r2, #176	@ 0xb0
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e0bf      	b.n	8006dc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d050      	beq.n	8006cee <USBD_CDC_Setup+0xde>
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	f040 80af 	bne.w	8006db0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	88db      	ldrh	r3, [r3, #6]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d03a      	beq.n	8006cd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	b25b      	sxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	da1b      	bge.n	8006c9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	33b0      	adds	r3, #176	@ 0xb0
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006c7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	88d2      	ldrh	r2, [r2, #6]
 8006c80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	88db      	ldrh	r3, [r3, #6]
 8006c86:	2b07      	cmp	r3, #7
 8006c88:	bf28      	it	cs
 8006c8a:	2307      	movcs	r3, #7
 8006c8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	89fa      	ldrh	r2, [r7, #14]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 fd93 	bl	80087c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006c9a:	e090      	b.n	8006dbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	785a      	ldrb	r2, [r3, #1]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	88db      	ldrh	r3, [r3, #6]
 8006caa:	2b3f      	cmp	r3, #63	@ 0x3f
 8006cac:	d803      	bhi.n	8006cb6 <USBD_CDC_Setup+0xa6>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	88db      	ldrh	r3, [r3, #6]
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	e000      	b.n	8006cb8 <USBD_CDC_Setup+0xa8>
 8006cb6:	2240      	movs	r2, #64	@ 0x40
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006cbe:	6939      	ldr	r1, [r7, #16]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 fda5 	bl	8008818 <USBD_CtlPrepareRx>
      break;
 8006cce:	e076      	b.n	8006dbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	33b0      	adds	r3, #176	@ 0xb0
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	7850      	ldrb	r0, [r2, #1]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	4798      	blx	r3
      break;
 8006cec:	e067      	b.n	8006dbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	2b0b      	cmp	r3, #11
 8006cf4:	d851      	bhi.n	8006d9a <USBD_CDC_Setup+0x18a>
 8006cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <USBD_CDC_Setup+0xec>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d2d 	.word	0x08006d2d
 8006d00:	08006da9 	.word	0x08006da9
 8006d04:	08006d9b 	.word	0x08006d9b
 8006d08:	08006d9b 	.word	0x08006d9b
 8006d0c:	08006d9b 	.word	0x08006d9b
 8006d10:	08006d9b 	.word	0x08006d9b
 8006d14:	08006d9b 	.word	0x08006d9b
 8006d18:	08006d9b 	.word	0x08006d9b
 8006d1c:	08006d9b 	.word	0x08006d9b
 8006d20:	08006d9b 	.word	0x08006d9b
 8006d24:	08006d57 	.word	0x08006d57
 8006d28:	08006d81 	.word	0x08006d81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d107      	bne.n	8006d48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d38:	f107 030a 	add.w	r3, r7, #10
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 fd3d 	bl	80087c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d46:	e032      	b.n	8006dae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fcbb 	bl	80086c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d50:	2303      	movs	r3, #3
 8006d52:	75fb      	strb	r3, [r7, #23]
          break;
 8006d54:	e02b      	b.n	8006dae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d107      	bne.n	8006d72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d62:	f107 030d 	add.w	r3, r7, #13
 8006d66:	2201      	movs	r2, #1
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fd28 	bl	80087c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d70:	e01d      	b.n	8006dae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 fca6 	bl	80086c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d7e:	e016      	b.n	8006dae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d00f      	beq.n	8006dac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 fc99 	bl	80086c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d94:	2303      	movs	r3, #3
 8006d96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d98:	e008      	b.n	8006dac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 fc92 	bl	80086c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006da2:	2303      	movs	r3, #3
 8006da4:	75fb      	strb	r3, [r7, #23]
          break;
 8006da6:	e002      	b.n	8006dae <USBD_CDC_Setup+0x19e>
          break;
 8006da8:	bf00      	nop
 8006daa:	e008      	b.n	8006dbe <USBD_CDC_Setup+0x1ae>
          break;
 8006dac:	bf00      	nop
      }
      break;
 8006dae:	e006      	b.n	8006dbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f001 fc87 	bl	80086c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006db8:	2303      	movs	r3, #3
 8006dba:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006dda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	32b0      	adds	r2, #176	@ 0xb0
 8006de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e065      	b.n	8006ebe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	32b0      	adds	r2, #176	@ 0xb0
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e02:	78fb      	ldrb	r3, [r7, #3]
 8006e04:	f003 020f 	and.w	r2, r3, #15
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	440b      	add	r3, r1
 8006e14:	3318      	adds	r3, #24
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d02f      	beq.n	8006e7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	f003 020f 	and.w	r2, r3, #15
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	3318      	adds	r3, #24
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	f003 010f 	and.w	r1, r3, #15
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	440b      	add	r3, r1
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4403      	add	r3, r0
 8006e44:	331c      	adds	r3, #28
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d112      	bne.n	8006e7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	f003 020f 	and.w	r2, r3, #15
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	3318      	adds	r3, #24
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e6e:	78f9      	ldrb	r1, [r7, #3]
 8006e70:	2300      	movs	r3, #0
 8006e72:	2200      	movs	r2, #0
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f002 f9a8 	bl	80091ca <USBD_LL_Transmit>
 8006e7a:	e01f      	b.n	8006ebc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	33b0      	adds	r3, #176	@ 0xb0
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d010      	beq.n	8006ebc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	33b0      	adds	r3, #176	@ 0xb0
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006eb8:	78fa      	ldrb	r2, [r7, #3]
 8006eba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	32b0      	adds	r2, #176	@ 0xb0
 8006edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	32b0      	adds	r2, #176	@ 0xb0
 8006eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e01a      	b.n	8006f2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f002 f9a6 	bl	800924e <USBD_LL_GetRxDataSize>
 8006f02:	4602      	mov	r2, r0
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	33b0      	adds	r3, #176	@ 0xb0
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	32b0      	adds	r2, #176	@ 0xb0
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e024      	b.n	8006fa2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	33b0      	adds	r3, #176	@ 0xb0
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d019      	beq.n	8006fa0 <USBD_CDC_EP0_RxReady+0x6a>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006f72:	2bff      	cmp	r3, #255	@ 0xff
 8006f74:	d014      	beq.n	8006fa0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	33b0      	adds	r3, #176	@ 0xb0
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006f8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	22ff      	movs	r2, #255	@ 0xff
 8006f9c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fb4:	2182      	movs	r1, #130	@ 0x82
 8006fb6:	4818      	ldr	r0, [pc, #96]	@ (8007018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fb8:	f000 fd4f 	bl	8007a5a <USBD_GetEpDesc>
 8006fbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	4815      	ldr	r0, [pc, #84]	@ (8007018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fc2:	f000 fd4a 	bl	8007a5a <USBD_GetEpDesc>
 8006fc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fc8:	2181      	movs	r1, #129	@ 0x81
 8006fca:	4813      	ldr	r0, [pc, #76]	@ (8007018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006fcc:	f000 fd45 	bl	8007a5a <USBD_GetEpDesc>
 8006fd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2210      	movs	r2, #16
 8006fdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fec:	711a      	strb	r2, [r3, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007000:	711a      	strb	r2, [r3, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2243      	movs	r2, #67	@ 0x43
 800700a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800700c:	4b02      	ldr	r3, [pc, #8]	@ (8007018 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000050 	.word	0x20000050

0800701c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007024:	2182      	movs	r1, #130	@ 0x82
 8007026:	4818      	ldr	r0, [pc, #96]	@ (8007088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007028:	f000 fd17 	bl	8007a5a <USBD_GetEpDesc>
 800702c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800702e:	2101      	movs	r1, #1
 8007030:	4815      	ldr	r0, [pc, #84]	@ (8007088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007032:	f000 fd12 	bl	8007a5a <USBD_GetEpDesc>
 8007036:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007038:	2181      	movs	r1, #129	@ 0x81
 800703a:	4813      	ldr	r0, [pc, #76]	@ (8007088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800703c:	f000 fd0d 	bl	8007a5a <USBD_GetEpDesc>
 8007040:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2210      	movs	r2, #16
 800704c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d006      	beq.n	8007062 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2200      	movs	r2, #0
 8007058:	711a      	strb	r2, [r3, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f042 0202 	orr.w	r2, r2, #2
 8007060:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d006      	beq.n	8007076 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	711a      	strb	r2, [r3, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f042 0202 	orr.w	r2, r2, #2
 8007074:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2243      	movs	r2, #67	@ 0x43
 800707a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800707c:	4b02      	ldr	r3, [pc, #8]	@ (8007088 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800707e:	4618      	mov	r0, r3
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000050 	.word	0x20000050

0800708c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007094:	2182      	movs	r1, #130	@ 0x82
 8007096:	4818      	ldr	r0, [pc, #96]	@ (80070f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007098:	f000 fcdf 	bl	8007a5a <USBD_GetEpDesc>
 800709c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800709e:	2101      	movs	r1, #1
 80070a0:	4815      	ldr	r0, [pc, #84]	@ (80070f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070a2:	f000 fcda 	bl	8007a5a <USBD_GetEpDesc>
 80070a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070a8:	2181      	movs	r1, #129	@ 0x81
 80070aa:	4813      	ldr	r0, [pc, #76]	@ (80070f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80070ac:	f000 fcd5 	bl	8007a5a <USBD_GetEpDesc>
 80070b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2210      	movs	r2, #16
 80070bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d006      	beq.n	80070d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070cc:	711a      	strb	r2, [r3, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d006      	beq.n	80070e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070e0:	711a      	strb	r2, [r3, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2243      	movs	r2, #67	@ 0x43
 80070ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80070ec:	4b02      	ldr	r3, [pc, #8]	@ (80070f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20000050 	.word	0x20000050

080070fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	220a      	movs	r2, #10
 8007108:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800710a:	4b03      	ldr	r3, [pc, #12]	@ (8007118 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	2000000c 	.word	0x2000000c

0800711c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800712c:	2303      	movs	r3, #3
 800712e:	e009      	b.n	8007144 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	33b0      	adds	r3, #176	@ 0xb0
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	32b0      	adds	r2, #176	@ 0xb0
 8007166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007172:	2303      	movs	r3, #3
 8007174:	e008      	b.n	8007188 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	371c      	adds	r7, #28
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	32b0      	adds	r2, #176	@ 0xb0
 80071a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e004      	b.n	80071c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	32b0      	adds	r2, #176	@ 0xb0
 80071e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80071e8:	2301      	movs	r3, #1
 80071ea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e025      	b.n	8007242 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d11f      	bne.n	8007240 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2201      	movs	r2, #1
 8007204:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007208:	4b10      	ldr	r3, [pc, #64]	@ (800724c <USBD_CDC_TransmitPacket+0x7c>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	f003 020f 	and.w	r2, r3, #15
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4403      	add	r3, r0
 8007222:	3318      	adds	r3, #24
 8007224:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007226:	4b09      	ldr	r3, [pc, #36]	@ (800724c <USBD_CDC_TransmitPacket+0x7c>)
 8007228:	7819      	ldrb	r1, [r3, #0]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 ffc7 	bl	80091ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20000093 	.word	0x20000093

08007250 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	32b0      	adds	r2, #176	@ 0xb0
 8007262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007266:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	32b0      	adds	r2, #176	@ 0xb0
 8007272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800727a:	2303      	movs	r3, #3
 800727c:	e018      	b.n	80072b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	7c1b      	ldrb	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10a      	bne.n	800729c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007286:	4b0c      	ldr	r3, [pc, #48]	@ (80072b8 <USBD_CDC_ReceivePacket+0x68>)
 8007288:	7819      	ldrb	r1, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 ffb9 	bl	800920c <USBD_LL_PrepareReceive>
 800729a:	e008      	b.n	80072ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800729c:	4b06      	ldr	r3, [pc, #24]	@ (80072b8 <USBD_CDC_ReceivePacket+0x68>)
 800729e:	7819      	ldrb	r1, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072a6:	2340      	movs	r3, #64	@ 0x40
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 ffaf 	bl	800920c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20000094 	.word	0x20000094

080072bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e01f      	b.n	8007314 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	79fa      	ldrb	r2, [r7, #7]
 8007306:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f001 fe29 	bl	8008f60 <USBD_LL_Init>
 800730e:	4603      	mov	r3, r0
 8007310:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007312:	7dfb      	ldrb	r3, [r7, #23]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007330:	2303      	movs	r3, #3
 8007332:	e025      	b.n	8007380 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	32ae      	adds	r2, #174	@ 0xae
 8007346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00f      	beq.n	8007370 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32ae      	adds	r2, #174	@ 0xae
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007360:	f107 020e 	add.w	r2, r7, #14
 8007364:	4610      	mov	r0, r2
 8007366:	4798      	blx	r3
 8007368:	4602      	mov	r2, r0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 fe31 	bl	8008ff8 <USBD_LL_Start>
 8007396:	4603      	mov	r3, r0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	460b      	mov	r3, r1
 80073c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d009      	beq.n	80073e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	4611      	mov	r1, r2
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	4611      	mov	r1, r2
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007414:	2303      	movs	r3, #3
 8007416:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f001 f90c 	bl	8008652 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007448:	461a      	mov	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007456:	f003 031f 	and.w	r3, r3, #31
 800745a:	2b02      	cmp	r3, #2
 800745c:	d01a      	beq.n	8007494 <USBD_LL_SetupStage+0x72>
 800745e:	2b02      	cmp	r3, #2
 8007460:	d822      	bhi.n	80074a8 <USBD_LL_SetupStage+0x86>
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <USBD_LL_SetupStage+0x4a>
 8007466:	2b01      	cmp	r3, #1
 8007468:	d00a      	beq.n	8007480 <USBD_LL_SetupStage+0x5e>
 800746a:	e01d      	b.n	80074a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fb63 	bl	8007b40 <USBD_StdDevReq>
 800747a:	4603      	mov	r3, r0
 800747c:	73fb      	strb	r3, [r7, #15]
      break;
 800747e:	e020      	b.n	80074c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fbcb 	bl	8007c24 <USBD_StdItfReq>
 800748e:	4603      	mov	r3, r0
 8007490:	73fb      	strb	r3, [r7, #15]
      break;
 8007492:	e016      	b.n	80074c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fc2d 	bl	8007cfc <USBD_StdEPReq>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73fb      	strb	r3, [r7, #15]
      break;
 80074a6:	e00c      	b.n	80074c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 fdfe 	bl	80090b8 <USBD_LL_StallEP>
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	bf00      	nop
  }

  return ret;
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	460b      	mov	r3, r1
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80074de:	7afb      	ldrb	r3, [r7, #11]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d16e      	bne.n	80075c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80074ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	f040 8098 	bne.w	8007628 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	429a      	cmp	r2, r3
 8007502:	d913      	bls.n	800752c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	1ad2      	subs	r2, r2, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	4293      	cmp	r3, r2
 800751c:	bf28      	it	cs
 800751e:	4613      	movcs	r3, r2
 8007520:	461a      	mov	r2, r3
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f001 f994 	bl	8008852 <USBD_CtlContinueRx>
 800752a:	e07d      	b.n	8007628 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007532:	f003 031f 	and.w	r3, r3, #31
 8007536:	2b02      	cmp	r3, #2
 8007538:	d014      	beq.n	8007564 <USBD_LL_DataOutStage+0x98>
 800753a:	2b02      	cmp	r3, #2
 800753c:	d81d      	bhi.n	800757a <USBD_LL_DataOutStage+0xae>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <USBD_LL_DataOutStage+0x7c>
 8007542:	2b01      	cmp	r3, #1
 8007544:	d003      	beq.n	800754e <USBD_LL_DataOutStage+0x82>
 8007546:	e018      	b.n	800757a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	75bb      	strb	r3, [r7, #22]
            break;
 800754c:	e018      	b.n	8007580 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007554:	b2db      	uxtb	r3, r3
 8007556:	4619      	mov	r1, r3
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 fa64 	bl	8007a26 <USBD_CoreFindIF>
 800755e:	4603      	mov	r3, r0
 8007560:	75bb      	strb	r3, [r7, #22]
            break;
 8007562:	e00d      	b.n	8007580 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800756a:	b2db      	uxtb	r3, r3
 800756c:	4619      	mov	r1, r3
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 fa66 	bl	8007a40 <USBD_CoreFindEP>
 8007574:	4603      	mov	r3, r0
 8007576:	75bb      	strb	r3, [r7, #22]
            break;
 8007578:	e002      	b.n	8007580 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	75bb      	strb	r3, [r7, #22]
            break;
 800757e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007580:	7dbb      	ldrb	r3, [r7, #22]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d119      	bne.n	80075ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b03      	cmp	r3, #3
 8007590:	d113      	bne.n	80075ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007592:	7dba      	ldrb	r2, [r7, #22]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	32ae      	adds	r2, #174	@ 0xae
 8007598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80075a2:	7dba      	ldrb	r2, [r7, #22]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80075aa:	7dba      	ldrb	r2, [r7, #22]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	32ae      	adds	r2, #174	@ 0xae
 80075b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f001 f95a 	bl	8008874 <USBD_CtlSendStatus>
 80075c0:	e032      	b.n	8007628 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80075c2:	7afb      	ldrb	r3, [r7, #11]
 80075c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	4619      	mov	r1, r3
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fa37 	bl	8007a40 <USBD_CoreFindEP>
 80075d2:	4603      	mov	r3, r0
 80075d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075d6:	7dbb      	ldrb	r3, [r7, #22]
 80075d8:	2bff      	cmp	r3, #255	@ 0xff
 80075da:	d025      	beq.n	8007628 <USBD_LL_DataOutStage+0x15c>
 80075dc:	7dbb      	ldrb	r3, [r7, #22]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d122      	bne.n	8007628 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d117      	bne.n	800761e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80075ee:	7dba      	ldrb	r2, [r7, #22]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	32ae      	adds	r2, #174	@ 0xae
 80075f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00f      	beq.n	800761e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80075fe:	7dba      	ldrb	r2, [r7, #22]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007606:	7dba      	ldrb	r2, [r7, #22]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	32ae      	adds	r2, #174	@ 0xae
 800760c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	7afa      	ldrb	r2, [r7, #11]
 8007614:	4611      	mov	r1, r2
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	4798      	blx	r3
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	e000      	b.n	800762a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b086      	sub	sp, #24
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	460b      	mov	r3, r1
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d16f      	bne.n	8007726 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3314      	adds	r3, #20
 800764a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007652:	2b02      	cmp	r3, #2
 8007654:	d15a      	bne.n	800770c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	429a      	cmp	r2, r3
 8007660:	d914      	bls.n	800768c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	1ad2      	subs	r2, r2, r3
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	461a      	mov	r2, r3
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f001 f8bc 	bl	80087f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800767e:	2300      	movs	r3, #0
 8007680:	2200      	movs	r2, #0
 8007682:	2100      	movs	r1, #0
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f001 fdc1 	bl	800920c <USBD_LL_PrepareReceive>
 800768a:	e03f      	b.n	800770c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	429a      	cmp	r2, r3
 8007696:	d11c      	bne.n	80076d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d316      	bcc.n	80076d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d20f      	bcs.n	80076d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076b2:	2200      	movs	r2, #0
 80076b4:	2100      	movs	r1, #0
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f001 f89d 	bl	80087f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076c4:	2300      	movs	r3, #0
 80076c6:	2200      	movs	r2, #0
 80076c8:	2100      	movs	r1, #0
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f001 fd9e 	bl	800920c <USBD_LL_PrepareReceive>
 80076d0:	e01c      	b.n	800770c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d10f      	bne.n	80076fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076fe:	2180      	movs	r1, #128	@ 0x80
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f001 fcd9 	bl	80090b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f001 f8c7 	bl	800889a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d03a      	beq.n	800778c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7ff fe42 	bl	80073a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007724:	e032      	b.n	800778c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800772c:	b2db      	uxtb	r3, r3
 800772e:	4619      	mov	r1, r3
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f985 	bl	8007a40 <USBD_CoreFindEP>
 8007736:	4603      	mov	r3, r0
 8007738:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	2bff      	cmp	r3, #255	@ 0xff
 800773e:	d025      	beq.n	800778c <USBD_LL_DataInStage+0x15a>
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d122      	bne.n	800778c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b03      	cmp	r3, #3
 8007750:	d11c      	bne.n	800778c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007752:	7dfa      	ldrb	r2, [r7, #23]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	32ae      	adds	r2, #174	@ 0xae
 8007758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d014      	beq.n	800778c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007762:	7dfa      	ldrb	r2, [r7, #23]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800776a:	7dfa      	ldrb	r2, [r7, #23]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	32ae      	adds	r2, #174	@ 0xae
 8007770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	7afa      	ldrb	r2, [r7, #11]
 8007778:	4611      	mov	r1, r2
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	4798      	blx	r3
 800777e:	4603      	mov	r3, r0
 8007780:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007782:	7dbb      	ldrb	r3, [r7, #22]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007788:	7dbb      	ldrb	r3, [r7, #22]
 800778a:	e000      	b.n	800778e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d014      	beq.n	80077fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00e      	beq.n	80077fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	6852      	ldr	r2, [r2, #4]
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	4611      	mov	r1, r2
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077fc:	2340      	movs	r3, #64	@ 0x40
 80077fe:	2200      	movs	r2, #0
 8007800:	2100      	movs	r1, #0
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 fc13 	bl	800902e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2240      	movs	r2, #64	@ 0x40
 8007814:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007818:	2340      	movs	r3, #64	@ 0x40
 800781a:	2200      	movs	r2, #0
 800781c:	2180      	movs	r1, #128	@ 0x80
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 fc05 	bl	800902e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2240      	movs	r2, #64	@ 0x40
 800782e:	621a      	str	r2, [r3, #32]

  return ret;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	460b      	mov	r3, r1
 8007844:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b04      	cmp	r3, #4
 800786c:	d006      	beq.n	800787c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007874:	b2da      	uxtb	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2204      	movs	r2, #4
 8007880:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d106      	bne.n	80078b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b082      	sub	sp, #8
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d110      	bne.n	80078f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d005      	beq.n	80078f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	32ae      	adds	r2, #174	@ 0xae
 8007918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007920:	2303      	movs	r3, #3
 8007922:	e01c      	b.n	800795e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b03      	cmp	r3, #3
 800792e:	d115      	bne.n	800795c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	32ae      	adds	r2, #174	@ 0xae
 800793a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	32ae      	adds	r2, #174	@ 0xae
 800794e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	4611      	mov	r1, r2
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b082      	sub	sp, #8
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	32ae      	adds	r2, #174	@ 0xae
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	e01c      	b.n	80079c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b03      	cmp	r3, #3
 8007992:	d115      	bne.n	80079c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	32ae      	adds	r2, #174	@ 0xae
 800799e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	32ae      	adds	r2, #174	@ 0xae
 80079b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	4611      	mov	r1, r2
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00e      	beq.n	8007a1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	6852      	ldr	r2, [r2, #4]
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007a4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b086      	sub	sp, #24
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	885b      	ldrh	r3, [r3, #2]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	7812      	ldrb	r2, [r2, #0]
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d91f      	bls.n	8007ac0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a86:	e013      	b.n	8007ab0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a88:	f107 030a 	add.w	r3, r7, #10
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6978      	ldr	r0, [r7, #20]
 8007a90:	f000 f81b 	bl	8007aca <USBD_GetNextDesc>
 8007a94:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	785b      	ldrb	r3, [r3, #1]
 8007a9a:	2b05      	cmp	r3, #5
 8007a9c:	d108      	bne.n	8007ab0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	789b      	ldrb	r3, [r3, #2]
 8007aa6:	78fa      	ldrb	r2, [r7, #3]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d008      	beq.n	8007abe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	885b      	ldrh	r3, [r3, #2]
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	897b      	ldrh	r3, [r7, #10]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d8e5      	bhi.n	8007a88 <USBD_GetEpDesc+0x2e>
 8007abc:	e000      	b.n	8007ac0 <USBD_GetEpDesc+0x66>
          break;
 8007abe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ac0:	693b      	ldr	r3, [r7, #16]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	7812      	ldrb	r2, [r2, #0]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4413      	add	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007af4:	68fb      	ldr	r3, [r7, #12]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b087      	sub	sp, #28
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	3301      	adds	r3, #1
 8007b18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b20:	8a3b      	ldrh	r3, [r7, #16]
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	b21a      	sxth	r2, r3
 8007b26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	b21b      	sxth	r3, r3
 8007b2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b30:	89fb      	ldrh	r3, [r7, #14]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
	...

08007b40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b56:	2b40      	cmp	r3, #64	@ 0x40
 8007b58:	d005      	beq.n	8007b66 <USBD_StdDevReq+0x26>
 8007b5a:	2b40      	cmp	r3, #64	@ 0x40
 8007b5c:	d857      	bhi.n	8007c0e <USBD_StdDevReq+0xce>
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00f      	beq.n	8007b82 <USBD_StdDevReq+0x42>
 8007b62:	2b20      	cmp	r3, #32
 8007b64:	d153      	bne.n	8007c0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	32ae      	adds	r2, #174	@ 0xae
 8007b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b80:	e04a      	b.n	8007c18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	785b      	ldrb	r3, [r3, #1]
 8007b86:	2b09      	cmp	r3, #9
 8007b88:	d83b      	bhi.n	8007c02 <USBD_StdDevReq+0xc2>
 8007b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <USBD_StdDevReq+0x50>)
 8007b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b90:	08007be5 	.word	0x08007be5
 8007b94:	08007bf9 	.word	0x08007bf9
 8007b98:	08007c03 	.word	0x08007c03
 8007b9c:	08007bef 	.word	0x08007bef
 8007ba0:	08007c03 	.word	0x08007c03
 8007ba4:	08007bc3 	.word	0x08007bc3
 8007ba8:	08007bb9 	.word	0x08007bb9
 8007bac:	08007c03 	.word	0x08007c03
 8007bb0:	08007bdb 	.word	0x08007bdb
 8007bb4:	08007bcd 	.word	0x08007bcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa3c 	bl	8008038 <USBD_GetDescriptor>
          break;
 8007bc0:	e024      	b.n	8007c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fba1 	bl	800830c <USBD_SetAddress>
          break;
 8007bca:	e01f      	b.n	8007c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fbe0 	bl	8008394 <USBD_SetConfig>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]
          break;
 8007bd8:	e018      	b.n	8007c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fc83 	bl	80084e8 <USBD_GetConfig>
          break;
 8007be2:	e013      	b.n	8007c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fcb4 	bl	8008554 <USBD_GetStatus>
          break;
 8007bec:	e00e      	b.n	8007c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fce3 	bl	80085bc <USBD_SetFeature>
          break;
 8007bf6:	e009      	b.n	8007c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fd07 	bl	800860e <USBD_ClrFeature>
          break;
 8007c00:	e004      	b.n	8007c0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fd5e 	bl	80086c6 <USBD_CtlError>
          break;
 8007c0a:	bf00      	nop
      }
      break;
 8007c0c:	e004      	b.n	8007c18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fd58 	bl	80086c6 <USBD_CtlError>
      break;
 8007c16:	bf00      	nop
  }

  return ret;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop

08007c24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c3a:	2b40      	cmp	r3, #64	@ 0x40
 8007c3c:	d005      	beq.n	8007c4a <USBD_StdItfReq+0x26>
 8007c3e:	2b40      	cmp	r3, #64	@ 0x40
 8007c40:	d852      	bhi.n	8007ce8 <USBD_StdItfReq+0xc4>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <USBD_StdItfReq+0x26>
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d14e      	bne.n	8007ce8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d840      	bhi.n	8007cda <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	889b      	ldrh	r3, [r3, #4]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d836      	bhi.n	8007cd0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	889b      	ldrh	r3, [r3, #4]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff fedb 	bl	8007a26 <USBD_CoreFindIF>
 8007c70:	4603      	mov	r3, r0
 8007c72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	2bff      	cmp	r3, #255	@ 0xff
 8007c78:	d01d      	beq.n	8007cb6 <USBD_StdItfReq+0x92>
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d11a      	bne.n	8007cb6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c80:	7bba      	ldrb	r2, [r7, #14]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	32ae      	adds	r2, #174	@ 0xae
 8007c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00f      	beq.n	8007cb0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c90:	7bba      	ldrb	r2, [r7, #14]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c98:	7bba      	ldrb	r2, [r7, #14]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	32ae      	adds	r2, #174	@ 0xae
 8007c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cae:	e004      	b.n	8007cba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007cb4:	e001      	b.n	8007cba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	88db      	ldrh	r3, [r3, #6]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d110      	bne.n	8007ce4 <USBD_StdItfReq+0xc0>
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10d      	bne.n	8007ce4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fdd3 	bl	8008874 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cce:	e009      	b.n	8007ce4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fcf7 	bl	80086c6 <USBD_CtlError>
          break;
 8007cd8:	e004      	b.n	8007ce4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fcf2 	bl	80086c6 <USBD_CtlError>
          break;
 8007ce2:	e000      	b.n	8007ce6 <USBD_StdItfReq+0xc2>
          break;
 8007ce4:	bf00      	nop
      }
      break;
 8007ce6:	e004      	b.n	8007cf2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fceb 	bl	80086c6 <USBD_CtlError>
      break;
 8007cf0:	bf00      	nop
  }

  return ret;
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	889b      	ldrh	r3, [r3, #4]
 8007d0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d18:	2b40      	cmp	r3, #64	@ 0x40
 8007d1a:	d007      	beq.n	8007d2c <USBD_StdEPReq+0x30>
 8007d1c:	2b40      	cmp	r3, #64	@ 0x40
 8007d1e:	f200 817f 	bhi.w	8008020 <USBD_StdEPReq+0x324>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d02a      	beq.n	8007d7c <USBD_StdEPReq+0x80>
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	f040 817a 	bne.w	8008020 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7ff fe85 	bl	8007a40 <USBD_CoreFindEP>
 8007d36:	4603      	mov	r3, r0
 8007d38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d3a:	7b7b      	ldrb	r3, [r7, #13]
 8007d3c:	2bff      	cmp	r3, #255	@ 0xff
 8007d3e:	f000 8174 	beq.w	800802a <USBD_StdEPReq+0x32e>
 8007d42:	7b7b      	ldrb	r3, [r7, #13]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f040 8170 	bne.w	800802a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007d4a:	7b7a      	ldrb	r2, [r7, #13]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007d52:	7b7a      	ldrb	r2, [r7, #13]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	32ae      	adds	r2, #174	@ 0xae
 8007d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 8163 	beq.w	800802a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007d64:	7b7a      	ldrb	r2, [r7, #13]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	32ae      	adds	r2, #174	@ 0xae
 8007d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d7a:	e156      	b.n	800802a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	785b      	ldrb	r3, [r3, #1]
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d008      	beq.n	8007d96 <USBD_StdEPReq+0x9a>
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	f300 8145 	bgt.w	8008014 <USBD_StdEPReq+0x318>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 809b 	beq.w	8007ec6 <USBD_StdEPReq+0x1ca>
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d03c      	beq.n	8007e0e <USBD_StdEPReq+0x112>
 8007d94:	e13e      	b.n	8008014 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d002      	beq.n	8007da8 <USBD_StdEPReq+0xac>
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d016      	beq.n	8007dd4 <USBD_StdEPReq+0xd8>
 8007da6:	e02c      	b.n	8007e02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00d      	beq.n	8007dca <USBD_StdEPReq+0xce>
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b80      	cmp	r3, #128	@ 0x80
 8007db2:	d00a      	beq.n	8007dca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 f97d 	bl	80090b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dbe:	2180      	movs	r1, #128	@ 0x80
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 f979 	bl	80090b8 <USBD_LL_StallEP>
 8007dc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dc8:	e020      	b.n	8007e0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc7a 	bl	80086c6 <USBD_CtlError>
              break;
 8007dd2:	e01b      	b.n	8007e0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	885b      	ldrh	r3, [r3, #2]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10e      	bne.n	8007dfa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <USBD_StdEPReq+0xfe>
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b80      	cmp	r3, #128	@ 0x80
 8007de6:	d008      	beq.n	8007dfa <USBD_StdEPReq+0xfe>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	88db      	ldrh	r3, [r3, #6]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d104      	bne.n	8007dfa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 f95f 	bl	80090b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fd3a 	bl	8008874 <USBD_CtlSendStatus>

              break;
 8007e00:	e004      	b.n	8007e0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc5e 	bl	80086c6 <USBD_CtlError>
              break;
 8007e0a:	bf00      	nop
          }
          break;
 8007e0c:	e107      	b.n	800801e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d002      	beq.n	8007e20 <USBD_StdEPReq+0x124>
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d016      	beq.n	8007e4c <USBD_StdEPReq+0x150>
 8007e1e:	e04b      	b.n	8007eb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00d      	beq.n	8007e42 <USBD_StdEPReq+0x146>
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	2b80      	cmp	r3, #128	@ 0x80
 8007e2a:	d00a      	beq.n	8007e42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 f941 	bl	80090b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e36:	2180      	movs	r1, #128	@ 0x80
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 f93d 	bl	80090b8 <USBD_LL_StallEP>
 8007e3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e40:	e040      	b.n	8007ec4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fc3e 	bl	80086c6 <USBD_CtlError>
              break;
 8007e4a:	e03b      	b.n	8007ec4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	885b      	ldrh	r3, [r3, #2]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d136      	bne.n	8007ec2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 f947 	bl	80090f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fd03 	bl	8008874 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7ff fde4 	bl	8007a40 <USBD_CoreFindEP>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e7c:	7b7b      	ldrb	r3, [r7, #13]
 8007e7e:	2bff      	cmp	r3, #255	@ 0xff
 8007e80:	d01f      	beq.n	8007ec2 <USBD_StdEPReq+0x1c6>
 8007e82:	7b7b      	ldrb	r3, [r7, #13]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d11c      	bne.n	8007ec2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e88:	7b7a      	ldrb	r2, [r7, #13]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e90:	7b7a      	ldrb	r2, [r7, #13]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	32ae      	adds	r2, #174	@ 0xae
 8007e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d010      	beq.n	8007ec2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ea0:	7b7a      	ldrb	r2, [r7, #13]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	32ae      	adds	r2, #174	@ 0xae
 8007ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	4798      	blx	r3
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007eb6:	e004      	b.n	8007ec2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fc03 	bl	80086c6 <USBD_CtlError>
              break;
 8007ec0:	e000      	b.n	8007ec4 <USBD_StdEPReq+0x1c8>
              break;
 8007ec2:	bf00      	nop
          }
          break;
 8007ec4:	e0ab      	b.n	800801e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d002      	beq.n	8007ed8 <USBD_StdEPReq+0x1dc>
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d032      	beq.n	8007f3c <USBD_StdEPReq+0x240>
 8007ed6:	e097      	b.n	8008008 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d007      	beq.n	8007eee <USBD_StdEPReq+0x1f2>
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	2b80      	cmp	r3, #128	@ 0x80
 8007ee2:	d004      	beq.n	8007eee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fbed 	bl	80086c6 <USBD_CtlError>
                break;
 8007eec:	e091      	b.n	8008012 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	da0b      	bge.n	8007f0e <USBD_StdEPReq+0x212>
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	3310      	adds	r3, #16
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	4413      	add	r3, r2
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	e00b      	b.n	8007f26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	4413      	add	r3, r2
 8007f24:	3304      	adds	r3, #4
 8007f26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2202      	movs	r2, #2
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fc43 	bl	80087c0 <USBD_CtlSendData>
              break;
 8007f3a:	e06a      	b.n	8008012 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	da11      	bge.n	8007f68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	f003 020f 	and.w	r2, r3, #15
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	440b      	add	r3, r1
 8007f56:	3324      	adds	r3, #36	@ 0x24
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d117      	bne.n	8007f8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fbb0 	bl	80086c6 <USBD_CtlError>
                  break;
 8007f66:	e054      	b.n	8008012 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	f003 020f 	and.w	r2, r3, #15
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d104      	bne.n	8007f8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fb9d 	bl	80086c6 <USBD_CtlError>
                  break;
 8007f8c:	e041      	b.n	8008012 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	da0b      	bge.n	8007fae <USBD_StdEPReq+0x2b2>
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	3310      	adds	r3, #16
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	4413      	add	r3, r2
 8007faa:	3304      	adds	r3, #4
 8007fac:	e00b      	b.n	8007fc6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <USBD_StdEPReq+0x2d8>
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b80      	cmp	r3, #128	@ 0x80
 8007fd2:	d103      	bne.n	8007fdc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	e00e      	b.n	8007ffa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 f8a7 	bl	8009134 <USBD_LL_IsStallEP>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	e002      	b.n	8007ffa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fbdd 	bl	80087c0 <USBD_CtlSendData>
              break;
 8008006:	e004      	b.n	8008012 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fb5b 	bl	80086c6 <USBD_CtlError>
              break;
 8008010:	bf00      	nop
          }
          break;
 8008012:	e004      	b.n	800801e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fb55 	bl	80086c6 <USBD_CtlError>
          break;
 800801c:	bf00      	nop
      }
      break;
 800801e:	e005      	b.n	800802c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fb4f 	bl	80086c6 <USBD_CtlError>
      break;
 8008028:	e000      	b.n	800802c <USBD_StdEPReq+0x330>
      break;
 800802a:	bf00      	nop
  }

  return ret;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	885b      	ldrh	r3, [r3, #2]
 8008052:	0a1b      	lsrs	r3, r3, #8
 8008054:	b29b      	uxth	r3, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	2b06      	cmp	r3, #6
 800805a:	f200 8128 	bhi.w	80082ae <USBD_GetDescriptor+0x276>
 800805e:	a201      	add	r2, pc, #4	@ (adr r2, 8008064 <USBD_GetDescriptor+0x2c>)
 8008060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008064:	08008081 	.word	0x08008081
 8008068:	08008099 	.word	0x08008099
 800806c:	080080d9 	.word	0x080080d9
 8008070:	080082af 	.word	0x080082af
 8008074:	080082af 	.word	0x080082af
 8008078:	0800824f 	.word	0x0800824f
 800807c:	0800827b 	.word	0x0800827b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	7c12      	ldrb	r2, [r2, #16]
 800808c:	f107 0108 	add.w	r1, r7, #8
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	60f8      	str	r0, [r7, #12]
      break;
 8008096:	e112      	b.n	80082be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	7c1b      	ldrb	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10d      	bne.n	80080bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a8:	f107 0208 	add.w	r2, r7, #8
 80080ac:	4610      	mov	r0, r2
 80080ae:	4798      	blx	r3
 80080b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3301      	adds	r3, #1
 80080b6:	2202      	movs	r2, #2
 80080b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080ba:	e100      	b.n	80082be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c4:	f107 0208 	add.w	r2, r7, #8
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3301      	adds	r3, #1
 80080d2:	2202      	movs	r2, #2
 80080d4:	701a      	strb	r2, [r3, #0]
      break;
 80080d6:	e0f2      	b.n	80082be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	885b      	ldrh	r3, [r3, #2]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b05      	cmp	r3, #5
 80080e0:	f200 80ac 	bhi.w	800823c <USBD_GetDescriptor+0x204>
 80080e4:	a201      	add	r2, pc, #4	@ (adr r2, 80080ec <USBD_GetDescriptor+0xb4>)
 80080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ea:	bf00      	nop
 80080ec:	08008105 	.word	0x08008105
 80080f0:	08008139 	.word	0x08008139
 80080f4:	0800816d 	.word	0x0800816d
 80080f8:	080081a1 	.word	0x080081a1
 80080fc:	080081d5 	.word	0x080081d5
 8008100:	08008209 	.word	0x08008209
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	7c12      	ldrb	r2, [r2, #16]
 800811c:	f107 0108 	add.w	r1, r7, #8
 8008120:	4610      	mov	r0, r2
 8008122:	4798      	blx	r3
 8008124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008126:	e091      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 facb 	bl	80086c6 <USBD_CtlError>
            err++;
 8008130:	7afb      	ldrb	r3, [r7, #11]
 8008132:	3301      	adds	r3, #1
 8008134:	72fb      	strb	r3, [r7, #11]
          break;
 8008136:	e089      	b.n	800824c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	7c12      	ldrb	r2, [r2, #16]
 8008150:	f107 0108 	add.w	r1, r7, #8
 8008154:	4610      	mov	r0, r2
 8008156:	4798      	blx	r3
 8008158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800815a:	e077      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fab1 	bl	80086c6 <USBD_CtlError>
            err++;
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	3301      	adds	r3, #1
 8008168:	72fb      	strb	r3, [r7, #11]
          break;
 800816a:	e06f      	b.n	800824c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	7c12      	ldrb	r2, [r2, #16]
 8008184:	f107 0108 	add.w	r1, r7, #8
 8008188:	4610      	mov	r0, r2
 800818a:	4798      	blx	r3
 800818c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800818e:	e05d      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa97 	bl	80086c6 <USBD_CtlError>
            err++;
 8008198:	7afb      	ldrb	r3, [r7, #11]
 800819a:	3301      	adds	r3, #1
 800819c:	72fb      	strb	r3, [r7, #11]
          break;
 800819e:	e055      	b.n	800824c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	7c12      	ldrb	r2, [r2, #16]
 80081b8:	f107 0108 	add.w	r1, r7, #8
 80081bc:	4610      	mov	r0, r2
 80081be:	4798      	blx	r3
 80081c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081c2:	e043      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa7d 	bl	80086c6 <USBD_CtlError>
            err++;
 80081cc:	7afb      	ldrb	r3, [r7, #11]
 80081ce:	3301      	adds	r3, #1
 80081d0:	72fb      	strb	r3, [r7, #11]
          break;
 80081d2:	e03b      	b.n	800824c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00b      	beq.n	80081f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	7c12      	ldrb	r2, [r2, #16]
 80081ec:	f107 0108 	add.w	r1, r7, #8
 80081f0:	4610      	mov	r0, r2
 80081f2:	4798      	blx	r3
 80081f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081f6:	e029      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fa63 	bl	80086c6 <USBD_CtlError>
            err++;
 8008200:	7afb      	ldrb	r3, [r7, #11]
 8008202:	3301      	adds	r3, #1
 8008204:	72fb      	strb	r3, [r7, #11]
          break;
 8008206:	e021      	b.n	800824c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	7c12      	ldrb	r2, [r2, #16]
 8008220:	f107 0108 	add.w	r1, r7, #8
 8008224:	4610      	mov	r0, r2
 8008226:	4798      	blx	r3
 8008228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800822a:	e00f      	b.n	800824c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fa49 	bl	80086c6 <USBD_CtlError>
            err++;
 8008234:	7afb      	ldrb	r3, [r7, #11]
 8008236:	3301      	adds	r3, #1
 8008238:	72fb      	strb	r3, [r7, #11]
          break;
 800823a:	e007      	b.n	800824c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa41 	bl	80086c6 <USBD_CtlError>
          err++;
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	3301      	adds	r3, #1
 8008248:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800824a:	bf00      	nop
      }
      break;
 800824c:	e037      	b.n	80082be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7c1b      	ldrb	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800825c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800825e:	f107 0208 	add.w	r2, r7, #8
 8008262:	4610      	mov	r0, r2
 8008264:	4798      	blx	r3
 8008266:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008268:	e029      	b.n	80082be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fa2a 	bl	80086c6 <USBD_CtlError>
        err++;
 8008272:	7afb      	ldrb	r3, [r7, #11]
 8008274:	3301      	adds	r3, #1
 8008276:	72fb      	strb	r3, [r7, #11]
      break;
 8008278:	e021      	b.n	80082be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7c1b      	ldrb	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10d      	bne.n	800829e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828a:	f107 0208 	add.w	r2, r7, #8
 800828e:	4610      	mov	r0, r2
 8008290:	4798      	blx	r3
 8008292:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3301      	adds	r3, #1
 8008298:	2207      	movs	r2, #7
 800829a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800829c:	e00f      	b.n	80082be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fa10 	bl	80086c6 <USBD_CtlError>
        err++;
 80082a6:	7afb      	ldrb	r3, [r7, #11]
 80082a8:	3301      	adds	r3, #1
 80082aa:	72fb      	strb	r3, [r7, #11]
      break;
 80082ac:	e007      	b.n	80082be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fa08 	bl	80086c6 <USBD_CtlError>
      err++;
 80082b6:	7afb      	ldrb	r3, [r7, #11]
 80082b8:	3301      	adds	r3, #1
 80082ba:	72fb      	strb	r3, [r7, #11]
      break;
 80082bc:	bf00      	nop
  }

  if (err != 0U)
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d11e      	bne.n	8008302 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	88db      	ldrh	r3, [r3, #6]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d016      	beq.n	80082fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80082cc:	893b      	ldrh	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00e      	beq.n	80082f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	88da      	ldrh	r2, [r3, #6]
 80082d6:	893b      	ldrh	r3, [r7, #8]
 80082d8:	4293      	cmp	r3, r2
 80082da:	bf28      	it	cs
 80082dc:	4613      	movcs	r3, r2
 80082de:	b29b      	uxth	r3, r3
 80082e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082e2:	893b      	ldrh	r3, [r7, #8]
 80082e4:	461a      	mov	r2, r3
 80082e6:	68f9      	ldr	r1, [r7, #12]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa69 	bl	80087c0 <USBD_CtlSendData>
 80082ee:	e009      	b.n	8008304 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f9e7 	bl	80086c6 <USBD_CtlError>
 80082f8:	e004      	b.n	8008304 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 faba 	bl	8008874 <USBD_CtlSendStatus>
 8008300:	e000      	b.n	8008304 <USBD_GetDescriptor+0x2cc>
    return;
 8008302:	bf00      	nop
  }
}
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop

0800830c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	889b      	ldrh	r3, [r3, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d131      	bne.n	8008382 <USBD_SetAddress+0x76>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88db      	ldrh	r3, [r3, #6]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d12d      	bne.n	8008382 <USBD_SetAddress+0x76>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	885b      	ldrh	r3, [r3, #2]
 800832a:	2b7f      	cmp	r3, #127	@ 0x7f
 800832c:	d829      	bhi.n	8008382 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	885b      	ldrh	r3, [r3, #2]
 8008332:	b2db      	uxtb	r3, r3
 8008334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008338:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b03      	cmp	r3, #3
 8008344:	d104      	bne.n	8008350 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f9bc 	bl	80086c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834e:	e01d      	b.n	800838c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7bfa      	ldrb	r2, [r7, #15]
 8008354:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 ff15 	bl	800918c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fa86 	bl	8008874 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d004      	beq.n	8008378 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008376:	e009      	b.n	800838c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008380:	e004      	b.n	800838c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f99e 	bl	80086c6 <USBD_CtlError>
  }
}
 800838a:	bf00      	nop
 800838c:	bf00      	nop
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	885b      	ldrh	r3, [r3, #2]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	4b4e      	ldr	r3, [pc, #312]	@ (80084e4 <USBD_SetConfig+0x150>)
 80083aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083ac:	4b4d      	ldr	r3, [pc, #308]	@ (80084e4 <USBD_SetConfig+0x150>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d905      	bls.n	80083c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f985 	bl	80086c6 <USBD_CtlError>
    return USBD_FAIL;
 80083bc:	2303      	movs	r3, #3
 80083be:	e08c      	b.n	80084da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d002      	beq.n	80083d2 <USBD_SetConfig+0x3e>
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d029      	beq.n	8008424 <USBD_SetConfig+0x90>
 80083d0:	e075      	b.n	80084be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80083d2:	4b44      	ldr	r3, [pc, #272]	@ (80084e4 <USBD_SetConfig+0x150>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d020      	beq.n	800841c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80083da:	4b42      	ldr	r3, [pc, #264]	@ (80084e4 <USBD_SetConfig+0x150>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083e4:	4b3f      	ldr	r3, [pc, #252]	@ (80084e4 <USBD_SetConfig+0x150>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7fe ffe3 	bl	80073b6 <USBD_SetClassConfig>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d008      	beq.n	800840c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f962 	bl	80086c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2202      	movs	r2, #2
 8008406:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800840a:	e065      	b.n	80084d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fa31 	bl	8008874 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2203      	movs	r2, #3
 8008416:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800841a:	e05d      	b.n	80084d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fa29 	bl	8008874 <USBD_CtlSendStatus>
      break;
 8008422:	e059      	b.n	80084d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008424:	4b2f      	ldr	r3, [pc, #188]	@ (80084e4 <USBD_SetConfig+0x150>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d112      	bne.n	8008452 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008434:	4b2b      	ldr	r3, [pc, #172]	@ (80084e4 <USBD_SetConfig+0x150>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800843e:	4b29      	ldr	r3, [pc, #164]	@ (80084e4 <USBD_SetConfig+0x150>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7fe ffd2 	bl	80073ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fa12 	bl	8008874 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008450:	e042      	b.n	80084d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008452:	4b24      	ldr	r3, [pc, #144]	@ (80084e4 <USBD_SetConfig+0x150>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d02a      	beq.n	80084b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7fe ffc0 	bl	80073ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800846e:	4b1d      	ldr	r3, [pc, #116]	@ (80084e4 <USBD_SetConfig+0x150>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008478:	4b1a      	ldr	r3, [pc, #104]	@ (80084e4 <USBD_SetConfig+0x150>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7fe ff99 	bl	80073b6 <USBD_SetClassConfig>
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00f      	beq.n	80084ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f918 	bl	80086c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	b2db      	uxtb	r3, r3
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7fe ffa5 	bl	80073ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80084ac:	e014      	b.n	80084d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f9e0 	bl	8008874 <USBD_CtlSendStatus>
      break;
 80084b4:	e010      	b.n	80084d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f9dc 	bl	8008874 <USBD_CtlSendStatus>
      break;
 80084bc:	e00c      	b.n	80084d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f900 	bl	80086c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084c6:	4b07      	ldr	r3, [pc, #28]	@ (80084e4 <USBD_SetConfig+0x150>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7fe ff8e 	bl	80073ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80084d2:	2303      	movs	r3, #3
 80084d4:	73fb      	strb	r3, [r7, #15]
      break;
 80084d6:	bf00      	nop
  }

  return ret;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	200003ec 	.word	0x200003ec

080084e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	88db      	ldrh	r3, [r3, #6]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d004      	beq.n	8008504 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f8e2 	bl	80086c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008502:	e023      	b.n	800854c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	dc02      	bgt.n	8008516 <USBD_GetConfig+0x2e>
 8008510:	2b00      	cmp	r3, #0
 8008512:	dc03      	bgt.n	800851c <USBD_GetConfig+0x34>
 8008514:	e015      	b.n	8008542 <USBD_GetConfig+0x5a>
 8008516:	2b03      	cmp	r3, #3
 8008518:	d00b      	beq.n	8008532 <USBD_GetConfig+0x4a>
 800851a:	e012      	b.n	8008542 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3308      	adds	r3, #8
 8008526:	2201      	movs	r2, #1
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f948 	bl	80087c0 <USBD_CtlSendData>
        break;
 8008530:	e00c      	b.n	800854c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3304      	adds	r3, #4
 8008536:	2201      	movs	r2, #1
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f940 	bl	80087c0 <USBD_CtlSendData>
        break;
 8008540:	e004      	b.n	800854c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f8be 	bl	80086c6 <USBD_CtlError>
        break;
 800854a:	bf00      	nop
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008564:	b2db      	uxtb	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	2b02      	cmp	r3, #2
 800856a:	d81e      	bhi.n	80085aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	88db      	ldrh	r3, [r3, #6]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d004      	beq.n	800857e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f8a5 	bl	80086c6 <USBD_CtlError>
        break;
 800857c:	e01a      	b.n	80085b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f043 0202 	orr.w	r2, r3, #2
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	330c      	adds	r3, #12
 800859e:	2202      	movs	r2, #2
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f90c 	bl	80087c0 <USBD_CtlSendData>
      break;
 80085a8:	e004      	b.n	80085b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f88a 	bl	80086c6 <USBD_CtlError>
      break;
 80085b2:	bf00      	nop
  }
}
 80085b4:	bf00      	nop
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	885b      	ldrh	r3, [r3, #2]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d107      	bne.n	80085de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f94c 	bl	8008874 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80085dc:	e013      	b.n	8008606 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	885b      	ldrh	r3, [r3, #2]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d10b      	bne.n	80085fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	889b      	ldrh	r3, [r3, #4]
 80085ea:	0a1b      	lsrs	r3, r3, #8
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f93c 	bl	8008874 <USBD_CtlSendStatus>
}
 80085fc:	e003      	b.n	8008606 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f860 	bl	80086c6 <USBD_CtlError>
}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800861e:	b2db      	uxtb	r3, r3
 8008620:	3b01      	subs	r3, #1
 8008622:	2b02      	cmp	r3, #2
 8008624:	d80b      	bhi.n	800863e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	885b      	ldrh	r3, [r3, #2]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d10c      	bne.n	8008648 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f91c 	bl	8008874 <USBD_CtlSendStatus>
      }
      break;
 800863c:	e004      	b.n	8008648 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f840 	bl	80086c6 <USBD_CtlError>
      break;
 8008646:	e000      	b.n	800864a <USBD_ClrFeature+0x3c>
      break;
 8008648:	bf00      	nop
  }
}
 800864a:	bf00      	nop
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3301      	adds	r3, #1
 800866c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	781a      	ldrb	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff fa40 	bl	8007b02 <SWAPBYTE>
 8008682:	4603      	mov	r3, r0
 8008684:	461a      	mov	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3301      	adds	r3, #1
 800868e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3301      	adds	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f7ff fa33 	bl	8007b02 <SWAPBYTE>
 800869c:	4603      	mov	r3, r0
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3301      	adds	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3301      	adds	r3, #1
 80086ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f7ff fa26 	bl	8007b02 <SWAPBYTE>
 80086b6:	4603      	mov	r3, r0
 80086b8:	461a      	mov	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	80da      	strh	r2, [r3, #6]
}
 80086be:	bf00      	nop
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086d0:	2180      	movs	r1, #128	@ 0x80
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fcf0 	bl	80090b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086d8:	2100      	movs	r1, #0
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fcec 	bl	80090b8 <USBD_LL_StallEP>
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d042      	beq.n	8008784 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008702:	6938      	ldr	r0, [r7, #16]
 8008704:	f000 f842 	bl	800878c <USBD_GetLen>
 8008708:	4603      	mov	r3, r0
 800870a:	3301      	adds	r3, #1
 800870c:	005b      	lsls	r3, r3, #1
 800870e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008712:	d808      	bhi.n	8008726 <USBD_GetString+0x3e>
 8008714:	6938      	ldr	r0, [r7, #16]
 8008716:	f000 f839 	bl	800878c <USBD_GetLen>
 800871a:	4603      	mov	r3, r0
 800871c:	3301      	adds	r3, #1
 800871e:	b29b      	uxth	r3, r3
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	b29a      	uxth	r2, r3
 8008724:	e001      	b.n	800872a <USBD_GetString+0x42>
 8008726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	4413      	add	r3, r2
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	7812      	ldrb	r2, [r2, #0]
 8008738:	701a      	strb	r2, [r3, #0]
  idx++;
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	3301      	adds	r3, #1
 800873e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	4413      	add	r3, r2
 8008746:	2203      	movs	r2, #3
 8008748:	701a      	strb	r2, [r3, #0]
  idx++;
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	3301      	adds	r3, #1
 800874e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008750:	e013      	b.n	800877a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	4413      	add	r3, r2
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	7812      	ldrb	r2, [r2, #0]
 800875c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	3301      	adds	r3, #1
 8008762:	613b      	str	r3, [r7, #16]
    idx++;
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	3301      	adds	r3, #1
 8008768:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	4413      	add	r3, r2
 8008770:	2200      	movs	r2, #0
 8008772:	701a      	strb	r2, [r3, #0]
    idx++;
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	3301      	adds	r3, #1
 8008778:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e7      	bne.n	8008752 <USBD_GetString+0x6a>
 8008782:	e000      	b.n	8008786 <USBD_GetString+0x9e>
    return;
 8008784:	bf00      	nop
  }
}
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800879c:	e005      	b.n	80087aa <USBD_GetLen+0x1e>
  {
    len++;
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	3301      	adds	r3, #1
 80087a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1f5      	bne.n	800879e <USBD_GetLen+0x12>
  }

  return len;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	2100      	movs	r1, #0
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 fcef 	bl	80091ca <USBD_LL_Transmit>

  return USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	2100      	movs	r1, #0
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 fcde 	bl	80091ca <USBD_LL_Transmit>

  return USBD_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2203      	movs	r2, #3
 8008828:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	2100      	movs	r1, #0
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 fce2 	bl	800920c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	60f8      	str	r0, [r7, #12]
 800885a:	60b9      	str	r1, [r7, #8]
 800885c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	2100      	movs	r1, #0
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 fcd1 	bl	800920c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2204      	movs	r2, #4
 8008880:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008884:	2300      	movs	r3, #0
 8008886:	2200      	movs	r2, #0
 8008888:	2100      	movs	r1, #0
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fc9d 	bl	80091ca <USBD_LL_Transmit>

  return USBD_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2205      	movs	r2, #5
 80088a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088aa:	2300      	movs	r3, #0
 80088ac:	2200      	movs	r2, #0
 80088ae:	2100      	movs	r1, #0
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fcab 	bl	800920c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088c4:	2200      	movs	r2, #0
 80088c6:	4912      	ldr	r1, [pc, #72]	@ (8008910 <MX_USB_DEVICE_Init+0x50>)
 80088c8:	4812      	ldr	r0, [pc, #72]	@ (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088ca:	f7fe fcf7 	bl	80072bc <USBD_Init>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088d4:	f7f8 fa5c 	bl	8000d90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80088d8:	490f      	ldr	r1, [pc, #60]	@ (8008918 <MX_USB_DEVICE_Init+0x58>)
 80088da:	480e      	ldr	r0, [pc, #56]	@ (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088dc:	f7fe fd1e 	bl	800731c <USBD_RegisterClass>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088e6:	f7f8 fa53 	bl	8000d90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088ea:	490c      	ldr	r1, [pc, #48]	@ (800891c <MX_USB_DEVICE_Init+0x5c>)
 80088ec:	4809      	ldr	r0, [pc, #36]	@ (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088ee:	f7fe fc15 	bl	800711c <USBD_CDC_RegisterInterface>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088f8:	f7f8 fa4a 	bl	8000d90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088fc:	4805      	ldr	r0, [pc, #20]	@ (8008914 <MX_USB_DEVICE_Init+0x54>)
 80088fe:	f7fe fd43 	bl	8007388 <USBD_Start>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008908:	f7f8 fa42 	bl	8000d90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800890c:	bf00      	nop
 800890e:	bd80      	pop	{r7, pc}
 8008910:	200000ac 	.word	0x200000ac
 8008914:	200003f0 	.word	0x200003f0
 8008918:	20000018 	.word	0x20000018
 800891c:	20000098 	.word	0x20000098

08008920 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008924:	2200      	movs	r2, #0
 8008926:	4905      	ldr	r1, [pc, #20]	@ (800893c <CDC_Init_FS+0x1c>)
 8008928:	4805      	ldr	r0, [pc, #20]	@ (8008940 <CDC_Init_FS+0x20>)
 800892a:	f7fe fc11 	bl	8007150 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800892e:	4905      	ldr	r1, [pc, #20]	@ (8008944 <CDC_Init_FS+0x24>)
 8008930:	4803      	ldr	r0, [pc, #12]	@ (8008940 <CDC_Init_FS+0x20>)
 8008932:	f7fe fc2f 	bl	8007194 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008936:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008938:	4618      	mov	r0, r3
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20000ecc 	.word	0x20000ecc
 8008940:	200003f0 	.word	0x200003f0
 8008944:	200006cc 	.word	0x200006cc

08008948 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800894c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800894e:	4618      	mov	r0, r3
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	6039      	str	r1, [r7, #0]
 8008962:	71fb      	strb	r3, [r7, #7]
 8008964:	4613      	mov	r3, r2
 8008966:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	2b23      	cmp	r3, #35	@ 0x23
 800896c:	d84a      	bhi.n	8008a04 <CDC_Control_FS+0xac>
 800896e:	a201      	add	r2, pc, #4	@ (adr r2, 8008974 <CDC_Control_FS+0x1c>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	08008a05 	.word	0x08008a05
 8008978:	08008a05 	.word	0x08008a05
 800897c:	08008a05 	.word	0x08008a05
 8008980:	08008a05 	.word	0x08008a05
 8008984:	08008a05 	.word	0x08008a05
 8008988:	08008a05 	.word	0x08008a05
 800898c:	08008a05 	.word	0x08008a05
 8008990:	08008a05 	.word	0x08008a05
 8008994:	08008a05 	.word	0x08008a05
 8008998:	08008a05 	.word	0x08008a05
 800899c:	08008a05 	.word	0x08008a05
 80089a0:	08008a05 	.word	0x08008a05
 80089a4:	08008a05 	.word	0x08008a05
 80089a8:	08008a05 	.word	0x08008a05
 80089ac:	08008a05 	.word	0x08008a05
 80089b0:	08008a05 	.word	0x08008a05
 80089b4:	08008a05 	.word	0x08008a05
 80089b8:	08008a05 	.word	0x08008a05
 80089bc:	08008a05 	.word	0x08008a05
 80089c0:	08008a05 	.word	0x08008a05
 80089c4:	08008a05 	.word	0x08008a05
 80089c8:	08008a05 	.word	0x08008a05
 80089cc:	08008a05 	.word	0x08008a05
 80089d0:	08008a05 	.word	0x08008a05
 80089d4:	08008a05 	.word	0x08008a05
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	08008a05 	.word	0x08008a05
 80089e0:	08008a05 	.word	0x08008a05
 80089e4:	08008a05 	.word	0x08008a05
 80089e8:	08008a05 	.word	0x08008a05
 80089ec:	08008a05 	.word	0x08008a05
 80089f0:	08008a05 	.word	0x08008a05
 80089f4:	08008a05 	.word	0x08008a05
 80089f8:	08008a05 	.word	0x08008a05
 80089fc:	08008a05 	.word	0x08008a05
 8008a00:	08008a05 	.word	0x08008a05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a04:	bf00      	nop
  }

  return (USBD_OK);
 8008a06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a1e:	6879      	ldr	r1, [r7, #4]
 8008a20:	480b      	ldr	r0, [pc, #44]	@ (8008a50 <CDC_Receive_FS+0x3c>)
 8008a22:	f7fe fbb7 	bl	8007194 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a26:	480a      	ldr	r0, [pc, #40]	@ (8008a50 <CDC_Receive_FS+0x3c>)
 8008a28:	f7fe fc12 	bl	8007250 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4619      	mov	r1, r3
 8008a32:	4808      	ldr	r0, [pc, #32]	@ (8008a54 <CDC_Receive_FS+0x40>)
 8008a34:	f7f8 f988 	bl	8000d48 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4804      	ldr	r0, [pc, #16]	@ (8008a54 <CDC_Receive_FS+0x40>)
 8008a42:	f000 fc5b 	bl	80092fc <memset>
  return (USBD_OK);
 8008a46:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	200003f0 	.word	0x200003f0
 8008a54:	200006cc 	.word	0x200006cc

08008a58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008a68:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa0 <CDC_Transmit_FS+0x48>)
 8008a6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e00b      	b.n	8008a96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a7e:	887b      	ldrh	r3, [r7, #2]
 8008a80:	461a      	mov	r2, r3
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	4806      	ldr	r0, [pc, #24]	@ (8008aa0 <CDC_Transmit_FS+0x48>)
 8008a86:	f7fe fb63 	bl	8007150 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a8a:	4805      	ldr	r0, [pc, #20]	@ (8008aa0 <CDC_Transmit_FS+0x48>)
 8008a8c:	f7fe fba0 	bl	80071d0 <USBD_CDC_TransmitPacket>
 8008a90:	4603      	mov	r3, r0
 8008a92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	200003f0 	.word	0x200003f0

08008aa4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	371c      	adds	r7, #28
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
	...

08008ac8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2212      	movs	r2, #18
 8008ad8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ada:	4b03      	ldr	r3, [pc, #12]	@ (8008ae8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	200000c8 	.word	0x200000c8

08008aec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2204      	movs	r2, #4
 8008afc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008afe:	4b03      	ldr	r3, [pc, #12]	@ (8008b0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	200000dc 	.word	0x200000dc

08008b10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	6039      	str	r1, [r7, #0]
 8008b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b1c:	79fb      	ldrb	r3, [r7, #7]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d105      	bne.n	8008b2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4907      	ldr	r1, [pc, #28]	@ (8008b44 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b26:	4808      	ldr	r0, [pc, #32]	@ (8008b48 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b28:	f7ff fdde 	bl	80086e8 <USBD_GetString>
 8008b2c:	e004      	b.n	8008b38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	4904      	ldr	r1, [pc, #16]	@ (8008b44 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b32:	4805      	ldr	r0, [pc, #20]	@ (8008b48 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b34:	f7ff fdd8 	bl	80086e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b38:	4b02      	ldr	r3, [pc, #8]	@ (8008b44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	200016cc 	.word	0x200016cc
 8008b48:	08009388 	.word	0x08009388

08008b4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	4603      	mov	r3, r0
 8008b54:	6039      	str	r1, [r7, #0]
 8008b56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	4904      	ldr	r1, [pc, #16]	@ (8008b6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b5c:	4804      	ldr	r0, [pc, #16]	@ (8008b70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b5e:	f7ff fdc3 	bl	80086e8 <USBD_GetString>
  return USBD_StrDesc;
 8008b62:	4b02      	ldr	r3, [pc, #8]	@ (8008b6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	200016cc 	.word	0x200016cc
 8008b70:	080093a0 	.word	0x080093a0

08008b74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	221a      	movs	r2, #26
 8008b84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b86:	f000 f843 	bl	8008c10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b8a:	4b02      	ldr	r3, [pc, #8]	@ (8008b94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	200000e0 	.word	0x200000e0

08008b98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d105      	bne.n	8008bb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	4907      	ldr	r1, [pc, #28]	@ (8008bcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bae:	4808      	ldr	r0, [pc, #32]	@ (8008bd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bb0:	f7ff fd9a 	bl	80086e8 <USBD_GetString>
 8008bb4:	e004      	b.n	8008bc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	4904      	ldr	r1, [pc, #16]	@ (8008bcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bba:	4805      	ldr	r0, [pc, #20]	@ (8008bd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bbc:	f7ff fd94 	bl	80086e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bc0:	4b02      	ldr	r3, [pc, #8]	@ (8008bcc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	200016cc 	.word	0x200016cc
 8008bd0:	080093b4 	.word	0x080093b4

08008bd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	6039      	str	r1, [r7, #0]
 8008bde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d105      	bne.n	8008bf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	4907      	ldr	r1, [pc, #28]	@ (8008c08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bea:	4808      	ldr	r0, [pc, #32]	@ (8008c0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bec:	f7ff fd7c 	bl	80086e8 <USBD_GetString>
 8008bf0:	e004      	b.n	8008bfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	4904      	ldr	r1, [pc, #16]	@ (8008c08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bf6:	4805      	ldr	r0, [pc, #20]	@ (8008c0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bf8:	f7ff fd76 	bl	80086e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bfc:	4b02      	ldr	r3, [pc, #8]	@ (8008c08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	200016cc 	.word	0x200016cc
 8008c0c:	080093c0 	.word	0x080093c0

08008c10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c16:	4b0f      	ldr	r3, [pc, #60]	@ (8008c54 <Get_SerialNum+0x44>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c58 <Get_SerialNum+0x48>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c22:	4b0e      	ldr	r3, [pc, #56]	@ (8008c5c <Get_SerialNum+0x4c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d009      	beq.n	8008c4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c36:	2208      	movs	r2, #8
 8008c38:	4909      	ldr	r1, [pc, #36]	@ (8008c60 <Get_SerialNum+0x50>)
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 f814 	bl	8008c68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c40:	2204      	movs	r2, #4
 8008c42:	4908      	ldr	r1, [pc, #32]	@ (8008c64 <Get_SerialNum+0x54>)
 8008c44:	68b8      	ldr	r0, [r7, #8]
 8008c46:	f000 f80f 	bl	8008c68 <IntToUnicode>
  }
}
 8008c4a:	bf00      	nop
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	1fff7a10 	.word	0x1fff7a10
 8008c58:	1fff7a14 	.word	0x1fff7a14
 8008c5c:	1fff7a18 	.word	0x1fff7a18
 8008c60:	200000e2 	.word	0x200000e2
 8008c64:	200000f2 	.word	0x200000f2

08008c68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	4613      	mov	r3, r2
 8008c74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c76:	2300      	movs	r3, #0
 8008c78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	75fb      	strb	r3, [r7, #23]
 8008c7e:	e027      	b.n	8008cd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	0f1b      	lsrs	r3, r3, #28
 8008c84:	2b09      	cmp	r3, #9
 8008c86:	d80b      	bhi.n	8008ca0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	0f1b      	lsrs	r3, r3, #28
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	4619      	mov	r1, r3
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	440b      	add	r3, r1
 8008c98:	3230      	adds	r2, #48	@ 0x30
 8008c9a:	b2d2      	uxtb	r2, r2
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	e00a      	b.n	8008cb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	0f1b      	lsrs	r3, r3, #28
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	4619      	mov	r1, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	440b      	add	r3, r1
 8008cb0:	3237      	adds	r2, #55	@ 0x37
 8008cb2:	b2d2      	uxtb	r2, r2
 8008cb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	75fb      	strb	r3, [r7, #23]
 8008cd0:	7dfa      	ldrb	r2, [r7, #23]
 8008cd2:	79fb      	ldrb	r3, [r7, #7]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d3d3      	bcc.n	8008c80 <IntToUnicode+0x18>
  }
}
 8008cd8:	bf00      	nop
 8008cda:	bf00      	nop
 8008cdc:	371c      	adds	r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08a      	sub	sp, #40	@ 0x28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cf0:	f107 0314 	add.w	r3, r7, #20
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	605a      	str	r2, [r3, #4]
 8008cfa:	609a      	str	r2, [r3, #8]
 8008cfc:	60da      	str	r2, [r3, #12]
 8008cfe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d08:	d13a      	bne.n	8008d80 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8008d88 <HAL_PCD_MspInit+0xa0>)
 8008d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d12:	4a1d      	ldr	r2, [pc, #116]	@ (8008d88 <HAL_PCD_MspInit+0xa0>)
 8008d14:	f043 0301 	orr.w	r3, r3, #1
 8008d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008d88 <HAL_PCD_MspInit+0xa0>)
 8008d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	613b      	str	r3, [r7, #16]
 8008d24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d26:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d34:	2303      	movs	r3, #3
 8008d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d38:	230a      	movs	r3, #10
 8008d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d3c:	f107 0314 	add.w	r3, r7, #20
 8008d40:	4619      	mov	r1, r3
 8008d42:	4812      	ldr	r0, [pc, #72]	@ (8008d8c <HAL_PCD_MspInit+0xa4>)
 8008d44:	f7f8 ffb2 	bl	8001cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d48:	4b0f      	ldr	r3, [pc, #60]	@ (8008d88 <HAL_PCD_MspInit+0xa0>)
 8008d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8008d88 <HAL_PCD_MspInit+0xa0>)
 8008d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d52:	6353      	str	r3, [r2, #52]	@ 0x34
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	4b0b      	ldr	r3, [pc, #44]	@ (8008d88 <HAL_PCD_MspInit+0xa0>)
 8008d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d88 <HAL_PCD_MspInit+0xa0>)
 8008d5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d62:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d64:	4b08      	ldr	r3, [pc, #32]	@ (8008d88 <HAL_PCD_MspInit+0xa0>)
 8008d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d70:	2200      	movs	r2, #0
 8008d72:	2100      	movs	r1, #0
 8008d74:	2043      	movs	r0, #67	@ 0x43
 8008d76:	f7f8 fb60 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d7a:	2043      	movs	r0, #67	@ 0x43
 8008d7c:	f7f8 fb79 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d80:	bf00      	nop
 8008d82:	3728      	adds	r7, #40	@ 0x28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	40023800 	.word	0x40023800
 8008d8c:	40020000 	.word	0x40020000

08008d90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008da4:	4619      	mov	r1, r3
 8008da6:	4610      	mov	r0, r2
 8008da8:	f7fe fb3b 	bl	8007422 <USBD_LL_SetupStage>
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008dc6:	78fa      	ldrb	r2, [r7, #3]
 8008dc8:	6879      	ldr	r1, [r7, #4]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	4413      	add	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	440b      	add	r3, r1
 8008dd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	78fb      	ldrb	r3, [r7, #3]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f7fe fb75 	bl	80074cc <USBD_LL_DataOutStage>
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008dfc:	78fa      	ldrb	r2, [r7, #3]
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	4613      	mov	r3, r2
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	440b      	add	r3, r1
 8008e0a:	3320      	adds	r3, #32
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	4619      	mov	r1, r3
 8008e12:	f7fe fc0e 	bl	8007632 <USBD_LL_DataInStage>
}
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fe fd48 	bl	80078c2 <USBD_LL_SOF>
}
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e42:	2301      	movs	r3, #1
 8008e44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	79db      	ldrb	r3, [r3, #7]
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d001      	beq.n	8008e52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e4e:	f7f7 ff9f 	bl	8000d90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e58:	7bfa      	ldrb	r2, [r7, #15]
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fe fcec 	bl	800783a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fe fc94 	bl	8007796 <USBD_LL_Reset>
}
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe fce7 	bl	800785a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	6812      	ldr	r2, [r2, #0]
 8008e9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008e9e:	f043 0301 	orr.w	r3, r3, #1
 8008ea2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	7adb      	ldrb	r3, [r3, #11]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008eac:	4b04      	ldr	r3, [pc, #16]	@ (8008ec0 <HAL_PCD_SuspendCallback+0x48>)
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	4a03      	ldr	r2, [pc, #12]	@ (8008ec0 <HAL_PCD_SuspendCallback+0x48>)
 8008eb2:	f043 0306 	orr.w	r3, r3, #6
 8008eb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	e000ed00 	.word	0xe000ed00

08008ec4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fcdd 	bl	8007892 <USBD_LL_Resume>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ef2:	78fa      	ldrb	r2, [r7, #3]
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe fd35 	bl	8007966 <USBD_LL_IsoOUTIncomplete>
}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe fcf1 	bl	8007902 <USBD_LL_IsoINIncomplete>
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe fd47 	bl	80079ca <USBD_LL_DevConnected>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe fd44 	bl	80079e0 <USBD_LL_DevDisconnected>
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d13c      	bne.n	8008fea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f70:	4a20      	ldr	r2, [pc, #128]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008f7c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f80:	4b1c      	ldr	r3, [pc, #112]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008f82:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f88:	4b1a      	ldr	r3, [pc, #104]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008f8a:	2204      	movs	r2, #4
 8008f8c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f8e:	4b19      	ldr	r3, [pc, #100]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008f90:	2202      	movs	r2, #2
 8008f92:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f94:	4b17      	ldr	r3, [pc, #92]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f9a:	4b16      	ldr	r3, [pc, #88]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008fa0:	4b14      	ldr	r3, [pc, #80]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fa6:	4b13      	ldr	r3, [pc, #76]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fac:	4b11      	ldr	r3, [pc, #68]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008fb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fbe:	480d      	ldr	r0, [pc, #52]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008fc0:	f7f9 f811 	bl	8001fe6 <HAL_PCD_Init>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008fca:	f7f7 fee1 	bl	8000d90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fce:	2180      	movs	r1, #128	@ 0x80
 8008fd0:	4808      	ldr	r0, [pc, #32]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008fd2:	f7fa fa3e 	bl	8003452 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fd6:	2240      	movs	r2, #64	@ 0x40
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4806      	ldr	r0, [pc, #24]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008fdc:	f7fa f9f2 	bl	80033c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008fe0:	2280      	movs	r2, #128	@ 0x80
 8008fe2:	2101      	movs	r1, #1
 8008fe4:	4803      	ldr	r0, [pc, #12]	@ (8008ff4 <USBD_LL_Init+0x94>)
 8008fe6:	f7fa f9ed 	bl	80033c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	200018cc 	.word	0x200018cc

08008ff8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800900e:	4618      	mov	r0, r3
 8009010:	f7f9 f8f8 	bl	8002204 <HAL_PCD_Start>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f942 	bl	80092a4 <USBD_Get_USB_Status>
 8009020:	4603      	mov	r3, r0
 8009022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009024:	7bbb      	ldrb	r3, [r7, #14]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	4608      	mov	r0, r1
 8009038:	4611      	mov	r1, r2
 800903a:	461a      	mov	r2, r3
 800903c:	4603      	mov	r3, r0
 800903e:	70fb      	strb	r3, [r7, #3]
 8009040:	460b      	mov	r3, r1
 8009042:	70bb      	strb	r3, [r7, #2]
 8009044:	4613      	mov	r3, r2
 8009046:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009056:	78bb      	ldrb	r3, [r7, #2]
 8009058:	883a      	ldrh	r2, [r7, #0]
 800905a:	78f9      	ldrb	r1, [r7, #3]
 800905c:	f7f9 fdcc 	bl	8002bf8 <HAL_PCD_EP_Open>
 8009060:	4603      	mov	r3, r0
 8009062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f91c 	bl	80092a4 <USBD_Get_USB_Status>
 800906c:	4603      	mov	r3, r0
 800906e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009070:	7bbb      	ldrb	r3, [r7, #14]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	460b      	mov	r3, r1
 8009084:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f7f9 fe17 	bl	8002ccc <HAL_PCD_EP_Close>
 800909e:	4603      	mov	r3, r0
 80090a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 f8fd 	bl	80092a4 <USBD_Get_USB_Status>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090d2:	78fa      	ldrb	r2, [r7, #3]
 80090d4:	4611      	mov	r1, r2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7f9 fecf 	bl	8002e7a <HAL_PCD_EP_SetStall>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 f8de 	bl	80092a4 <USBD_Get_USB_Status>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009110:	78fa      	ldrb	r2, [r7, #3]
 8009112:	4611      	mov	r1, r2
 8009114:	4618      	mov	r0, r3
 8009116:	f7f9 ff13 	bl	8002f40 <HAL_PCD_EP_ClrStall>
 800911a:	4603      	mov	r3, r0
 800911c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	4618      	mov	r0, r3
 8009122:	f000 f8bf 	bl	80092a4 <USBD_Get_USB_Status>
 8009126:	4603      	mov	r3, r0
 8009128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800912a:	7bbb      	ldrb	r3, [r7, #14]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009146:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800914c:	2b00      	cmp	r3, #0
 800914e:	da0b      	bge.n	8009168 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009156:	68f9      	ldr	r1, [r7, #12]
 8009158:	4613      	mov	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	3316      	adds	r3, #22
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	e00b      	b.n	8009180 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009168:	78fb      	ldrb	r3, [r7, #3]
 800916a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800916e:	68f9      	ldr	r1, [r7, #12]
 8009170:	4613      	mov	r3, r2
 8009172:	00db      	lsls	r3, r3, #3
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	440b      	add	r3, r1
 800917a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800917e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009180:	4618      	mov	r0, r3
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091a6:	78fa      	ldrb	r2, [r7, #3]
 80091a8:	4611      	mov	r1, r2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7f9 fd00 	bl	8002bb0 <HAL_PCD_SetAddress>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f874 	bl	80092a4 <USBD_Get_USB_Status>
 80091bc:	4603      	mov	r3, r0
 80091be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b086      	sub	sp, #24
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	607a      	str	r2, [r7, #4]
 80091d4:	603b      	str	r3, [r7, #0]
 80091d6:	460b      	mov	r3, r1
 80091d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80091e8:	7af9      	ldrb	r1, [r7, #11]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	f7f9 fe0a 	bl	8002e06 <HAL_PCD_EP_Transmit>
 80091f2:	4603      	mov	r3, r0
 80091f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 f853 	bl	80092a4 <USBD_Get_USB_Status>
 80091fe:	4603      	mov	r3, r0
 8009200:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009202:	7dbb      	ldrb	r3, [r7, #22]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	607a      	str	r2, [r7, #4]
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	460b      	mov	r3, r1
 800921a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800922a:	7af9      	ldrb	r1, [r7, #11]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	f7f9 fd96 	bl	8002d60 <HAL_PCD_EP_Receive>
 8009234:	4603      	mov	r3, r0
 8009236:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009238:	7dfb      	ldrb	r3, [r7, #23]
 800923a:	4618      	mov	r0, r3
 800923c:	f000 f832 	bl	80092a4 <USBD_Get_USB_Status>
 8009240:	4603      	mov	r3, r0
 8009242:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009244:	7dbb      	ldrb	r3, [r7, #22]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009260:	78fa      	ldrb	r2, [r7, #3]
 8009262:	4611      	mov	r1, r2
 8009264:	4618      	mov	r0, r3
 8009266:	f7f9 fdb6 	bl	8002dd6 <HAL_PCD_EP_GetRxCount>
 800926a:	4603      	mov	r3, r0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800927c:	4b03      	ldr	r3, [pc, #12]	@ (800928c <USBD_static_malloc+0x18>)
}
 800927e:	4618      	mov	r0, r3
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20001db0 	.word	0x20001db0

08009290 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]

}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d817      	bhi.n	80092e8 <USBD_Get_USB_Status+0x44>
 80092b8:	a201      	add	r2, pc, #4	@ (adr r2, 80092c0 <USBD_Get_USB_Status+0x1c>)
 80092ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092be:	bf00      	nop
 80092c0:	080092d1 	.word	0x080092d1
 80092c4:	080092d7 	.word	0x080092d7
 80092c8:	080092dd 	.word	0x080092dd
 80092cc:	080092e3 	.word	0x080092e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73fb      	strb	r3, [r7, #15]
    break;
 80092d4:	e00b      	b.n	80092ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092d6:	2303      	movs	r3, #3
 80092d8:	73fb      	strb	r3, [r7, #15]
    break;
 80092da:	e008      	b.n	80092ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092dc:	2301      	movs	r3, #1
 80092de:	73fb      	strb	r3, [r7, #15]
    break;
 80092e0:	e005      	b.n	80092ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092e2:	2303      	movs	r3, #3
 80092e4:	73fb      	strb	r3, [r7, #15]
    break;
 80092e6:	e002      	b.n	80092ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092e8:	2303      	movs	r3, #3
 80092ea:	73fb      	strb	r3, [r7, #15]
    break;
 80092ec:	bf00      	nop
  }
  return usb_status;
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <memset>:
 80092fc:	4402      	add	r2, r0
 80092fe:	4603      	mov	r3, r0
 8009300:	4293      	cmp	r3, r2
 8009302:	d100      	bne.n	8009306 <memset+0xa>
 8009304:	4770      	bx	lr
 8009306:	f803 1b01 	strb.w	r1, [r3], #1
 800930a:	e7f9      	b.n	8009300 <memset+0x4>

0800930c <__libc_init_array>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	4d0d      	ldr	r5, [pc, #52]	@ (8009344 <__libc_init_array+0x38>)
 8009310:	4c0d      	ldr	r4, [pc, #52]	@ (8009348 <__libc_init_array+0x3c>)
 8009312:	1b64      	subs	r4, r4, r5
 8009314:	10a4      	asrs	r4, r4, #2
 8009316:	2600      	movs	r6, #0
 8009318:	42a6      	cmp	r6, r4
 800931a:	d109      	bne.n	8009330 <__libc_init_array+0x24>
 800931c:	4d0b      	ldr	r5, [pc, #44]	@ (800934c <__libc_init_array+0x40>)
 800931e:	4c0c      	ldr	r4, [pc, #48]	@ (8009350 <__libc_init_array+0x44>)
 8009320:	f000 f826 	bl	8009370 <_init>
 8009324:	1b64      	subs	r4, r4, r5
 8009326:	10a4      	asrs	r4, r4, #2
 8009328:	2600      	movs	r6, #0
 800932a:	42a6      	cmp	r6, r4
 800932c:	d105      	bne.n	800933a <__libc_init_array+0x2e>
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	f855 3b04 	ldr.w	r3, [r5], #4
 8009334:	4798      	blx	r3
 8009336:	3601      	adds	r6, #1
 8009338:	e7ee      	b.n	8009318 <__libc_init_array+0xc>
 800933a:	f855 3b04 	ldr.w	r3, [r5], #4
 800933e:	4798      	blx	r3
 8009340:	3601      	adds	r6, #1
 8009342:	e7f2      	b.n	800932a <__libc_init_array+0x1e>
 8009344:	080093f8 	.word	0x080093f8
 8009348:	080093f8 	.word	0x080093f8
 800934c:	080093f8 	.word	0x080093f8
 8009350:	080093fc 	.word	0x080093fc

08009354 <memcpy>:
 8009354:	440a      	add	r2, r1
 8009356:	4291      	cmp	r1, r2
 8009358:	f100 33ff 	add.w	r3, r0, #4294967295
 800935c:	d100      	bne.n	8009360 <memcpy+0xc>
 800935e:	4770      	bx	lr
 8009360:	b510      	push	{r4, lr}
 8009362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800936a:	4291      	cmp	r1, r2
 800936c:	d1f9      	bne.n	8009362 <memcpy+0xe>
 800936e:	bd10      	pop	{r4, pc}

08009370 <_init>:
 8009370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009372:	bf00      	nop
 8009374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009376:	bc08      	pop	{r3}
 8009378:	469e      	mov	lr, r3
 800937a:	4770      	bx	lr

0800937c <_fini>:
 800937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937e:	bf00      	nop
 8009380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009382:	bc08      	pop	{r3}
 8009384:	469e      	mov	lr, r3
 8009386:	4770      	bx	lr
