
USB_to_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1f0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a388  0800a388  0000b388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3f0  0800a3f0  0000c0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3f0  0800a3f0  0000b3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3f8  0800a3f8  0000c0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3f8  0800a3f8  0000b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3fc  0800a3fc  0000b3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800a400  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001efc  200000fc  0800a4fc  0000c0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ff8  0800a4fc  0000cff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c05  00000000  00000000  0000c12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041eb  00000000  00000000  00022d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00026f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dbf  00000000  00000000  00028168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0ff  00000000  00000000  00028f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cbe  00000000  00000000  00043026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c938  00000000  00000000  0005cce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e961c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004944  00000000  00000000  000e9660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000edfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a370 	.word	0x0800a370

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	0800a370 	.word	0x0800a370

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80004ce:	2300      	movs	r3, #0
 80004d0:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80004da:	2300      	movs	r3, #0
 80004dc:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 80004de:	2300      	movs	r3, #0
 80004e0:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80004e2:	2300      	movs	r3, #0
 80004e4:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80004e6:	2300      	movs	r3, #0
 80004e8:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80004ea:	2300      	movs	r3, #0
 80004ec:	70fb      	strb	r3, [r7, #3]

  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 80004ee:	2300      	movs	r3, #0
 80004f0:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80004f2:	2300      	movs	r3, #0
 80004f4:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80004f6:	2300      	movs	r3, #0
 80004f8:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80004fa:	2300      	movs	r3, #0
 80004fc:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000502:	2308      	movs	r3, #8
 8000504:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 800050e:	2300      	movs	r3, #0
 8000510:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800051e:	2300      	movs	r3, #0
 8000520:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000532:	2300      	movs	r3, #0
 8000534:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000542:	2308      	movs	r3, #8
 8000544:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	72fb      	strb	r3, [r7, #11]

  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 800054e:	f000 f939 	bl	80007c4 <MCP2515_Initialize>
 8000552:	4603      	mov	r3, r0
 8000554:	f083 0301 	eor.w	r3, r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <CANSPI_Initialize+0x9a>
  {
    return false;
 800055e:	2300      	movs	r3, #0
 8000560:	e05e      	b.n	8000620 <CANSPI_Initialize+0x158>
  }

  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000562:	f000 f951 	bl	8000808 <MCP2515_SetConfigMode>
 8000566:	4603      	mov	r3, r0
 8000568:	f083 0301 	eor.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <CANSPI_Initialize+0xae>
  {
    return false;
 8000572:	2300      	movs	r3, #0
 8000574:	e054      	b.n	8000620 <CANSPI_Initialize+0x158>
  }

  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	461a      	mov	r2, r3
 800057a:	2123      	movs	r1, #35	@ 0x23
 800057c:	2020      	movs	r0, #32
 800057e:	f000 f9c5 	bl	800090c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000582:	463b      	mov	r3, r7
 8000584:	461a      	mov	r2, r3
 8000586:	2127      	movs	r1, #39	@ 0x27
 8000588:	2024      	movs	r0, #36	@ 0x24
 800058a:	f000 f9bf 	bl	800090c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	461a      	mov	r2, r3
 8000594:	2103      	movs	r1, #3
 8000596:	2000      	movs	r0, #0
 8000598:	f000 f9b8 	bl	800090c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800059c:	f107 0318 	add.w	r3, r7, #24
 80005a0:	461a      	mov	r2, r3
 80005a2:	2107      	movs	r1, #7
 80005a4:	2004      	movs	r0, #4
 80005a6:	f000 f9b1 	bl	800090c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	461a      	mov	r2, r3
 80005b0:	210b      	movs	r1, #11
 80005b2:	2008      	movs	r0, #8
 80005b4:	f000 f9aa 	bl	800090c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	461a      	mov	r2, r3
 80005be:	2113      	movs	r1, #19
 80005c0:	2010      	movs	r0, #16
 80005c2:	f000 f9a3 	bl	800090c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	461a      	mov	r2, r3
 80005cc:	2117      	movs	r1, #23
 80005ce:	2014      	movs	r0, #20
 80005d0:	f000 f99c 	bl	800090c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	461a      	mov	r2, r3
 80005da:	211b      	movs	r1, #27
 80005dc:	2018      	movs	r0, #24
 80005de:	f000 f995 	bl	800090c <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80005e2:	2104      	movs	r1, #4
 80005e4:	2060      	movs	r0, #96	@ 0x60
 80005e6:	f000 f96d 	bl	80008c4 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80005ea:	2101      	movs	r1, #1
 80005ec:	2070      	movs	r0, #112	@ 0x70
 80005ee:	f000 f969 	bl	80008c4 <MCP2515_WriteByte>
  * tbit = 1tq + 1tq + 1tq + 1tq = 4tq
  * 4tq = 1us = 1000kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80005f2:	2100      	movs	r1, #0
 80005f4:	202a      	movs	r0, #42	@ 0x2a
 80005f6:	f000 f965 	bl	80008c4 <MCP2515_WriteByte>

  /* 1 1 000(1tq) 000(1tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xC0);
 80005fa:	21c0      	movs	r1, #192	@ 0xc0
 80005fc:	2029      	movs	r0, #41	@ 0x29
 80005fe:	f000 f961 	bl	80008c4 <MCP2515_WriteByte>

    /* 1 0 000 000(1tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x80);
 8000602:	2180      	movs	r1, #128	@ 0x80
 8000604:	2028      	movs	r0, #40	@ 0x28
 8000606:	f000 f95d 	bl	80008c4 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800060a:	f000 f91b 	bl	8000844 <MCP2515_SetNormalMode>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <CANSPI_Initialize+0x156>
    return false;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <CANSPI_Initialize+0x158>

  return true;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000634:	4b36      	ldr	r3, [pc, #216]	@ (8000710 <CANSPI_Transmit+0xe8>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800063a:	4b35      	ldr	r3, [pc, #212]	@ (8000710 <CANSPI_Transmit+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000640:	4b33      	ldr	r3, [pc, #204]	@ (8000710 <CANSPI_Transmit+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000646:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <CANSPI_Transmit+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 800064c:	f000 f9cc 	bl	80009e8 <MCP2515_ReadStatus>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <CANSPI_Transmit+0xec>)
 8000656:	701a      	strb	r2, [r3, #0]

  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000658:	4b2e      	ldr	r3, [pc, #184]	@ (8000714 <CANSPI_Transmit+0xec>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d115      	bne.n	8000692 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6858      	ldr	r0, [r3, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	4a28      	ldr	r2, [pc, #160]	@ (8000710 <CANSPI_Transmit+0xe8>)
 8000670:	4619      	mov	r1, r3
 8000672:	f000 f851 	bl	8000718 <convertCANid2Reg>

    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7a1a      	ldrb	r2, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3309      	adds	r3, #9
 800067e:	4924      	ldr	r1, [pc, #144]	@ (8000710 <CANSPI_Transmit+0xe8>)
 8000680:	2040      	movs	r0, #64	@ 0x40
 8000682:	f000 f96d 	bl	8000960 <MCP2515_LoadTxSequence>

    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000686:	2081      	movs	r0, #129	@ 0x81
 8000688:	f000 f994 	bl	80009b4 <MCP2515_RequestToSend>

    returnValue = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	e038      	b.n	8000704 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <CANSPI_Transmit+0xec>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	f003 0310 	and.w	r3, r3, #16
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d115      	bne.n	80006cc <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6858      	ldr	r0, [r3, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4a19      	ldr	r2, [pc, #100]	@ (8000710 <CANSPI_Transmit+0xe8>)
 80006aa:	4619      	mov	r1, r3
 80006ac:	f000 f834 	bl	8000718 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7a1a      	ldrb	r2, [r3, #8]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3309      	adds	r3, #9
 80006b8:	4915      	ldr	r1, [pc, #84]	@ (8000710 <CANSPI_Transmit+0xe8>)
 80006ba:	2042      	movs	r0, #66	@ 0x42
 80006bc:	f000 f950 	bl	8000960 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80006c0:	2082      	movs	r0, #130	@ 0x82
 80006c2:	f000 f977 	bl	80009b4 <MCP2515_RequestToSend>

    returnValue = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e01b      	b.n	8000704 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <CANSPI_Transmit+0xec>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d114      	bne.n	8000704 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6858      	ldr	r0, [r3, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <CANSPI_Transmit+0xe8>)
 80006e4:	4619      	mov	r1, r3
 80006e6:	f000 f817 	bl	8000718 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7a1a      	ldrb	r2, [r3, #8]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3309      	adds	r3, #9
 80006f2:	4907      	ldr	r1, [pc, #28]	@ (8000710 <CANSPI_Transmit+0xe8>)
 80006f4:	2044      	movs	r0, #68	@ 0x44
 80006f6:	f000 f933 	bl	8000960 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80006fa:	2084      	movs	r0, #132	@ 0x84
 80006fc:	f000 f95a 	bl	80009b4 <MCP2515_RequestToSend>

    returnValue = 1;
 8000700:	2301      	movs	r3, #1
 8000702:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000011c 	.word	0x2000011c
 8000714:	20000118 	.word	0x20000118

08000718 <convertCANid2Reg>:
  return (returnValue);
}

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8000718:	b480      	push	{r7}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	460b      	mov	r3, r1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d12e      	bne.n	800078e <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f003 0303 	and.w	r3, r3, #3
 8000754:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	f023 031f 	bic.w	r3, r3, #31
 8000764:	b2da      	uxtb	r2, r3
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	4413      	add	r3, r2
 800076a:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800076c:	7dfb      	ldrb	r3, [r7, #23]
 800076e:	3308      	adds	r3, #8
 8000770:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000772:	7dfb      	ldrb	r3, [r7, #23]
 8000774:	f023 0314 	bic.w	r3, r3, #20
 8000778:	b2da      	uxtb	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800078c:	e013      	b.n	80007b6 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	015b      	lsls	r3, r3, #5
 800079e:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	701a      	strb	r2, [r3, #0]
}
 80007b6:	bf00      	nop
 80007b8:	371c      	adds	r7, #28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 80007ca:	2201      	movs	r2, #1
 80007cc:	2140      	movs	r1, #64	@ 0x40
 80007ce:	480c      	ldr	r0, [pc, #48]	@ (8000800 <MCP2515_Initialize+0x3c>)
 80007d0:	f001 fee6 	bl	80025a0 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 80007d4:	230a      	movs	r3, #10
 80007d6:	71fb      	strb	r3, [r7, #7]

  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80007d8:	480a      	ldr	r0, [pc, #40]	@ (8000804 <MCP2515_Initialize+0x40>)
 80007da:	f004 fa4e 	bl	8004c7a <HAL_SPI_GetState>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d101      	bne.n	80007e8 <MCP2515_Initialize+0x24>
      return true;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e006      	b.n	80007f6 <MCP2515_Initialize+0x32>

    loop--;
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f1      	bne.n	80007d8 <MCP2515_Initialize+0x14>

  return false;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40020400 	.word	0x40020400
 8000804:	20000310 	.word	0x20000310

08000808 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800080e:	2180      	movs	r1, #128	@ 0x80
 8000810:	200f      	movs	r0, #15
 8000812:	f000 f857 	bl	80008c4 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000816:	230a      	movs	r3, #10
 8000818:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800081a:	200e      	movs	r0, #14
 800081c:	f000 f830 	bl	8000880 <MCP2515_ReadByte>
 8000820:	4603      	mov	r3, r0
 8000822:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000826:	2b80      	cmp	r3, #128	@ 0x80
 8000828:	d101      	bne.n	800082e <MCP2515_SetConfigMode+0x26>
      return true;
 800082a:	2301      	movs	r3, #1
 800082c:	e006      	b.n	800083c <MCP2515_SetConfigMode+0x34>

    loop--;
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	3b01      	subs	r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1ef      	bne.n	800081a <MCP2515_SetConfigMode+0x12>

  return false;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800084a:	2100      	movs	r1, #0
 800084c:	200f      	movs	r0, #15
 800084e:	f000 f839 	bl	80008c4 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000852:	230a      	movs	r3, #10
 8000854:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000856:	200e      	movs	r0, #14
 8000858:	f000 f812 	bl	8000880 <MCP2515_ReadByte>
 800085c:	4603      	mov	r3, r0
 800085e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d101      	bne.n	800086a <MCP2515_SetNormalMode+0x26>
      return true;
 8000866:	2301      	movs	r3, #1
 8000868:	e006      	b.n	8000878 <MCP2515_SetNormalMode+0x34>

    loop--;
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	3b01      	subs	r3, #1
 800086e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1ef      	bne.n	8000856 <MCP2515_SetNormalMode+0x12>

  return false;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 800088a:	2200      	movs	r2, #0
 800088c:	2140      	movs	r1, #64	@ 0x40
 800088e:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <MCP2515_ReadByte+0x40>)
 8000890:	f001 fe86 	bl	80025a0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f8c3 	bl	8000a20 <SPI_Tx>
  SPI_Tx(address);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f8bf 	bl	8000a20 <SPI_Tx>
  retVal = SPI_Rx();
 80008a2:	f000 f8e3 	bl	8000a6c <SPI_Rx>
 80008a6:	4603      	mov	r3, r0
 80008a8:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 80008aa:	2201      	movs	r2, #1
 80008ac:	2140      	movs	r1, #64	@ 0x40
 80008ae:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MCP2515_ReadByte+0x40>)
 80008b0:	f001 fe76 	bl	80025a0 <HAL_GPIO_WritePin>

  return retVal;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40020400 	.word	0x40020400

080008c4 <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	460a      	mov	r2, r1
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	4613      	mov	r3, r2
 80008d2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80008d4:	2200      	movs	r2, #0
 80008d6:	2140      	movs	r1, #64	@ 0x40
 80008d8:	480b      	ldr	r0, [pc, #44]	@ (8000908 <MCP2515_WriteByte+0x44>)
 80008da:	f001 fe61 	bl	80025a0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80008de:	2002      	movs	r0, #2
 80008e0:	f000 f89e 	bl	8000a20 <SPI_Tx>
  SPI_Tx(address);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f89a 	bl	8000a20 <SPI_Tx>
  SPI_Tx(data);
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f896 	bl	8000a20 <SPI_Tx>

  MCP2515_CS_HIGH();
 80008f4:	2201      	movs	r2, #1
 80008f6:	2140      	movs	r1, #64	@ 0x40
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <MCP2515_WriteByte+0x44>)
 80008fa:	f001 fe51 	bl	80025a0 <HAL_GPIO_WritePin>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40020400 	.word	0x40020400

0800090c <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	603a      	str	r2, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	460b      	mov	r3, r1
 800091a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800091c:	2200      	movs	r2, #0
 800091e:	2140      	movs	r1, #64	@ 0x40
 8000920:	480e      	ldr	r0, [pc, #56]	@ (800095c <MCP2515_WriteByteSequence+0x50>)
 8000922:	f001 fe3d 	bl	80025a0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000926:	2002      	movs	r0, #2
 8000928:	f000 f87a 	bl	8000a20 <SPI_Tx>
  SPI_Tx(startAddress);
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f876 	bl	8000a20 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000934:	79ba      	ldrb	r2, [r7, #6]
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	3301      	adds	r3, #1
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4619      	mov	r1, r3
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f000 f87e 	bl	8000a44 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000948:	2201      	movs	r2, #1
 800094a:	2140      	movs	r1, #64	@ 0x40
 800094c:	4803      	ldr	r0, [pc, #12]	@ (800095c <MCP2515_WriteByteSequence+0x50>)
 800094e:	f001 fe27 	bl	80025a0 <HAL_GPIO_WritePin>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40020400 	.word	0x40020400

08000960 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4603      	mov	r3, r0
 800096c:	73fb      	strb	r3, [r7, #15]
 800096e:	4613      	mov	r3, r2
 8000970:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000972:	2200      	movs	r2, #0
 8000974:	2140      	movs	r1, #64	@ 0x40
 8000976:	480e      	ldr	r0, [pc, #56]	@ (80009b0 <MCP2515_LoadTxSequence+0x50>)
 8000978:	f001 fe12 	bl	80025a0 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f84e 	bl	8000a20 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000984:	2104      	movs	r1, #4
 8000986:	68b8      	ldr	r0, [r7, #8]
 8000988:	f000 f85c 	bl	8000a44 <SPI_TxBuffer>
  SPI_Tx(dlc);
 800098c:	7bbb      	ldrb	r3, [r7, #14]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f846 	bl	8000a20 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000994:	7bbb      	ldrb	r3, [r7, #14]
 8000996:	4619      	mov	r1, r3
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f000 f853 	bl	8000a44 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800099e:	2201      	movs	r2, #1
 80009a0:	2140      	movs	r1, #64	@ 0x40
 80009a2:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <MCP2515_LoadTxSequence+0x50>)
 80009a4:	f001 fdfc 	bl	80025a0 <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40020400 	.word	0x40020400

080009b4 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80009be:	2200      	movs	r2, #0
 80009c0:	2140      	movs	r1, #64	@ 0x40
 80009c2:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <MCP2515_RequestToSend+0x30>)
 80009c4:	f001 fdec 	bl	80025a0 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f828 	bl	8000a20 <SPI_Tx>

  MCP2515_CS_HIGH();
 80009d0:	2201      	movs	r2, #1
 80009d2:	2140      	movs	r1, #64	@ 0x40
 80009d4:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <MCP2515_RequestToSend+0x30>)
 80009d6:	f001 fde3 	bl	80025a0 <HAL_GPIO_WritePin>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40020400 	.word	0x40020400

080009e8 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	480a      	ldr	r0, [pc, #40]	@ (8000a1c <MCP2515_ReadStatus+0x34>)
 80009f4:	f001 fdd4 	bl	80025a0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 80009f8:	20a0      	movs	r0, #160	@ 0xa0
 80009fa:	f000 f811 	bl	8000a20 <SPI_Tx>
  retVal = SPI_Rx();
 80009fe:	f000 f835 	bl	8000a6c <SPI_Rx>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000a06:	2201      	movs	r2, #1
 8000a08:	2140      	movs	r1, #64	@ 0x40
 8000a0a:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <MCP2515_ReadStatus+0x34>)
 8000a0c:	f001 fdc8 	bl	80025a0 <HAL_GPIO_WritePin>

  return retVal;
 8000a10:	79fb      	ldrb	r3, [r7, #7]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40020400 	.word	0x40020400

08000a20 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000a2a:	1df9      	adds	r1, r7, #7
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4803      	ldr	r0, [pc, #12]	@ (8000a40 <SPI_Tx+0x20>)
 8000a32:	f003 fd1c 	bl	800446e <HAL_SPI_Transmit>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000310 	.word	0x20000310

08000a44 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	230a      	movs	r3, #10
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <SPI_TxBuffer+0x24>)
 8000a5a:	f003 fd08 	bl	800446e <HAL_SPI_Transmit>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000310 	.word	0x20000310

08000a6c <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000a72:	1df9      	adds	r1, r7, #7
 8000a74:	230a      	movs	r3, #10
 8000a76:	2201      	movs	r2, #1
 8000a78:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <SPI_Rx+0x1c>)
 8000a7a:	f003 fe3c 	bl	80046f6 <HAL_SPI_Receive>
  return retVal;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000310 	.word	0x20000310

08000a8c <LED_Toggle>:
#include <USB_driver.h>

static USBCommandHandler_t usb;

static void LED_Toggle() {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(nLED_GPIO_Port,nLED_Pin);
 8000a90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <LED_Toggle+0x14>)
 8000a96:	f001 fd9c 	bl	80025d2 <HAL_GPIO_TogglePin>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <LED_Off>:

//static void LED_On() {
//	HAL_GPIO_WritePin(nLED_GPIO_Port,nLED_Pin, GPIO_PIN_RESET);
//}

static void LED_Off() {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(nLED_GPIO_Port,nLED_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aae:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <LED_Off+0x14>)
 8000ab0:	f001 fd76 	bl	80025a0 <HAL_GPIO_WritePin>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40020800 	.word	0x40020800

08000abc <USB_ClearBuffer>:

static void USB_ClearBuffer(uint8_t idx) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	if(idx >= USB_FIFO_SIZE) return;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d817      	bhi.n	8000afc <USB_ClearBuffer+0x40>

	usb.rawPacket[idx].length = 0;
 8000acc:	79fa      	ldrb	r2, [r7, #7]
 8000ace:	490d      	ldr	r1, [pc, #52]	@ (8000b04 <USB_ClearBuffer+0x48>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	1a9b      	subs	r3, r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	440b      	add	r3, r1
 8000ada:	3303      	adds	r3, #3
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
	memset(usb.rawPacket[idx].buffer, 0, MAX_BUF_SIZE);
 8000ae0:	79fa      	ldrb	r2, [r7, #7]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4a06      	ldr	r2, [pc, #24]	@ (8000b04 <USB_ClearBuffer+0x48>)
 8000aec:	4413      	add	r3, r2
 8000aee:	3304      	adds	r3, #4
 8000af0:	220d      	movs	r2, #13
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f009 fc01 	bl	800a2fc <memset>
 8000afa:	e000      	b.n	8000afe <USB_ClearBuffer+0x42>
	if(idx >= USB_FIFO_SIZE) return;
 8000afc:	bf00      	nop

}
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000120 	.word	0x20000120

08000b08 <USB_ClearPacket>:

static void USB_ClearPacket(uint8_t idx) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	if(idx >= USB_FIFO_SIZE) return;
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d82c      	bhi.n	8000b72 <USB_ClearPacket+0x6a>

	usb.packet[idx].command = 0;
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	4918      	ldr	r1, [pc, #96]	@ (8000b7c <USB_ClearPacket+0x74>)
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	440b      	add	r3, r1
 8000b26:	33e4      	adds	r3, #228	@ 0xe4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	801a      	strh	r2, [r3, #0]
	usb.packet[idx].invalid = true;
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	4913      	ldr	r1, [pc, #76]	@ (8000b7c <USB_ClearPacket+0x74>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	440b      	add	r3, r1
 8000b3a:	33ef      	adds	r3, #239	@ 0xef
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
	usb.packet[idx].length = 0;
 8000b40:	79fa      	ldrb	r2, [r7, #7]
 8000b42:	490e      	ldr	r1, [pc, #56]	@ (8000b7c <USB_ClearPacket+0x74>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	33ee      	adds	r3, #238	@ 0xee
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]

	memset(usb.packet[idx].data, 0, MAX_DATA_SIZE);
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	33e0      	adds	r3, #224	@ 0xe0
 8000b60:	4a06      	ldr	r2, [pc, #24]	@ (8000b7c <USB_ClearPacket+0x74>)
 8000b62:	4413      	add	r3, r2
 8000b64:	3306      	adds	r3, #6
 8000b66:	2208      	movs	r2, #8
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f009 fbc6 	bl	800a2fc <memset>
 8000b70:	e000      	b.n	8000b74 <USB_ClearPacket+0x6c>
	if(idx >= USB_FIFO_SIZE) return;
 8000b72:	bf00      	nop
}
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000120 	.word	0x20000120

08000b80 <USB_Init>:

void USB_Init() {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < USB_FIFO_SIZE; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	e00a      	b.n	8000ba2 <USB_Init+0x22>
		USB_ClearBuffer(i);
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff94 	bl	8000abc <USB_ClearBuffer>
		USB_ClearPacket(i);
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ffb6 	bl	8000b08 <USB_ClearPacket>
	for(uint8_t i = 0; i < USB_FIFO_SIZE; i++) {
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d9f1      	bls.n	8000b8c <USB_Init+0xc>
	}

	usb.recieveIdx = 0;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <USB_Init+0x48>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
	usb.processIdx = 0;
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <USB_Init+0x48>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	705a      	strb	r2, [r3, #1]
	usb.sendIdx = 0;
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <USB_Init+0x48>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	709a      	strb	r2, [r3, #2]
	LED_Off();
 8000bba:	f7ff ff73 	bl	8000aa4 <LED_Off>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000120 	.word	0x20000120

08000bcc <USB_HandleRecieve>:

void USB_HandleRecieve(uint8_t *Buf, uint32_t Len) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
	memcpy(usb.rawPacket[usb.recieveIdx].buffer, Buf, Len);
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <USB_HandleRecieve+0x6c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4613      	mov	r3, r2
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	1a9b      	subs	r3, r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4a14      	ldr	r2, [pc, #80]	@ (8000c38 <USB_HandleRecieve+0x6c>)
 8000be6:	4413      	add	r3, r2
 8000be8:	3304      	adds	r3, #4
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f009 fbb0 	bl	800a354 <memcpy>
	usb.rawPacket[usb.recieveIdx].length = Len;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <USB_HandleRecieve+0x6c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2d8      	uxtb	r0, r3
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <USB_HandleRecieve+0x6c>)
 8000c00:	460b      	mov	r3, r1
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	1a5b      	subs	r3, r3, r1
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	3303      	adds	r3, #3
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	701a      	strb	r2, [r3, #0]

	usb.recieveIdx++;
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <USB_HandleRecieve+0x6c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <USB_HandleRecieve+0x6c>)
 8000c1a:	701a      	strb	r2, [r3, #0]
	if(usb.recieveIdx >= USB_FIFO_SIZE) usb.recieveIdx = 0;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <USB_HandleRecieve+0x6c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d902      	bls.n	8000c2a <USB_HandleRecieve+0x5e>
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <USB_HandleRecieve+0x6c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
	LED_Toggle();
 8000c2a:	f7ff ff2f 	bl	8000a8c <LED_Toggle>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000120 	.word	0x20000120

08000c3c <USB_ProcessPacket>:

USBCommand_t USB_ProcessPacket(const USBPacket_t *packet) {
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b087      	sub	sp, #28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	USBCommand_t cmd = {
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
		.command = 0,
		.length = 0, //length of data bytes
		.invalid = false
	};

	memset(cmd.data, 0, MAX_DATA_SIZE);
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	3302      	adds	r3, #2
 8000c58:	2208      	movs	r2, #8
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f009 fb4d 	bl	800a2fc <memset>

	uint8_t checksum = packet->buffer[0];
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	785b      	ldrb	r3, [r3, #1]
 8000c66:	75fb      	strb	r3, [r7, #23]
	uint8_t length = packet->length;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	757b      	strb	r3, [r7, #21]

	if(packet->buffer[START_IDX] != START_BYTE) {
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	785b      	ldrb	r3, [r3, #1]
 8000c72:	2baa      	cmp	r3, #170	@ 0xaa
 8000c74:	d001      	beq.n	8000c7a <USB_ProcessPacket+0x3e>
		cmd.invalid = true;
 8000c76:	2301      	movs	r3, #1
 8000c78:	74fb      	strb	r3, [r7, #19]
	}

	if(packet->buffer[SIZE_IDX] > MAX_DATA_SIZE) {
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	789b      	ldrb	r3, [r3, #2]
 8000c7e:	2b08      	cmp	r3, #8
 8000c80:	d901      	bls.n	8000c86 <USB_ProcessPacket+0x4a>
		cmd.invalid = true;
 8000c82:	2301      	movs	r3, #1
 8000c84:	74fb      	strb	r3, [r7, #19]
	}

	for(uint8_t i = 1; i < length - 1; i++) {
 8000c86:	2301      	movs	r3, #1
 8000c88:	75bb      	strb	r3, [r7, #22]
 8000c8a:	e009      	b.n	8000ca0 <USB_ProcessPacket+0x64>
		checksum ^= packet->buffer[i];
 8000c8c:	7dbb      	ldrb	r3, [r7, #22]
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	785a      	ldrb	r2, [r3, #1]
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
 8000c96:	4053      	eors	r3, r2
 8000c98:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 1; i < length - 1; i++) {
 8000c9a:	7dbb      	ldrb	r3, [r7, #22]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	75bb      	strb	r3, [r7, #22]
 8000ca0:	7dba      	ldrb	r2, [r7, #22]
 8000ca2:	7d7b      	ldrb	r3, [r7, #21]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	dbf0      	blt.n	8000c8c <USB_ProcessPacket+0x50>
	}

	if(checksum != packet->buffer[length-1]) {
 8000caa:	7d7b      	ldrb	r3, [r7, #21]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	785b      	ldrb	r3, [r3, #1]
 8000cb4:	7dfa      	ldrb	r2, [r7, #23]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d001      	beq.n	8000cbe <USB_ProcessPacket+0x82>
		cmd.invalid = true;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	74fb      	strb	r3, [r7, #19]
	}

	cmd.length = packet->buffer[SIZE_IDX];
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	789b      	ldrb	r3, [r3, #2]
 8000cc2:	74bb      	strb	r3, [r7, #18]
	cmd.command = packet->buffer[CMD1_IDX] << 8
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	78db      	ldrb	r3, [r3, #3]
 8000cc8:	021b      	lsls	r3, r3, #8
				| packet->buffer[CMD2_IDX];
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	791b      	ldrb	r3, [r3, #4]
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	b29b      	uxth	r3, r3
	cmd.command = packet->buffer[CMD1_IDX] << 8
 8000cd8:	813b      	strh	r3, [r7, #8]
	if(cmd.length != 0) memcpy(cmd.data, &packet->buffer[VAL1_IDX], cmd.length);
 8000cda:	7cbb      	ldrb	r3, [r7, #18]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <USB_ProcessPacket+0xb8>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	1d59      	adds	r1, r3, #5
 8000ce4:	7cbb      	ldrb	r3, [r7, #18]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	3302      	adds	r3, #2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f009 fb30 	bl	800a354 <memcpy>

	return cmd;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	461c      	mov	r4, r3
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000cfe:	6020      	str	r0, [r4, #0]
 8000d00:	6061      	str	r1, [r4, #4]
 8000d02:	60a2      	str	r2, [r4, #8]
}
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	371c      	adds	r7, #28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd90      	pop	{r4, r7, pc}

08000d0c <USB_DoEvents>:

void USB_DoEvents() {
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0

	if(usb.recieveIdx == usb.processIdx) return;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <USB_DoEvents+0x80>)
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <USB_DoEvents+0x80>)
 8000d18:	785b      	ldrb	r3, [r3, #1]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d032      	beq.n	8000d84 <USB_DoEvents+0x78>

	usb.packet[usb.processIdx] = USB_ProcessPacket(&usb.rawPacket[usb.processIdx]);
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <USB_DoEvents+0x80>)
 8000d20:	785b      	ldrb	r3, [r3, #1]
 8000d22:	461a      	mov	r2, r3
 8000d24:	4613      	mov	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	1a9b      	subs	r3, r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4a17      	ldr	r2, [pc, #92]	@ (8000d8c <USB_DoEvents+0x80>)
 8000d2e:	4413      	add	r3, r2
 8000d30:	1cda      	adds	r2, r3, #3
 8000d32:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <USB_DoEvents+0x80>)
 8000d34:	785b      	ldrb	r3, [r3, #1]
 8000d36:	4618      	mov	r0, r3
 8000d38:	4914      	ldr	r1, [pc, #80]	@ (8000d8c <USB_DoEvents+0x80>)
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4403      	add	r3, r0
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	440b      	add	r3, r1
 8000d44:	f103 04e0 	add.w	r4, r3, #224	@ 0xe0
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff75 	bl	8000c3c <USB_ProcessPacket>
 8000d52:	1d23      	adds	r3, r4, #4
 8000d54:	463a      	mov	r2, r7
 8000d56:	6810      	ldr	r0, [r2, #0]
 8000d58:	6851      	ldr	r1, [r2, #4]
 8000d5a:	6892      	ldr	r2, [r2, #8]
 8000d5c:	c307      	stmia	r3!, {r0, r1, r2}
	USB_ClearBuffer(usb.processIdx);
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <USB_DoEvents+0x80>)
 8000d60:	785b      	ldrb	r3, [r3, #1]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff feaa 	bl	8000abc <USB_ClearBuffer>

	usb.processIdx++;
 8000d68:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <USB_DoEvents+0x80>)
 8000d6a:	785b      	ldrb	r3, [r3, #1]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <USB_DoEvents+0x80>)
 8000d72:	705a      	strb	r2, [r3, #1]
	if(usb.processIdx >= USB_FIFO_SIZE) usb.processIdx = 0;
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <USB_DoEvents+0x80>)
 8000d76:	785b      	ldrb	r3, [r3, #1]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d904      	bls.n	8000d86 <USB_DoEvents+0x7a>
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <USB_DoEvents+0x80>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	705a      	strb	r2, [r3, #1]
 8000d82:	e000      	b.n	8000d86 <USB_DoEvents+0x7a>
	if(usb.recieveIdx == usb.processIdx) return;
 8000d84:	bf00      	nop
}
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd90      	pop	{r4, r7, pc}
 8000d8c:	20000120 	.word	0x20000120

08000d90 <USB_GetCommand>:

USBCommand_t USB_GetCommand() {
 8000d90:	b490      	push	{r4, r7}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	USBCommand_t cmd = {
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	2301      	movs	r3, #1
 8000da6:	74fb      	strb	r3, [r7, #19]
		.invalid = true
	};

	uint8_t idx = usb.sendIdx;
 8000da8:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <USB_GetCommand+0x7c>)
 8000daa:	789b      	ldrb	r3, [r3, #2]
 8000dac:	75fb      	strb	r3, [r7, #23]

	if(idx == usb.processIdx) return cmd;
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <USB_GetCommand+0x7c>)
 8000db0:	785b      	ldrb	r3, [r3, #1]
 8000db2:	7dfa      	ldrb	r2, [r7, #23]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d108      	bne.n	8000dca <USB_GetCommand+0x3a>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	461c      	mov	r4, r3
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000dc2:	6020      	str	r0, [r4, #0]
 8000dc4:	6061      	str	r1, [r4, #4]
 8000dc6:	60a2      	str	r2, [r4, #8]
 8000dc8:	e01b      	b.n	8000e02 <USB_GetCommand+0x72>

	usb.sendIdx++;
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <USB_GetCommand+0x7c>)
 8000dcc:	789b      	ldrb	r3, [r3, #2]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <USB_GetCommand+0x7c>)
 8000dd4:	709a      	strb	r2, [r3, #2]
	if(usb.sendIdx >= USB_FIFO_SIZE) usb.sendIdx = 0;
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <USB_GetCommand+0x7c>)
 8000dd8:	789b      	ldrb	r3, [r3, #2]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d902      	bls.n	8000de4 <USB_GetCommand+0x54>
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <USB_GetCommand+0x7c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	709a      	strb	r2, [r3, #2]

	return usb.packet[idx];
 8000de4:	7dfa      	ldrb	r2, [r7, #23]
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	4908      	ldr	r1, [pc, #32]	@ (8000e0c <USB_GetCommand+0x7c>)
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	440b      	add	r3, r1
 8000df4:	33e0      	adds	r3, #224	@ 0xe0
 8000df6:	4604      	mov	r4, r0
 8000df8:	3304      	adds	r3, #4
 8000dfa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000dfc:	6020      	str	r0, [r4, #0]
 8000dfe:	6061      	str	r1, [r4, #4]
 8000e00:	60a2      	str	r2, [r4, #8]
}
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc90      	pop	{r4, r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	20000120 	.word	0x20000120

08000e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <MX_DMA_Init+0x3c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <MX_DMA_Init+0x3c>)
 8000e20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <MX_DMA_Init+0x3c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	203a      	movs	r0, #58	@ 0x3a
 8000e38:	f000 fdf5 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e3c:	203a      	movs	r0, #58	@ 0x3a
 8000e3e:	f000 fe0e 	bl	8001a5e <HAL_NVIC_EnableIRQ>

}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b37      	ldr	r3, [pc, #220]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a36      	ldr	r2, [pc, #216]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b34      	ldr	r3, [pc, #208]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b2d      	ldr	r3, [pc, #180]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a28      	ldr	r2, [pc, #160]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b26      	ldr	r3, [pc, #152]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a21      	ldr	r2, [pc, #132]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <MX_GPIO_Init+0xf8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLED_GPIO_Port, nLED_Pin, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000edc:	481b      	ldr	r0, [pc, #108]	@ (8000f4c <MX_GPIO_Init+0xfc>)
 8000ede:	f001 fb5f 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_MCP_GPIO_Port, nCS_MCP_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2140      	movs	r1, #64	@ 0x40
 8000ee6:	481a      	ldr	r0, [pc, #104]	@ (8000f50 <MX_GPIO_Init+0x100>)
 8000ee8:	f001 fb5a 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nLED_Pin;
 8000eec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nLED_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	4811      	ldr	r0, [pc, #68]	@ (8000f4c <MX_GPIO_Init+0xfc>)
 8000f06:	f001 f9c7 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MCP_Pin;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MCP_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <MX_GPIO_Init+0x100>)
 8000f20:	f001 f9ba 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_MCP_Pin;
 8000f24:	2340      	movs	r3, #64	@ 0x40
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nCS_MCP_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <MX_GPIO_Init+0x100>)
 8000f3c:	f001 f9ac 	bl	8002298 <HAL_GPIO_Init>

}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	@ 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020400 	.word	0x40020400

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f000 fbf3 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f881 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f62:	f7ff ff75 	bl	8000e50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f66:	f7ff ff53 	bl	8000e10 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000f6a:	f008 fccf 	bl	800990c <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000f6e:	f000 fb13 	bl	8001598 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000f72:	f000 fa0b 	bl	800138c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  USB_Init();
 8000f76:	f7ff fe03 	bl	8000b80 <USB_Init>
  CANSPI_Initialize();
 8000f7a:	f7ff faa5 	bl	80004c8 <CANSPI_Initialize>
  SerialCommands_Init(&huart1);
 8000f7e:	4836      	ldr	r0, [pc, #216]	@ (8001058 <main+0x104>)
 8000f80:	f000 f8f8 	bl	8001174 <SerialCommands_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USB_DoEvents();
 8000f84:	f7ff fec2 	bl	8000d0c <USB_DoEvents>
	  input = USB_GetCommand();
 8000f88:	4c34      	ldr	r4, [pc, #208]	@ (800105c <main+0x108>)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff feff 	bl	8000d90 <USB_GetCommand>
 8000f92:	4623      	mov	r3, r4
 8000f94:	463a      	mov	r2, r7
 8000f96:	6810      	ldr	r0, [r2, #0]
 8000f98:	6851      	ldr	r1, [r2, #4]
 8000f9a:	6892      	ldr	r2, [r2, #8]
 8000f9c:	c307      	stmia	r3!, {r0, r1, r2}
	  SerialCommands_PacketSend(input);
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800105c <main+0x108>)
 8000fa0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fa4:	f000 f96e 	bl	8001284 <SerialCommands_PacketSend>
	  if(!input.invalid) {
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800105c <main+0x108>)
 8000faa:	7adb      	ldrb	r3, [r3, #11]
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0e6      	beq.n	8000f84 <main+0x30>
		  txMessage.frame.idType = dEXTENDED_CAN_MSG_ID_2_0B;
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001060 <main+0x10c>)
 8000fb8:	2202      	movs	r2, #2
 8000fba:	701a      	strb	r2, [r3, #0]
		  txMessage.frame.id = input.command;
 8000fbc:	4b27      	ldr	r3, [pc, #156]	@ (800105c <main+0x108>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b27      	ldr	r3, [pc, #156]	@ (8001060 <main+0x10c>)
 8000fc4:	605a      	str	r2, [r3, #4]
		  txMessage.frame.dlc = input.length;
 8000fc6:	4b25      	ldr	r3, [pc, #148]	@ (800105c <main+0x108>)
 8000fc8:	7a9a      	ldrb	r2, [r3, #10]
 8000fca:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <main+0x10c>)
 8000fcc:	721a      	strb	r2, [r3, #8]
		  if(input.length > 0) txMessage.frame.data0 = input.data[0];
 8000fce:	4b23      	ldr	r3, [pc, #140]	@ (800105c <main+0x108>)
 8000fd0:	7a9b      	ldrb	r3, [r3, #10]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <main+0x8a>
 8000fd6:	4b21      	ldr	r3, [pc, #132]	@ (800105c <main+0x108>)
 8000fd8:	789a      	ldrb	r2, [r3, #2]
 8000fda:	4b21      	ldr	r3, [pc, #132]	@ (8001060 <main+0x10c>)
 8000fdc:	725a      	strb	r2, [r3, #9]
		  if(input.length > 1) txMessage.frame.data1 = input.data[1];
 8000fde:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <main+0x108>)
 8000fe0:	7a9b      	ldrb	r3, [r3, #10]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d903      	bls.n	8000fee <main+0x9a>
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <main+0x108>)
 8000fe8:	78da      	ldrb	r2, [r3, #3]
 8000fea:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <main+0x10c>)
 8000fec:	729a      	strb	r2, [r3, #10]
		  if(input.length > 2) txMessage.frame.data2 = input.data[2];
 8000fee:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <main+0x108>)
 8000ff0:	7a9b      	ldrb	r3, [r3, #10]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d903      	bls.n	8000ffe <main+0xaa>
 8000ff6:	4b19      	ldr	r3, [pc, #100]	@ (800105c <main+0x108>)
 8000ff8:	791a      	ldrb	r2, [r3, #4]
 8000ffa:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <main+0x10c>)
 8000ffc:	72da      	strb	r2, [r3, #11]
		  if(input.length > 3) txMessage.frame.data3 = input.data[3];
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <main+0x108>)
 8001000:	7a9b      	ldrb	r3, [r3, #10]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d903      	bls.n	800100e <main+0xba>
 8001006:	4b15      	ldr	r3, [pc, #84]	@ (800105c <main+0x108>)
 8001008:	795a      	ldrb	r2, [r3, #5]
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <main+0x10c>)
 800100c:	731a      	strb	r2, [r3, #12]
		  if(input.length > 4) txMessage.frame.data4 = input.data[4];
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <main+0x108>)
 8001010:	7a9b      	ldrb	r3, [r3, #10]
 8001012:	2b04      	cmp	r3, #4
 8001014:	d903      	bls.n	800101e <main+0xca>
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <main+0x108>)
 8001018:	799a      	ldrb	r2, [r3, #6]
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <main+0x10c>)
 800101c:	735a      	strb	r2, [r3, #13]
		  if(input.length > 5) txMessage.frame.data5 = input.data[5];
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <main+0x108>)
 8001020:	7a9b      	ldrb	r3, [r3, #10]
 8001022:	2b05      	cmp	r3, #5
 8001024:	d903      	bls.n	800102e <main+0xda>
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <main+0x108>)
 8001028:	79da      	ldrb	r2, [r3, #7]
 800102a:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <main+0x10c>)
 800102c:	739a      	strb	r2, [r3, #14]
		  if(input.length > 6) txMessage.frame.data6 = input.data[6];
 800102e:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <main+0x108>)
 8001030:	7a9b      	ldrb	r3, [r3, #10]
 8001032:	2b06      	cmp	r3, #6
 8001034:	d903      	bls.n	800103e <main+0xea>
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <main+0x108>)
 8001038:	7a1a      	ldrb	r2, [r3, #8]
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <main+0x10c>)
 800103c:	73da      	strb	r2, [r3, #15]
		  if(input.length > 7) txMessage.frame.data7 = input.data[7];
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <main+0x108>)
 8001040:	7a9b      	ldrb	r3, [r3, #10]
 8001042:	2b07      	cmp	r3, #7
 8001044:	d903      	bls.n	800104e <main+0xfa>
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <main+0x108>)
 8001048:	7a5a      	ldrb	r2, [r3, #9]
 800104a:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <main+0x10c>)
 800104c:	741a      	strb	r2, [r3, #16]
		  CANSPI_Transmit(&txMessage);
 800104e:	4804      	ldr	r0, [pc, #16]	@ (8001060 <main+0x10c>)
 8001050:	f7ff faea 	bl	8000628 <CANSPI_Transmit>
	  USB_DoEvents();
 8001054:	e796      	b.n	8000f84 <main+0x30>
 8001056:	bf00      	nop
 8001058:	20000368 	.word	0x20000368
 800105c:	200002d8 	.word	0x200002d8
 8001060:	200002c4 	.word	0x200002c4

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	@ 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	2230      	movs	r2, #48	@ 0x30
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f009 f942 	bl	800a2fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <SystemClock_Config+0xc8>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	4a26      	ldr	r2, [pc, #152]	@ (800112c <SystemClock_Config+0xc8>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	@ 0x40
 8001098:	4b24      	ldr	r3, [pc, #144]	@ (800112c <SystemClock_Config+0xc8>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <SystemClock_Config+0xcc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a20      	ldr	r2, [pc, #128]	@ (8001130 <SystemClock_Config+0xcc>)
 80010ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <SystemClock_Config+0xcc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010d4:	2319      	movs	r3, #25
 80010d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010d8:	23c0      	movs	r3, #192	@ 0xc0
 80010da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010dc:	2302      	movs	r3, #2
 80010de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fcdf 	bl	8003aac <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f4:	f000 f837 	bl	8001166 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	2302      	movs	r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2103      	movs	r1, #3
 8001114:	4618      	mov	r0, r3
 8001116:	f002 ff41 	bl	8003f9c <HAL_RCC_ClockConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001120:	f000 f821 	bl	8001166 <Error_Handler>
  }
}
 8001124:	bf00      	nop
 8001126:	3750      	adds	r7, #80	@ 0x50
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000

08001134 <USB_CDC_RxHandler>:

/* USER CODE BEGIN 4 */
void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	USB_HandleRecieve(Buf, Len);
 800113e:	6839      	ldr	r1, [r7, #0]
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fd43 	bl	8000bcc <USB_HandleRecieve>
    //CDC_Transmit_FS(Buf, Len);
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	807b      	strh	r3, [r7, #2]
	SerialCommands_HandleUARTInterrupt();
 800115a:	f000 f877 	bl	800124c <SerialCommands_HandleUARTInterrupt>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116a:	b672      	cpsid	i
}
 800116c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116e:	bf00      	nop
 8001170:	e7fd      	b.n	800116e <Error_Handler+0x8>
	...

08001174 <SerialCommands_Init>:

// Exposed command structure
SerialCommand_t current_command = {0, 0, false, false};   // Initialize to zero

// Initialize the serial commands system
void SerialCommands_Init(UART_HandleTypeDef *huart) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
    serial_huart = huart;                     // Save the UART handle
 800117c:	4a07      	ldr	r2, [pc, #28]	@ (800119c <SerialCommands_Init+0x28>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
    current_command.command = 0;             // Clear command structure
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <SerialCommands_Init+0x2c>)
 8001184:	2200      	movs	r2, #0
 8001186:	801a      	strh	r2, [r3, #0]
    current_command.value = 0;
 8001188:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <SerialCommands_Init+0x2c>)
 800118a:	2200      	movs	r2, #0
 800118c:	805a      	strh	r2, [r3, #2]
    // Start UART reception in interrupt mode
    SerialCommands_SetupRecieve();
 800118e:	f000 f869 	bl	8001264 <SerialCommands_SetupRecieve>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200002e4 	.word	0x200002e4
 80011a0:	20000308 	.word	0x20000308

080011a4 <SerialCommands_ProcessPacket>:

// Process a complete packet
static void SerialCommands_ProcessPacket(uint8_t *packet) {
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    // Validate the start byte
	current_command.invalid = false;
 80011ac:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <SerialCommands_ProcessPacket+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	715a      	strb	r2, [r3, #5]

    if (packet[0] != START_BYTE) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2baa      	cmp	r3, #170	@ 0xaa
 80011b8:	d002      	beq.n	80011c0 <SerialCommands_ProcessPacket+0x1c>
    	current_command.invalid = true; // Invalid start byte, discard packet
 80011ba:	4b23      	ldr	r3, [pc, #140]	@ (8001248 <SerialCommands_ProcessPacket+0xa4>)
 80011bc:	2201      	movs	r2, #1
 80011be:	715a      	strb	r2, [r3, #5]
    }

    // Validate the checksum
    uint8_t checksum = packet[0] ^ packet[1] ^ packet[2] ^ packet[3] ^ packet[4];
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4053      	eors	r3, r2
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3302      	adds	r3, #2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4053      	eors	r3, r2
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3303      	adds	r3, #3
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4053      	eors	r3, r2
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3304      	adds	r3, #4
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4053      	eors	r3, r2
 80011ea:	73fb      	strb	r3, [r7, #15]
    if (checksum != packet[5]) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3305      	adds	r3, #5
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d002      	beq.n	80011fe <SerialCommands_ProcessPacket+0x5a>
    	current_command.invalid = true;
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <SerialCommands_ProcessPacket+0xa4>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	715a      	strb	r2, [r3, #5]
        //return; // Invalid checksum, discard packet
    }

    // Populate the command structure
    current_command.command = (packet[1] << 8) | packet[2];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3301      	adds	r3, #1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21a      	sxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3302      	adds	r3, #2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21b      	sxth	r3, r3
 8001214:	b29a      	uxth	r2, r3
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <SerialCommands_ProcessPacket+0xa4>)
 8001218:	801a      	strh	r2, [r3, #0]
    current_command.value = (packet[3] << 8) | packet[4];
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3303      	adds	r3, #3
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3304      	adds	r3, #4
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <SerialCommands_ProcessPacket+0xa4>)
 8001232:	805a      	strh	r2, [r3, #2]
    current_command.newCommand = true;
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <SerialCommands_ProcessPacket+0xa4>)
 8001236:	2201      	movs	r2, #1
 8001238:	711a      	strb	r2, [r3, #4]

}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000308 	.word	0x20000308

0800124c <SerialCommands_HandleUARTInterrupt>:

// Handle the UART interrupt callback
void SerialCommands_HandleUARTInterrupt(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

	//HAL_UART_Transmit(serial_huart, rx_buffer, PACKET_SIZE, 0xFFFF);
	SerialCommands_ProcessPacket(rx_buffer);
 8001250:	4803      	ldr	r0, [pc, #12]	@ (8001260 <SerialCommands_HandleUARTInterrupt+0x14>)
 8001252:	f7ff ffa7 	bl	80011a4 <SerialCommands_ProcessPacket>

	// Restart UART reception
	SerialCommands_SetupRecieve();
 8001256:	f000 f805 	bl	8001264 <SerialCommands_SetupRecieve>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200002e8 	.word	0x200002e8

08001264 <SerialCommands_SetupRecieve>:

void SerialCommands_SetupRecieve(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

	HAL_UARTEx_ReceiveToIdle_DMA(serial_huart, rx_buffer, RX_BUFFER_SIZE);
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <SerialCommands_SetupRecieve+0x18>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	221e      	movs	r2, #30
 800126e:	4904      	ldr	r1, [pc, #16]	@ (8001280 <SerialCommands_SetupRecieve+0x1c>)
 8001270:	4618      	mov	r0, r3
 8001272:	f003 ff2e 	bl	80050d2 <HAL_UARTEx_ReceiveToIdle_DMA>
//	}
//	else if (HAL_UART_Receive_IT(serial_huart, rx_buffer, PACKET_SIZE) == HAL_ERROR) {
//		HAL_UART_Init(serial_huart);
//		HAL_UART_Receive_IT(serial_huart, rx_buffer, PACKET_SIZE);
//	}
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002e4 	.word	0x200002e4
 8001280:	200002e8 	.word	0x200002e8

08001284 <SerialCommands_PacketSend>:

void SerialCommands_PacketSend(USBCommand_t cmd) {
 8001284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001288:	b089      	sub	sp, #36	@ 0x24
 800128a:	af00      	add	r7, sp, #0
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001292:	466b      	mov	r3, sp
 8001294:	461e      	mov	r6, r3

	if(cmd.invalid) return;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SerialCommands_PacketSend+0x1c>
 800129c:	46b5      	mov	sp, r6
 800129e:	e06e      	b.n	800137e <SerialCommands_PacketSend+0xfa>

	uint8_t tx_header[5+cmd.length];
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	1d59      	adds	r1, r3, #5
 80012a4:	1e4b      	subs	r3, r1, #1
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	460a      	mov	r2, r1
 80012aa:	2300      	movs	r3, #0
 80012ac:	4690      	mov	r8, r2
 80012ae:	4699      	mov	r9, r3
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012c4:	460a      	mov	r2, r1
 80012c6:	2300      	movs	r3, #0
 80012c8:	4614      	mov	r4, r2
 80012ca:	461d      	mov	r5, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	00eb      	lsls	r3, r5, #3
 80012d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012da:	00e2      	lsls	r2, r4, #3
 80012dc:	460b      	mov	r3, r1
 80012de:	3307      	adds	r3, #7
 80012e0:	08db      	lsrs	r3, r3, #3
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	ebad 0d03 	sub.w	sp, sp, r3
 80012e8:	466b      	mov	r3, sp
 80012ea:	3300      	adds	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
	tx_header[0] = START_BYTE;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	22aa      	movs	r2, #170	@ 0xaa
 80012f2:	701a      	strb	r2, [r3, #0]
	tx_header[1] = cmd.length;
 80012f4:	7bba      	ldrb	r2, [r7, #14]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	705a      	strb	r2, [r3, #1]
	tx_header[2] = (cmd.command & 0xFF00) >> 8;
 80012fa:	88bb      	ldrh	r3, [r7, #4]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b2da      	uxtb	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	709a      	strb	r2, [r3, #2]
	tx_header[3] = cmd.command & 0x00FF;
 8001306:	88bb      	ldrh	r3, [r7, #4]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	70da      	strb	r2, [r3, #3]

	for(uint8_t i = 4; i < (4+cmd.length); i++) {
 800130e:	2304      	movs	r3, #4
 8001310:	77fb      	strb	r3, [r7, #31]
 8001312:	e00b      	b.n	800132c <SerialCommands_PacketSend+0xa8>
		tx_header[i] = cmd.data[i-4];
 8001314:	7ffb      	ldrb	r3, [r7, #31]
 8001316:	1f1a      	subs	r2, r3, #4
 8001318:	7ffb      	ldrb	r3, [r7, #31]
 800131a:	3220      	adds	r2, #32
 800131c:	443a      	add	r2, r7
 800131e:	f812 1c1a 	ldrb.w	r1, [r2, #-26]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 4; i < (4+cmd.length); i++) {
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	3301      	adds	r3, #1
 800132a:	77fb      	strb	r3, [r7, #31]
 800132c:	7bbb      	ldrb	r3, [r7, #14]
 800132e:	1cda      	adds	r2, r3, #3
 8001330:	7ffb      	ldrb	r3, [r7, #31]
 8001332:	429a      	cmp	r2, r3
 8001334:	daee      	bge.n	8001314 <SerialCommands_PacketSend+0x90>
	}

	uint8_t checksum = tx_header[0];
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	77bb      	strb	r3, [r7, #30]
	for(uint8_t i = 1; i < (4+cmd.length); i++) {
 800133c:	2301      	movs	r3, #1
 800133e:	777b      	strb	r3, [r7, #29]
 8001340:	e008      	b.n	8001354 <SerialCommands_PacketSend+0xd0>
		checksum ^= tx_header[i];
 8001342:	7f7b      	ldrb	r3, [r7, #29]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	5cd2      	ldrb	r2, [r2, r3]
 8001348:	7fbb      	ldrb	r3, [r7, #30]
 800134a:	4053      	eors	r3, r2
 800134c:	77bb      	strb	r3, [r7, #30]
	for(uint8_t i = 1; i < (4+cmd.length); i++) {
 800134e:	7f7b      	ldrb	r3, [r7, #29]
 8001350:	3301      	adds	r3, #1
 8001352:	777b      	strb	r3, [r7, #29]
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	1cda      	adds	r2, r3, #3
 8001358:	7f7b      	ldrb	r3, [r7, #29]
 800135a:	429a      	cmp	r2, r3
 800135c:	daf1      	bge.n	8001342 <SerialCommands_PacketSend+0xbe>
	}

	tx_header[4+cmd.length] = checksum;
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	3304      	adds	r3, #4
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	7fb9      	ldrb	r1, [r7, #30]
 8001366:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit(serial_huart, tx_header, (5+cmd.length), 0xFFFF);
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <SerialCommands_PacketSend+0x104>)
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	3305      	adds	r3, #5
 8001370:	b29a      	uxth	r2, r3
 8001372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001376:	6979      	ldr	r1, [r7, #20]
 8001378:	f003 fe20 	bl	8004fbc <HAL_UART_Transmit>
 800137c:	46b5      	mov	sp, r6
}
 800137e:	3724      	adds	r7, #36	@ 0x24
 8001380:	46bd      	mov	sp, r7
 8001382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001386:	bf00      	nop
 8001388:	200002e4 	.word	0x200002e4

0800138c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001390:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <MX_SPI2_Init+0x64>)
 8001392:	4a18      	ldr	r2, [pc, #96]	@ (80013f4 <MX_SPI2_Init+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <MX_SPI2_Init+0x64>)
 8001398:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800139c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800139e:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <MX_SPI2_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <MX_SPI2_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_SPI2_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_SPI2_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <MX_SPI2_Init+0x64>)
 80013b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_SPI2_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <MX_SPI2_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_SPI2_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <MX_SPI2_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_SPI2_Init+0x64>)
 80013d8:	220a      	movs	r2, #10
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_SPI2_Init+0x64>)
 80013de:	f002 ffbd 	bl	800435c <HAL_SPI_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013e8:	f7ff febd 	bl	8001166 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000310 	.word	0x20000310
 80013f4:	40003800 	.word	0x40003800

080013f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a19      	ldr	r2, [pc, #100]	@ (800147c <HAL_SPI_MspInit+0x84>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12c      	bne.n	8001474 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <HAL_SPI_MspInit+0x88>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	4a17      	ldr	r2, [pc, #92]	@ (8001480 <HAL_SPI_MspInit+0x88>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001428:	6413      	str	r3, [r2, #64]	@ 0x40
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <HAL_SPI_MspInit+0x88>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <HAL_SPI_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a10      	ldr	r2, [pc, #64]	@ (8001480 <HAL_SPI_MspInit+0x88>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <HAL_SPI_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001452:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001464:	2305      	movs	r3, #5
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <HAL_SPI_MspInit+0x8c>)
 8001470:	f000 ff12 	bl	8002298 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	@ 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40003800 	.word	0x40003800
 8001480:	40023800 	.word	0x40023800
 8001484:	40020400 	.word	0x40020400

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <HAL_MspInit+0x4c>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149c:	6453      	str	r3, [r2, #68]	@ 0x44
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <NMI_Handler+0x4>

080014e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <MemManage_Handler+0x4>

080014f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <UsageFault_Handler+0x4>

08001500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 f95b 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800153c:	4802      	ldr	r0, [pc, #8]	@ (8001548 <USART1_IRQHandler+0x10>)
 800153e:	f003 fe25 	bl	800518c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000368 	.word	0x20000368

0800154c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <DMA2_Stream2_IRQHandler+0x10>)
 8001552:	f000 fc37 	bl	8001dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200003b0 	.word	0x200003b0

08001560 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <OTG_FS_IRQHandler+0x10>)
 8001566:	f001 f992 	bl	800288e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200018f4 	.word	0x200018f4

08001574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <SystemInit+0x20>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157e:	4a05      	ldr	r2, [pc, #20]	@ (8001594 <SystemInit+0x20>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 800159e:	4a12      	ldr	r2, [pc, #72]	@ (80015e8 <MX_USART1_UART_Init+0x50>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015a4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80015a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015d0:	f003 fca4 	bl	8004f1c <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015da:	f7ff fdc4 	bl	8001166 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000368 	.word	0x20000368
 80015e8:	40011000 	.word	0x40011000

080015ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a34      	ldr	r2, [pc, #208]	@ (80016dc <HAL_UART_MspInit+0xf0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d162      	bne.n	80016d4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <HAL_UART_MspInit+0xf4>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	4a32      	ldr	r2, [pc, #200]	@ (80016e0 <HAL_UART_MspInit+0xf4>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6453      	str	r3, [r2, #68]	@ 0x44
 800161e:	4b30      	ldr	r3, [pc, #192]	@ (80016e0 <HAL_UART_MspInit+0xf4>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b2c      	ldr	r3, [pc, #176]	@ (80016e0 <HAL_UART_MspInit+0xf4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a2b      	ldr	r2, [pc, #172]	@ (80016e0 <HAL_UART_MspInit+0xf4>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b29      	ldr	r3, [pc, #164]	@ (80016e0 <HAL_UART_MspInit+0xf4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001646:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001658:	2307      	movs	r3, #7
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4820      	ldr	r0, [pc, #128]	@ (80016e4 <HAL_UART_MspInit+0xf8>)
 8001664:	f000 fe18 	bl	8002298 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 800166a:	4a20      	ldr	r2, [pc, #128]	@ (80016ec <HAL_UART_MspInit+0x100>)
 800166c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800166e:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 8001670:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001674:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001676:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 8001684:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001688:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001690:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800169c:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016a8:	480f      	ldr	r0, [pc, #60]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 80016aa:	f000 f9f3 	bl	8001a94 <HAL_DMA_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80016b4:	f7ff fd57 	bl	8001166 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a0b      	ldr	r2, [pc, #44]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 80016bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_UART_MspInit+0xfc>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	2025      	movs	r0, #37	@ 0x25
 80016ca:	f000 f9ac 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016ce:	2025      	movs	r0, #37	@ 0x25
 80016d0:	f000 f9c5 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40011000 	.word	0x40011000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	200003b0 	.word	0x200003b0
 80016ec:	40026440 	.word	0x40026440

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001728 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f4:	f7ff ff3e 	bl	8001574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	@ (8001730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	@ (800173c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f008 fdf5 	bl	800a30c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7ff fc17 	bl	8000f54 <main>
  bx  lr    
 8001726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001734:	0800a400 	.word	0x0800a400
  ldr r2, =_sbss
 8001738:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800173c:	20001ff8 	.word	0x20001ff8

08001740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>
	...

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0d      	ldr	r2, [pc, #52]	@ (8001784 <HAL_Init+0x40>)
 800174e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_Init+0x40>)
 800175a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800175e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	@ (8001784 <HAL_Init+0x40>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 f94f 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001772:	200f      	movs	r0, #15
 8001774:	f000 f808 	bl	8001788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001778:	f7ff fe86 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023c00 	.word	0x40023c00

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_InitTick+0x54>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_InitTick+0x58>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f967 	bl	8001a7a <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00e      	b.n	80017d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d80a      	bhi.n	80017d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f000 f92f 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c8:	4a06      	ldr	r2, [pc, #24]	@ (80017e4 <HAL_InitTick+0x5c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008
 800180c:	20000410 	.word	0x20000410

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000410 	.word	0x20000410

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4907      	ldr	r1, [pc, #28]	@ (800190c <__NVIC_EnableIRQ+0x38>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	@ (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	@ (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	@ 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff29 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff3e 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff31 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffa2 	bl	80019cc <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff feb6 	bl	8001810 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e099      	b.n	8001be4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad0:	e00f      	b.n	8001af2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad2:	f7ff fe9d 	bl	8001810 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d908      	bls.n	8001af2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e078      	b.n	8001be4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1e8      	bne.n	8001ad2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4b38      	ldr	r3, [pc, #224]	@ (8001bec <HAL_DMA_Init+0x158>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d107      	bne.n	8001b5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b54:	4313      	orrs	r3, r2
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f023 0307 	bic.w	r3, r3, #7
 8001b72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d117      	bne.n	8001bb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00e      	beq.n	8001bb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fb01 	bl	80021a0 <DMA_CheckFifoParam>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2240      	movs	r2, #64	@ 0x40
 8001ba8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e016      	b.n	8001be4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fab8 	bl	8002134 <DMA_CalcBaseAndBitshift>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bcc:	223f      	movs	r2, #63	@ 0x3f
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	f010803f 	.word	0xf010803f

08001bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_DMA_Start_IT+0x26>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e040      	b.n	8001c98 <HAL_DMA_Start_IT+0xa8>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d12f      	bne.n	8001c8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fa4a 	bl	80020d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c48:	223f      	movs	r2, #63	@ 0x3f
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0216 	orr.w	r2, r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0208 	orr.w	r2, r2, #8
 8001c76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e005      	b.n	8001c96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c92:	2302      	movs	r3, #2
 8001c94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cae:	f7ff fdaf 	bl	8001810 <HAL_GetTick>
 8001cb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d008      	beq.n	8001cd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2280      	movs	r2, #128	@ 0x80
 8001cc4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e052      	b.n	8001d78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0216 	bic.w	r2, r2, #22
 8001ce0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d103      	bne.n	8001d02 <HAL_DMA_Abort+0x62>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0208 	bic.w	r2, r2, #8
 8001d10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d22:	e013      	b.n	8001d4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d24:	f7ff fd74 	bl	8001810 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b05      	cmp	r3, #5
 8001d30:	d90c      	bls.n	8001d4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2220      	movs	r2, #32
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e015      	b.n	8001d78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1e4      	bne.n	8001d24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5e:	223f      	movs	r2, #63	@ 0x3f
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d004      	beq.n	8001d9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2280      	movs	r2, #128	@ 0x80
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00c      	b.n	8001db8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2205      	movs	r2, #5
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0201 	bic.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dd0:	4b8e      	ldr	r3, [pc, #568]	@ (800200c <HAL_DMA_IRQHandler+0x248>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a8e      	ldr	r2, [pc, #568]	@ (8002010 <HAL_DMA_IRQHandler+0x24c>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0a9b      	lsrs	r3, r3, #10
 8001ddc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dee:	2208      	movs	r2, #8
 8001df0:	409a      	lsls	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d01a      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0204 	bic.w	r2, r2, #4
 8001e16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e34:	2201      	movs	r2, #1
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d012      	beq.n	8001e66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e52:	2201      	movs	r2, #1
 8001e54:	409a      	lsls	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5e:	f043 0202 	orr.w	r2, r3, #2
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d012      	beq.n	8001e9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00b      	beq.n	8001e9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	2204      	movs	r2, #4
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e94:	f043 0204 	orr.w	r2, r3, #4
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d043      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d03c      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d018      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d108      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d024      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
 8001ef2:	e01f      	b.n	8001f34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
 8001f04:	e016      	b.n	8001f34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0208 	bic.w	r2, r2, #8
 8001f22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f38:	2220      	movs	r2, #32
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 808f 	beq.w	8002064 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8087 	beq.w	8002064 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d136      	bne.n	8001fdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0216 	bic.w	r2, r2, #22
 8001f7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d103      	bne.n	8001f9e <HAL_DMA_IRQHandler+0x1da>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0208 	bic.w	r2, r2, #8
 8001fac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb2:	223f      	movs	r2, #63	@ 0x3f
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d07e      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
        }
        return;
 8001fda:	e079      	b.n	80020d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10d      	bne.n	8002014 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d031      	beq.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
 8002008:	e02c      	b.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
 800200a:	bf00      	nop
 800200c:	20000000 	.word	0x20000000
 8002010:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d023      	beq.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
 8002024:	e01e      	b.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10f      	bne.n	8002054 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0210 	bic.w	r2, r2, #16
 8002042:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002068:	2b00      	cmp	r3, #0
 800206a:	d032      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d022      	beq.n	80020be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2205      	movs	r2, #5
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3301      	adds	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	d307      	bcc.n	80020ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f2      	bne.n	8002090 <HAL_DMA_IRQHandler+0x2cc>
 80020aa:	e000      	b.n	80020ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	4798      	blx	r3
 80020ce:	e000      	b.n	80020d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020d0:	bf00      	nop
    }
  }
}
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b40      	cmp	r3, #64	@ 0x40
 8002104:	d108      	bne.n	8002118 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002116:	e007      	b.n	8002128 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3b10      	subs	r3, #16
 8002144:	4a14      	ldr	r2, [pc, #80]	@ (8002198 <DMA_CalcBaseAndBitshift+0x64>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800214e:	4a13      	ldr	r2, [pc, #76]	@ (800219c <DMA_CalcBaseAndBitshift+0x68>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d909      	bls.n	8002176 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	1d1a      	adds	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	659a      	str	r2, [r3, #88]	@ 0x58
 8002174:	e007      	b.n	8002186 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	aaaaaaab 	.word	0xaaaaaaab
 800219c:	0800a3e8 	.word	0x0800a3e8

080021a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11f      	bne.n	80021fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d856      	bhi.n	800226e <DMA_CheckFifoParam+0xce>
 80021c0:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <DMA_CheckFifoParam+0x28>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021eb 	.word	0x080021eb
 80021d0:	080021d9 	.word	0x080021d9
 80021d4:	0800226f 	.word	0x0800226f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d046      	beq.n	8002272 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e8:	e043      	b.n	8002272 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021f2:	d140      	bne.n	8002276 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f8:	e03d      	b.n	8002276 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002202:	d121      	bne.n	8002248 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d837      	bhi.n	800227a <DMA_CheckFifoParam+0xda>
 800220a:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <DMA_CheckFifoParam+0x70>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002221 	.word	0x08002221
 8002214:	08002227 	.word	0x08002227
 8002218:	08002221 	.word	0x08002221
 800221c:	08002239 	.word	0x08002239
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      break;
 8002224:	e030      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d025      	beq.n	800227e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002236:	e022      	b.n	800227e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002240:	d11f      	bne.n	8002282 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002246:	e01c      	b.n	8002282 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d903      	bls.n	8002256 <DMA_CheckFifoParam+0xb6>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d003      	beq.n	800225c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002254:	e018      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      break;
 800225a:	e015      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
      break;
 800226c:	e00b      	b.n	8002286 <DMA_CheckFifoParam+0xe6>
      break;
 800226e:	bf00      	nop
 8002270:	e00a      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002272:	bf00      	nop
 8002274:	e008      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e006      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e004      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e002      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;   
 8002282:	bf00      	nop
 8002284:	e000      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
    }
  } 
  
  return status; 
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	@ 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e159      	b.n	8002568 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 8148 	bne.w	8002562 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d005      	beq.n	80022ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d130      	bne.n	800234c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 0201 	and.w	r2, r3, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b03      	cmp	r3, #3
 8002356:	d017      	beq.n	8002388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d123      	bne.n	80023dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	69b9      	ldr	r1, [r7, #24]
 80023d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0203 	and.w	r2, r3, #3
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80a2 	beq.w	8002562 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b57      	ldr	r3, [pc, #348]	@ (8002580 <HAL_GPIO_Init+0x2e8>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	4a56      	ldr	r2, [pc, #344]	@ (8002580 <HAL_GPIO_Init+0x2e8>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800242c:	6453      	str	r3, [r2, #68]	@ 0x44
 800242e:	4b54      	ldr	r3, [pc, #336]	@ (8002580 <HAL_GPIO_Init+0x2e8>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243a:	4a52      	ldr	r2, [pc, #328]	@ (8002584 <HAL_GPIO_Init+0x2ec>)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a49      	ldr	r2, [pc, #292]	@ (8002588 <HAL_GPIO_Init+0x2f0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0x202>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a48      	ldr	r2, [pc, #288]	@ (800258c <HAL_GPIO_Init+0x2f4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0x1fe>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a47      	ldr	r2, [pc, #284]	@ (8002590 <HAL_GPIO_Init+0x2f8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_GPIO_Init+0x1fa>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a46      	ldr	r2, [pc, #280]	@ (8002594 <HAL_GPIO_Init+0x2fc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x1f6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a45      	ldr	r2, [pc, #276]	@ (8002598 <HAL_GPIO_Init+0x300>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_GPIO_Init+0x1f2>
 8002486:	2304      	movs	r3, #4
 8002488:	e008      	b.n	800249c <HAL_GPIO_Init+0x204>
 800248a:	2307      	movs	r3, #7
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x204>
 800248e:	2303      	movs	r3, #3
 8002490:	e004      	b.n	800249c <HAL_GPIO_Init+0x204>
 8002492:	2302      	movs	r3, #2
 8002494:	e002      	b.n	800249c <HAL_GPIO_Init+0x204>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x204>
 800249a:	2300      	movs	r3, #0
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	f002 0203 	and.w	r2, r2, #3
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	4093      	lsls	r3, r2
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ac:	4935      	ldr	r1, [pc, #212]	@ (8002584 <HAL_GPIO_Init+0x2ec>)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ba:	4b38      	ldr	r3, [pc, #224]	@ (800259c <HAL_GPIO_Init+0x304>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024de:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <HAL_GPIO_Init+0x304>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e4:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_GPIO_Init+0x304>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002508:	4a24      	ldr	r2, [pc, #144]	@ (800259c <HAL_GPIO_Init+0x304>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800250e:	4b23      	ldr	r3, [pc, #140]	@ (800259c <HAL_GPIO_Init+0x304>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002532:	4a1a      	ldr	r2, [pc, #104]	@ (800259c <HAL_GPIO_Init+0x304>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002538:	4b18      	ldr	r3, [pc, #96]	@ (800259c <HAL_GPIO_Init+0x304>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800255c:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <HAL_GPIO_Init+0x304>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b0f      	cmp	r3, #15
 800256c:	f67f aea2 	bls.w	80022b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3724      	adds	r7, #36	@ 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40013800 	.word	0x40013800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400
 8002590:	40020800 	.word	0x40020800
 8002594:	40020c00 	.word	0x40020c00
 8002598:	40021000 	.word	0x40021000
 800259c:	40013c00 	.word	0x40013c00

080025a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
 80025ac:	4613      	mov	r3, r2
 80025ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b0:	787b      	ldrb	r3, [r7, #1]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025bc:	e003      	b.n	80025c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	041a      	lsls	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	619a      	str	r2, [r3, #24]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e4:	887a      	ldrh	r2, [r7, #2]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4013      	ands	r3, r2
 80025ea:	041a      	lsls	r2, r3, #16
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	400b      	ands	r3, r1
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	619a      	str	r2, [r3, #24]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af02      	add	r7, sp, #8
 800260c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e101      	b.n	800281c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f007 fb58 	bl	8009ce8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2203      	movs	r2, #3
 800263c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002646:	d102      	bne.n	800264e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 ff97 	bl	8006586 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7c1a      	ldrb	r2, [r3, #16]
 8002660:	f88d 2000 	strb.w	r2, [sp]
 8002664:	3304      	adds	r3, #4
 8002666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002668:	f003 fe76 	bl	8006358 <USB_CoreInit>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2202      	movs	r2, #2
 8002676:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0ce      	b.n	800281c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f003 ff8f 	bl	80065a8 <USB_SetCurrentMode>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0bf      	b.n	800281c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]
 80026a0:	e04a      	b.n	8002738 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	3315      	adds	r3, #21
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	3314      	adds	r3, #20
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	b298      	uxth	r0, r3
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	332e      	adds	r3, #46	@ 0x2e
 80026de:	4602      	mov	r2, r0
 80026e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	3318      	adds	r3, #24
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	331c      	adds	r3, #28
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3320      	adds	r3, #32
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3324      	adds	r3, #36	@ 0x24
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	3301      	adds	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	791b      	ldrb	r3, [r3, #4]
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	429a      	cmp	r2, r3
 8002740:	d3af      	bcc.n	80026a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
 8002746:	e044      	b.n	80027d2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	3301      	adds	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d3b5      	bcc.n	8002748 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	7c1a      	ldrb	r2, [r3, #16]
 80027e4:	f88d 2000 	strb.w	r2, [sp]
 80027e8:	3304      	adds	r3, #4
 80027ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ec:	f003 ff28 	bl	8006640 <USB_DevInit>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e00c      	b.n	800281c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f004 ff72 	bl	80076fe <USB_DevDisconnect>

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_PCD_Start+0x1c>
 800283c:	2302      	movs	r3, #2
 800283e:	e022      	b.n	8002886 <HAL_PCD_Start+0x62>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f003 fe79 	bl	8006564 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f004 ff20 	bl	80076bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800288e:	b590      	push	{r4, r7, lr}
 8002890:	b08d      	sub	sp, #52	@ 0x34
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 ffde 	bl	8007866 <USB_GetMode>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 848c 	bne.w	80031ca <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f004 ff42 	bl	8007740 <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8482 	beq.w	80031c8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f004 ff2f 	bl	8007740 <USB_ReadInterrupts>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d107      	bne.n	80028fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f002 0202 	and.w	r2, r2, #2
 80028fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f004 ff1d 	bl	8007740 <USB_ReadInterrupts>
 8002906:	4603      	mov	r3, r0
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b10      	cmp	r3, #16
 800290e:	d161      	bne.n	80029d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0210 	bic.w	r2, r2, #16
 800291e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	4413      	add	r3, r2
 800293c:	3304      	adds	r3, #4
 800293e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	0c5b      	lsrs	r3, r3, #17
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	2b02      	cmp	r3, #2
 800294a:	d124      	bne.n	8002996 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d035      	beq.n	80029c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6a38      	ldr	r0, [r7, #32]
 800296c:	f004 fd54 	bl	8007418 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800297c:	441a      	add	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800298e:	441a      	add	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	615a      	str	r2, [r3, #20]
 8002994:	e016      	b.n	80029c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	0c5b      	lsrs	r3, r3, #17
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d110      	bne.n	80029c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029a8:	2208      	movs	r2, #8
 80029aa:	4619      	mov	r1, r3
 80029ac:	6a38      	ldr	r0, [r7, #32]
 80029ae:	f004 fd33 	bl	8007418 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029be:	441a      	add	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0210 	orr.w	r2, r2, #16
 80029d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f004 feb1 	bl	8007740 <USB_ReadInterrupts>
 80029de:	4603      	mov	r3, r0
 80029e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029e8:	f040 80a7 	bne.w	8002b3a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f004 feb6 	bl	8007766 <USB_ReadDevAllOutEpInterrupt>
 80029fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80029fc:	e099      	b.n	8002b32 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 808e 	beq.w	8002b26 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f004 feda 	bl	80077ce <USB_ReadDevOutEPInterrupt>
 8002a1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a32:	461a      	mov	r2, r3
 8002a34:	2301      	movs	r3, #1
 8002a36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fea4 	bl	8003788 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a56:	461a      	mov	r2, r3
 8002a58:	2308      	movs	r3, #8
 8002a5a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 ff7a 	bl	8003958 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d030      	beq.n	8002aec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	2b80      	cmp	r3, #128	@ 0x80
 8002a94:	d109      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aa4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aa8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	3304      	adds	r3, #4
 8002abe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	78db      	ldrb	r3, [r3, #3]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d108      	bne.n	8002ada <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2200      	movs	r2, #0
 8002acc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f007 fa03 	bl	8009ee0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2302      	movs	r3, #2
 8002aea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b02:	461a      	mov	r2, r3
 8002b04:	2320      	movs	r3, #32
 8002b06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	3301      	adds	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f47f af62 	bne.w	80029fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f004 fdfe 	bl	8007740 <USB_ReadInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b4e:	f040 80db 	bne.w	8002d08 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 fe1f 	bl	800779a <USB_ReadDevAllInEpInterrupt>
 8002b5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b62:	e0cd      	b.n	8002d00 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80c2 	beq.w	8002cf4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f004 fe45 	bl	800780a <USB_ReadDevInEPInterrupt>
 8002b80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d057      	beq.n	8002c3c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	2201      	movs	r2, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69f9      	ldr	r1, [r7, #28]
 8002ba8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002bac:	4013      	ands	r3, r2
 8002bae:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	799b      	ldrb	r3, [r3, #6]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d132      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3320      	adds	r3, #32
 8002bda:	6819      	ldr	r1, [r3, #0]
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4403      	add	r3, r0
 8002bea:	331c      	adds	r3, #28
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4419      	add	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4403      	add	r3, r0
 8002bfe:	3320      	adds	r3, #32
 8002c00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d113      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x3a2>
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3324      	adds	r3, #36	@ 0x24
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	f004 fe4c 	bl	80078c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f007 f8d7 	bl	8009dea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c52:	461a      	mov	r2, r3
 8002c54:	2308      	movs	r3, #8
 8002c56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2310      	movs	r3, #16
 8002c72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2340      	movs	r3, #64	@ 0x40
 8002c8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d023      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c9c:	6a38      	ldr	r0, [r7, #32]
 8002c9e:	f003 fe33 	bl	8006908 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	3310      	adds	r3, #16
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	78db      	ldrb	r3, [r3, #3]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d108      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f007 f91a 	bl	8009f04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2302      	movs	r3, #2
 8002ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fcbd 	bl	800366e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f47f af2e 	bne.w	8002b64 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 fd17 	bl	8007740 <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d1c:	d122      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d108      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d44:	2100      	movs	r1, #0
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fea4 	bl	8003a94 <HAL_PCDEx_LPM_Callback>
 8002d4c:	e002      	b.n	8002d54 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f007 f8b8 	bl	8009ec4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f004 fce9 	bl	8007740 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d78:	d112      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d102      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f007 f874 	bl	8009e78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d9e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 fccb 	bl	8007740 <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db4:	f040 80b7 	bne.w	8002f26 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2110      	movs	r1, #16
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 fd98 	bl	8006908 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ddc:	e046      	b.n	8002e6c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dea:	461a      	mov	r2, r3
 8002dec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002df0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e02:	0151      	lsls	r1, r2, #5
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	440a      	add	r2, r1
 8002e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e24:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e36:	0151      	lsls	r1, r2, #5
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	440a      	add	r2, r1
 8002e3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e56:	0151      	lsls	r1, r2, #5
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	440a      	add	r2, r1
 8002e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e64:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e68:	3301      	adds	r3, #1
 8002e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	791b      	ldrb	r3, [r3, #4]
 8002e70:	461a      	mov	r2, r3
 8002e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d3b2      	bcc.n	8002dde <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e86:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e8a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7bdb      	ldrb	r3, [r3, #15]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ea4:	f043 030b 	orr.w	r3, r3, #11
 8002ea8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eba:	f043 030b 	orr.w	r3, r3, #11
 8002ebe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec0:	e015      	b.n	8002eee <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ed0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ed4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002ed8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ee8:	f043 030b 	orr.w	r3, r3, #11
 8002eec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002efc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f00:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f10:	461a      	mov	r2, r3
 8002f12:	f004 fcd9 	bl	80078c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f004 fc08 	bl	8007740 <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f3a:	d123      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f004 fc9e 	bl	8007882 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fd55 	bl	80069fa <USB_GetDevSpeed>
 8002f50:	4603      	mov	r3, r0
 8002f52:	461a      	mov	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681c      	ldr	r4, [r3, #0]
 8002f5c:	f001 f9ca 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8002f60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f66:	461a      	mov	r2, r3
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f003 fa59 	bl	8006420 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f006 ff63 	bl	8009e3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f004 fbd9 	bl	8007740 <USB_ReadInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d10a      	bne.n	8002fae <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f006 ff40 	bl	8009e1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f002 0208 	and.w	r2, r2, #8
 8002fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 fbc4 	bl	8007740 <USB_ReadInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbe:	2b80      	cmp	r3, #128	@ 0x80
 8002fc0:	d123      	bne.n	800300a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fce:	2301      	movs	r3, #1
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd2:	e014      	b.n	8002ffe <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fb0a 	bl	800360c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	791b      	ldrb	r3, [r3, #4]
 8003002:	461a      	mov	r2, r3
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	4293      	cmp	r3, r2
 8003008:	d3e4      	bcc.n	8002fd4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f004 fb96 	bl	8007740 <USB_ReadInterrupts>
 8003014:	4603      	mov	r3, r0
 8003016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800301a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800301e:	d13c      	bne.n	800309a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003020:	2301      	movs	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
 8003024:	e02b      	b.n	800307e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	3318      	adds	r3, #24
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d115      	bne.n	8003078 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800304c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800304e:	2b00      	cmp	r3, #0
 8003050:	da12      	bge.n	8003078 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3317      	adds	r3, #23
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800306e:	b2db      	uxtb	r3, r3
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 faca 	bl	800360c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	3301      	adds	r3, #1
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	791b      	ldrb	r3, [r3, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	4293      	cmp	r3, r2
 8003088:	d3cd      	bcc.n	8003026 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f004 fb4e 	bl	8007740 <USB_ReadInterrupts>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030ae:	d156      	bne.n	800315e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030b0:	2301      	movs	r3, #1
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b4:	e045      	b.n	8003142 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d12e      	bne.n	800313c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	da2b      	bge.n	800313c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80030f0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d121      	bne.n	800313c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003134:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003138:	6053      	str	r3, [r2, #4]
            break;
 800313a:	e008      	b.n	800314e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	3301      	adds	r3, #1
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	791b      	ldrb	r3, [r3, #4]
 8003146:	461a      	mov	r2, r3
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	4293      	cmp	r3, r2
 800314c:	d3b3      	bcc.n	80030b6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800315c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f004 faec 	bl	8007740 <USB_ReadInterrupts>
 8003168:	4603      	mov	r3, r0
 800316a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003172:	d10a      	bne.n	800318a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f006 fed7 	bl	8009f28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f004 fad6 	bl	8007740 <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d115      	bne.n	80031ca <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f006 fec7 	bl	8009f44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	e000      	b.n	80031ca <HAL_PCD_IRQHandler+0x93c>
      return;
 80031c8:	bf00      	nop
    }
  }
}
 80031ca:	3734      	adds	r7, #52	@ 0x34
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd90      	pop	{r4, r7, pc}

080031d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_PCD_SetAddress+0x1a>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e012      	b.n	8003210 <HAL_PCD_SetAddress+0x40>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f004 fa35 	bl	8007670 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	4608      	mov	r0, r1
 8003222:	4611      	mov	r1, r2
 8003224:	461a      	mov	r2, r3
 8003226:	4603      	mov	r3, r0
 8003228:	70fb      	strb	r3, [r7, #3]
 800322a:	460b      	mov	r3, r1
 800322c:	803b      	strh	r3, [r7, #0]
 800322e:	4613      	mov	r3, r2
 8003230:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323a:	2b00      	cmp	r3, #0
 800323c:	da0f      	bge.n	800325e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	3310      	adds	r3, #16
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	3304      	adds	r3, #4
 8003254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	705a      	strb	r2, [r3, #1]
 800325c:	e00f      	b.n	800327e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 020f 	and.w	r2, r3, #15
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	3304      	adds	r3, #4
 8003276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800328a:	883b      	ldrh	r3, [r7, #0]
 800328c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	78ba      	ldrb	r2, [r7, #2]
 8003298:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032ac:	78bb      	ldrb	r3, [r7, #2]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d102      	bne.n	80032b8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_PCD_EP_Open+0xae>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e00e      	b.n	80032e4 <HAL_PCD_EP_Open+0xcc>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 fbb5 	bl	8006a44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80032e2:	7afb      	ldrb	r3, [r7, #11]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da0f      	bge.n	8003320 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	3310      	adds	r3, #16
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	3304      	adds	r3, #4
 8003316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	705a      	strb	r2, [r3, #1]
 800331e:	e00f      	b.n	8003340 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4413      	add	r3, r2
 8003336:	3304      	adds	r3, #4
 8003338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_PCD_EP_Close+0x6e>
 8003356:	2302      	movs	r3, #2
 8003358:	e00e      	b.n	8003378 <HAL_PCD_EP_Close+0x8c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	4618      	mov	r0, r3
 800336a:	f003 fbf3 	bl	8006b54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	460b      	mov	r3, r1
 800338e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003390:	7afb      	ldrb	r3, [r7, #11]
 8003392:	f003 020f 	and.w	r2, r3, #15
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	3304      	adds	r3, #4
 80033a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2200      	movs	r2, #0
 80033c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	799b      	ldrb	r3, [r3, #6]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d102      	bne.n	80033dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	799b      	ldrb	r3, [r3, #6]
 80033e4:	461a      	mov	r2, r3
 80033e6:	6979      	ldr	r1, [r7, #20]
 80033e8:	f003 fc90 	bl	8006d0c <USB_EPStartXfer>

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	f003 020f 	and.w	r2, r3, #15
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003418:	681b      	ldr	r3, [r3, #0]
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	460b      	mov	r3, r1
 8003434:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003436:	7afb      	ldrb	r3, [r7, #11]
 8003438:	f003 020f 	and.w	r2, r3, #15
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	3310      	adds	r3, #16
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2201      	movs	r2, #1
 8003464:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003466:	7afb      	ldrb	r3, [r7, #11]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	b2da      	uxtb	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	799b      	ldrb	r3, [r3, #6]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	799b      	ldrb	r3, [r3, #6]
 8003488:	461a      	mov	r2, r3
 800348a:	6979      	ldr	r1, [r7, #20]
 800348c:	f003 fc3e 	bl	8006d0c <USB_EPStartXfer>

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	460b      	mov	r3, r1
 80034a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	7912      	ldrb	r2, [r2, #4]
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e04f      	b.n	8003558 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	da0f      	bge.n	80034e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	3310      	adds	r3, #16
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	705a      	strb	r2, [r3, #1]
 80034de:	e00d      	b.n	80034fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	3304      	adds	r3, #4
 80034f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_PCD_EP_SetStall+0x82>
 8003518:	2302      	movs	r3, #2
 800351a:	e01d      	b.n	8003558 <HAL_PCD_EP_SetStall+0xbe>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68f9      	ldr	r1, [r7, #12]
 800352a:	4618      	mov	r0, r3
 800352c:	f003 ffcc 	bl	80074c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7999      	ldrb	r1, [r3, #6]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003548:	461a      	mov	r2, r3
 800354a:	f004 f9bd 	bl	80078c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	7912      	ldrb	r2, [r2, #4]
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e042      	b.n	8003604 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800357e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003582:	2b00      	cmp	r3, #0
 8003584:	da0f      	bge.n	80035a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	f003 020f 	and.w	r2, r3, #15
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	3310      	adds	r3, #16
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	3304      	adds	r3, #4
 800359c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	705a      	strb	r2, [r3, #1]
 80035a4:	e00f      	b.n	80035c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	f003 020f 	and.w	r2, r3, #15
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	3304      	adds	r3, #4
 80035be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_PCD_EP_ClrStall+0x86>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e00e      	b.n	8003604 <HAL_PCD_EP_ClrStall+0xa4>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68f9      	ldr	r1, [r7, #12]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 ffd5 	bl	80075a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800361c:	2b00      	cmp	r3, #0
 800361e:	da0c      	bge.n	800363a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	f003 020f 	and.w	r2, r3, #15
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	3310      	adds	r3, #16
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4413      	add	r3, r2
 8003634:	3304      	adds	r3, #4
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e00c      	b.n	8003654 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	f003 020f 	and.w	r2, r3, #15
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	4413      	add	r3, r2
 8003650:	3304      	adds	r3, #4
 8003652:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68f9      	ldr	r1, [r7, #12]
 800365a:	4618      	mov	r0, r3
 800365c:	f003 fdf4 	bl	8007248 <USB_EPStopXfer>
 8003660:	4603      	mov	r3, r0
 8003662:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003664:	7afb      	ldrb	r3, [r7, #11]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b08a      	sub	sp, #40	@ 0x28
 8003672:	af02      	add	r7, sp, #8
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	3310      	adds	r3, #16
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	3304      	adds	r3, #4
 8003694:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d901      	bls.n	80036a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e06b      	b.n	800377e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d902      	bls.n	80036c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3303      	adds	r3, #3
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ca:	e02a      	b.n	8003722 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d902      	bls.n	80036e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	3303      	adds	r3, #3
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68d9      	ldr	r1, [r3, #12]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	4603      	mov	r3, r0
 8003704:	6978      	ldr	r0, [r7, #20]
 8003706:	f003 fe49 	bl	800739c <USB_WritePacket>

    ep->xfer_buff  += len;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	441a      	add	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	441a      	add	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	429a      	cmp	r2, r3
 8003736:	d809      	bhi.n	800374c <PCD_WriteEmptyTxFifo+0xde>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003740:	429a      	cmp	r2, r3
 8003742:	d203      	bcs.n	800374c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1bf      	bne.n	80036cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	429a      	cmp	r2, r3
 8003756:	d811      	bhi.n	800377c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	2201      	movs	r2, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800376c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	43db      	mvns	r3, r3
 8003772:	6939      	ldr	r1, [r7, #16]
 8003774:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003778:	4013      	ands	r3, r2
 800377a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	333c      	adds	r3, #60	@ 0x3c
 80037a0:	3304      	adds	r3, #4
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	799b      	ldrb	r3, [r3, #6]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d17b      	bne.n	80038b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d015      	beq.n	80037f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	4a61      	ldr	r2, [pc, #388]	@ (8003950 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	f240 80b9 	bls.w	8003944 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80b3 	beq.w	8003944 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ea:	461a      	mov	r2, r3
 80037ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037f0:	6093      	str	r3, [r2, #8]
 80037f2:	e0a7      	b.n	8003944 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380a:	461a      	mov	r2, r3
 800380c:	2320      	movs	r3, #32
 800380e:	6093      	str	r3, [r2, #8]
 8003810:	e098      	b.n	8003944 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003818:	2b00      	cmp	r3, #0
 800381a:	f040 8093 	bne.w	8003944 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	4a4b      	ldr	r2, [pc, #300]	@ (8003950 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d90f      	bls.n	8003846 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383c:	461a      	mov	r2, r3
 800383e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003842:	6093      	str	r3, [r2, #8]
 8003844:	e07e      	b.n	8003944 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	3304      	adds	r3, #4
 800385a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a1a      	ldr	r2, [r3, #32]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	0159      	lsls	r1, r3, #5
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	440b      	add	r3, r1
 8003868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003872:	1ad2      	subs	r2, r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d114      	bne.n	80038a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003890:	461a      	mov	r2, r3
 8003892:	2101      	movs	r1, #1
 8003894:	f004 f818 	bl	80078c8 <USB_EP0_OutStart>
 8003898:	e006      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	441a      	add	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f006 fa80 	bl	8009db4 <HAL_PCD_DataOutStageCallback>
 80038b4:	e046      	b.n	8003944 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	4a26      	ldr	r2, [pc, #152]	@ (8003954 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d124      	bne.n	8003908 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d4:	461a      	mov	r2, r3
 80038d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038da:	6093      	str	r3, [r2, #8]
 80038dc:	e032      	b.n	8003944 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f4:	461a      	mov	r2, r3
 80038f6:	2320      	movs	r3, #32
 80038f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	4619      	mov	r1, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f006 fa57 	bl	8009db4 <HAL_PCD_DataOutStageCallback>
 8003906:	e01d      	b.n	8003944 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d114      	bne.n	8003938 <PCD_EP_OutXfrComplete_int+0x1b0>
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d108      	bne.n	8003938 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003930:	461a      	mov	r2, r3
 8003932:	2100      	movs	r1, #0
 8003934:	f003 ffc8 	bl	80078c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f006 fa38 	bl	8009db4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	4f54300a 	.word	0x4f54300a
 8003954:	4f54310a 	.word	0x4f54310a

08003958 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	333c      	adds	r3, #60	@ 0x3c
 8003970:	3304      	adds	r3, #4
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4a15      	ldr	r2, [pc, #84]	@ (80039e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d90e      	bls.n	80039ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003994:	2b00      	cmp	r3, #0
 8003996:	d009      	beq.n	80039ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a4:	461a      	mov	r2, r3
 80039a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f006 f9ef 	bl	8009d90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4a0a      	ldr	r2, [pc, #40]	@ (80039e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d90c      	bls.n	80039d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	799b      	ldrb	r3, [r3, #6]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d108      	bne.n	80039d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039cc:	461a      	mov	r2, r3
 80039ce:	2101      	movs	r1, #1
 80039d0:	f003 ff7a 	bl	80078c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	4f54300a 	.word	0x4f54300a

080039e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70fb      	strb	r3, [r7, #3]
 80039f0:	4613      	mov	r3, r2
 80039f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a02:	883b      	ldrh	r3, [r7, #0]
 8003a04:	0419      	lsls	r1, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a10:	e028      	b.n	8003a64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	e00d      	b.n	8003a42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	3340      	adds	r3, #64	@ 0x40
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	4413      	add	r3, r2
 8003a3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	7bfa      	ldrb	r2, [r7, #15]
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d3ec      	bcc.n	8003a26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a4c:	883b      	ldrh	r3, [r7, #0]
 8003a4e:	0418      	lsls	r0, r3, #16
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6819      	ldr	r1, [r3, #0]
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	4302      	orrs	r2, r0
 8003a5c:	3340      	adds	r3, #64	@ 0x40
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e267      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d075      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003aca:	4b88      	ldr	r3, [pc, #544]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d00c      	beq.n	8003af0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ad6:	4b85      	ldr	r3, [pc, #532]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d112      	bne.n	8003b08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae2:	4b82      	ldr	r3, [pc, #520]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aee:	d10b      	bne.n	8003b08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af0:	4b7e      	ldr	r3, [pc, #504]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d05b      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x108>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d157      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e242      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b10:	d106      	bne.n	8003b20 <HAL_RCC_OscConfig+0x74>
 8003b12:	4b76      	ldr	r3, [pc, #472]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a75      	ldr	r2, [pc, #468]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e01d      	b.n	8003b5c <HAL_RCC_OscConfig+0xb0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x98>
 8003b2a:	4b70      	ldr	r3, [pc, #448]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a6f      	ldr	r2, [pc, #444]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	4b6d      	ldr	r3, [pc, #436]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a6c      	ldr	r2, [pc, #432]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e00b      	b.n	8003b5c <HAL_RCC_OscConfig+0xb0>
 8003b44:	4b69      	ldr	r3, [pc, #420]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a68      	ldr	r2, [pc, #416]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b66      	ldr	r3, [pc, #408]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a65      	ldr	r2, [pc, #404]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d013      	beq.n	8003b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd fe54 	bl	8001810 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fd fe50 	bl	8001810 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	@ 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e207      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0xc0>
 8003b8a:	e014      	b.n	8003bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fe40 	bl	8001810 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b94:	f7fd fe3c 	bl	8001810 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e1f3      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba6:	4b51      	ldr	r3, [pc, #324]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0xe8>
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d063      	beq.n	8003c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00b      	beq.n	8003be6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bce:	4b47      	ldr	r3, [pc, #284]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d11c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bda:	4b44      	ldr	r3, [pc, #272]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d116      	bne.n	8003c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be6:	4b41      	ldr	r3, [pc, #260]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_RCC_OscConfig+0x152>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e1c7      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4937      	ldr	r1, [pc, #220]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c12:	e03a      	b.n	8003c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c1c:	4b34      	ldr	r3, [pc, #208]	@ (8003cf0 <HAL_RCC_OscConfig+0x244>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c22:	f7fd fdf5 	bl	8001810 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2a:	f7fd fdf1 	bl	8001810 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e1a8      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c48:	4b28      	ldr	r3, [pc, #160]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4925      	ldr	r1, [pc, #148]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]
 8003c5c:	e015      	b.n	8003c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c5e:	4b24      	ldr	r3, [pc, #144]	@ (8003cf0 <HAL_RCC_OscConfig+0x244>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fd fdd4 	bl	8001810 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7fd fdd0 	bl	8001810 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e187      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d036      	beq.n	8003d04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d016      	beq.n	8003ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c9e:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <HAL_RCC_OscConfig+0x248>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fdb4 	bl	8001810 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cac:	f7fd fdb0 	bl	8001810 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e167      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_RCC_OscConfig+0x240>)
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x200>
 8003cca:	e01b      	b.n	8003d04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ccc:	4b09      	ldr	r3, [pc, #36]	@ (8003cf4 <HAL_RCC_OscConfig+0x248>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd2:	f7fd fd9d 	bl	8001810 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd8:	e00e      	b.n	8003cf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cda:	f7fd fd99 	bl	8001810 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d907      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e150      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	42470000 	.word	0x42470000
 8003cf4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf8:	4b88      	ldr	r3, [pc, #544]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1ea      	bne.n	8003cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8097 	beq.w	8003e40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d12:	2300      	movs	r3, #0
 8003d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d16:	4b81      	ldr	r3, [pc, #516]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10f      	bne.n	8003d42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	4b7d      	ldr	r3, [pc, #500]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d32:	4b7a      	ldr	r3, [pc, #488]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d42:	4b77      	ldr	r3, [pc, #476]	@ (8003f20 <HAL_RCC_OscConfig+0x474>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d118      	bne.n	8003d80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d4e:	4b74      	ldr	r3, [pc, #464]	@ (8003f20 <HAL_RCC_OscConfig+0x474>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a73      	ldr	r2, [pc, #460]	@ (8003f20 <HAL_RCC_OscConfig+0x474>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d5a:	f7fd fd59 	bl	8001810 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d62:	f7fd fd55 	bl	8001810 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e10c      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d74:	4b6a      	ldr	r3, [pc, #424]	@ (8003f20 <HAL_RCC_OscConfig+0x474>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d106      	bne.n	8003d96 <HAL_RCC_OscConfig+0x2ea>
 8003d88:	4b64      	ldr	r3, [pc, #400]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8c:	4a63      	ldr	r2, [pc, #396]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d94:	e01c      	b.n	8003dd0 <HAL_RCC_OscConfig+0x324>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b05      	cmp	r3, #5
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x30c>
 8003d9e:	4b5f      	ldr	r3, [pc, #380]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	4a5e      	ldr	r2, [pc, #376]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003da4:	f043 0304 	orr.w	r3, r3, #4
 8003da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003daa:	4b5c      	ldr	r3, [pc, #368]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	4a5b      	ldr	r2, [pc, #364]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCC_OscConfig+0x324>
 8003db8:	4b58      	ldr	r3, [pc, #352]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbc:	4a57      	ldr	r2, [pc, #348]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc4:	4b55      	ldr	r3, [pc, #340]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc8:	4a54      	ldr	r2, [pc, #336]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003dca:	f023 0304 	bic.w	r3, r3, #4
 8003dce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d015      	beq.n	8003e04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd8:	f7fd fd1a 	bl	8001810 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de0:	f7fd fd16 	bl	8001810 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e0cb      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df6:	4b49      	ldr	r3, [pc, #292]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0ee      	beq.n	8003de0 <HAL_RCC_OscConfig+0x334>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e04:	f7fd fd04 	bl	8001810 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0c:	f7fd fd00 	bl	8001810 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e0b5      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e22:	4b3e      	ldr	r3, [pc, #248]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1ee      	bne.n	8003e0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d105      	bne.n	8003e40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e34:	4b39      	ldr	r3, [pc, #228]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	4a38      	ldr	r2, [pc, #224]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80a1 	beq.w	8003f8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e4a:	4b34      	ldr	r3, [pc, #208]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d05c      	beq.n	8003f10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d141      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5e:	4b31      	ldr	r3, [pc, #196]	@ (8003f24 <HAL_RCC_OscConfig+0x478>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e64:	f7fd fcd4 	bl	8001810 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6c:	f7fd fcd0 	bl	8001810 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e087      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7e:	4b27      	ldr	r3, [pc, #156]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	019b      	lsls	r3, r3, #6
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eac:	061b      	lsls	r3, r3, #24
 8003eae:	491b      	ldr	r1, [pc, #108]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f24 <HAL_RCC_OscConfig+0x478>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eba:	f7fd fca9 	bl	8001810 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fd fca5 	bl	8001810 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e05c      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed4:	4b11      	ldr	r3, [pc, #68]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x416>
 8003ee0:	e054      	b.n	8003f8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee2:	4b10      	ldr	r3, [pc, #64]	@ (8003f24 <HAL_RCC_OscConfig+0x478>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fd fc92 	bl	8001810 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fd fc8e 	bl	8001810 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e045      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f02:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <HAL_RCC_OscConfig+0x470>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x444>
 8003f0e:	e03d      	b.n	8003f8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e038      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40007000 	.word	0x40007000
 8003f24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f28:	4b1b      	ldr	r3, [pc, #108]	@ (8003f98 <HAL_RCC_OscConfig+0x4ec>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d028      	beq.n	8003f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d121      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d11a      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f58:	4013      	ands	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d111      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	3b01      	subs	r3, #1
 8003f72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d107      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800

08003f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0cc      	b.n	800414a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b68      	ldr	r3, [pc, #416]	@ (8004154 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d90c      	bls.n	8003fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b65      	ldr	r3, [pc, #404]	@ (8004154 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b63      	ldr	r3, [pc, #396]	@ (8004154 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0b8      	b.n	800414a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d020      	beq.n	8004026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff0:	4b59      	ldr	r3, [pc, #356]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4a58      	ldr	r2, [pc, #352]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ffa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004008:	4b53      	ldr	r3, [pc, #332]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a52      	ldr	r2, [pc, #328]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004014:	4b50      	ldr	r3, [pc, #320]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	494d      	ldr	r1, [pc, #308]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d044      	beq.n	80040bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	4b47      	ldr	r3, [pc, #284]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d119      	bne.n	800407a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e07f      	b.n	800414a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d003      	beq.n	800405a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004056:	2b03      	cmp	r3, #3
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405a:	4b3f      	ldr	r3, [pc, #252]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e06f      	b.n	800414a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406a:	4b3b      	ldr	r3, [pc, #236]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e067      	b.n	800414a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800407a:	4b37      	ldr	r3, [pc, #220]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f023 0203 	bic.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4934      	ldr	r1, [pc, #208]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	4313      	orrs	r3, r2
 800408a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800408c:	f7fd fbc0 	bl	8001810 <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	e00a      	b.n	80040aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004094:	f7fd fbbc 	bl	8001810 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e04f      	b.n	800414a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 020c 	and.w	r2, r3, #12
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d1eb      	bne.n	8004094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040bc:	4b25      	ldr	r3, [pc, #148]	@ (8004154 <HAL_RCC_ClockConfig+0x1b8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d20c      	bcs.n	80040e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b22      	ldr	r3, [pc, #136]	@ (8004154 <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b20      	ldr	r3, [pc, #128]	@ (8004154 <HAL_RCC_ClockConfig+0x1b8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e032      	b.n	800414a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f0:	4b19      	ldr	r3, [pc, #100]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4916      	ldr	r1, [pc, #88]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800410e:	4b12      	ldr	r3, [pc, #72]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	490e      	ldr	r1, [pc, #56]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	4313      	orrs	r3, r2
 8004120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004122:	f000 f821 	bl	8004168 <HAL_RCC_GetSysClockFreq>
 8004126:	4602      	mov	r2, r0
 8004128:	4b0b      	ldr	r3, [pc, #44]	@ (8004158 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	091b      	lsrs	r3, r3, #4
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	490a      	ldr	r1, [pc, #40]	@ (800415c <HAL_RCC_ClockConfig+0x1c0>)
 8004134:	5ccb      	ldrb	r3, [r1, r3]
 8004136:	fa22 f303 	lsr.w	r3, r2, r3
 800413a:	4a09      	ldr	r2, [pc, #36]	@ (8004160 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800413e:	4b09      	ldr	r3, [pc, #36]	@ (8004164 <HAL_RCC_ClockConfig+0x1c8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fb20 	bl	8001788 <HAL_InitTick>

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40023c00 	.word	0x40023c00
 8004158:	40023800 	.word	0x40023800
 800415c:	0800a3d0 	.word	0x0800a3d0
 8004160:	20000000 	.word	0x20000000
 8004164:	20000004 	.word	0x20000004

08004168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800416c:	b090      	sub	sp, #64	@ 0x40
 800416e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004180:	4b59      	ldr	r3, [pc, #356]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	2b08      	cmp	r3, #8
 800418a:	d00d      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x40>
 800418c:	2b08      	cmp	r3, #8
 800418e:	f200 80a1 	bhi.w	80042d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x34>
 8004196:	2b04      	cmp	r3, #4
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800419a:	e09b      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800419c:	4b53      	ldr	r3, [pc, #332]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x184>)
 800419e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041a0:	e09b      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041a2:	4b53      	ldr	r3, [pc, #332]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041a6:	e098      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a8:	4b4f      	ldr	r3, [pc, #316]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041b2:	4b4d      	ldr	r3, [pc, #308]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d028      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041be:	4b4a      	ldr	r3, [pc, #296]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	2200      	movs	r2, #0
 80041c6:	623b      	str	r3, [r7, #32]
 80041c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041d0:	2100      	movs	r1, #0
 80041d2:	4b47      	ldr	r3, [pc, #284]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041d4:	fb03 f201 	mul.w	r2, r3, r1
 80041d8:	2300      	movs	r3, #0
 80041da:	fb00 f303 	mul.w	r3, r0, r3
 80041de:	4413      	add	r3, r2
 80041e0:	4a43      	ldr	r2, [pc, #268]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041e2:	fba0 1202 	umull	r1, r2, r0, r2
 80041e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041e8:	460a      	mov	r2, r1
 80041ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ee:	4413      	add	r3, r2
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f4:	2200      	movs	r2, #0
 80041f6:	61bb      	str	r3, [r7, #24]
 80041f8:	61fa      	str	r2, [r7, #28]
 80041fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004202:	f7fb ffe9 	bl	80001d8 <__aeabi_uldivmod>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4613      	mov	r3, r2
 800420c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800420e:	e053      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004210:	4b35      	ldr	r3, [pc, #212]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	2200      	movs	r2, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	617a      	str	r2, [r7, #20]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004222:	f04f 0b00 	mov.w	fp, #0
 8004226:	4652      	mov	r2, sl
 8004228:	465b      	mov	r3, fp
 800422a:	f04f 0000 	mov.w	r0, #0
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	0159      	lsls	r1, r3, #5
 8004234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004238:	0150      	lsls	r0, r2, #5
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	ebb2 080a 	subs.w	r8, r2, sl
 8004242:	eb63 090b 	sbc.w	r9, r3, fp
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004252:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004256:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800425a:	ebb2 0408 	subs.w	r4, r2, r8
 800425e:	eb63 0509 	sbc.w	r5, r3, r9
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	00eb      	lsls	r3, r5, #3
 800426c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004270:	00e2      	lsls	r2, r4, #3
 8004272:	4614      	mov	r4, r2
 8004274:	461d      	mov	r5, r3
 8004276:	eb14 030a 	adds.w	r3, r4, sl
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	eb45 030b 	adc.w	r3, r5, fp
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800428e:	4629      	mov	r1, r5
 8004290:	028b      	lsls	r3, r1, #10
 8004292:	4621      	mov	r1, r4
 8004294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004298:	4621      	mov	r1, r4
 800429a:	028a      	lsls	r2, r1, #10
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a2:	2200      	movs	r2, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	60fa      	str	r2, [r7, #12]
 80042a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042ac:	f7fb ff94 	bl	80001d8 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4613      	mov	r3, r2
 80042b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042b8:	4b0b      	ldr	r3, [pc, #44]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80042c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042d2:	e002      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d4:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x184>)
 80042d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3740      	adds	r7, #64	@ 0x40
 80042e0:	46bd      	mov	sp, r7
 80042e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	00f42400 	.word	0x00f42400
 80042f0:	017d7840 	.word	0x017d7840

080042f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f8:	4b03      	ldr	r3, [pc, #12]	@ (8004308 <HAL_RCC_GetHCLKFreq+0x14>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000000 	.word	0x20000000

0800430c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004310:	f7ff fff0 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b05      	ldr	r3, [pc, #20]	@ (800432c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0a9b      	lsrs	r3, r3, #10
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4903      	ldr	r1, [pc, #12]	@ (8004330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	0800a3e0 	.word	0x0800a3e0

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004338:	f7ff ffdc 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	@ (8004354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0b5b      	lsrs	r3, r3, #13
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4903      	ldr	r1, [pc, #12]	@ (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	0800a3e0 	.word	0x0800a3e0

0800435c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e07b      	b.n	8004466 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d108      	bne.n	8004388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800437e:	d009      	beq.n	8004394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	61da      	str	r2, [r3, #28]
 8004386:	e005      	b.n	8004394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fd f822 	bl	80013f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004418:	ea42 0103 	orr.w	r1, r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	f003 0104 	and.w	r1, r3, #4
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	f003 0210 	and.w	r2, r3, #16
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004454:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b088      	sub	sp, #32
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	4613      	mov	r3, r2
 800447c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800447e:	f7fd f9c7 	bl	8001810 <HAL_GetTick>
 8004482:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d001      	beq.n	8004498 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
 8004496:	e12a      	b.n	80046ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Transmit+0x36>
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e122      	b.n	80046ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_SPI_Transmit+0x48>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e11b      	b.n	80046ee <HAL_SPI_Transmit+0x280>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2203      	movs	r2, #3
 80044c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	88fa      	ldrh	r2, [r7, #6]
 80044d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004504:	d10f      	bne.n	8004526 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004514:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004524:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004530:	2b40      	cmp	r3, #64	@ 0x40
 8004532:	d007      	beq.n	8004544 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004542:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800454c:	d152      	bne.n	80045f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_SPI_Transmit+0xee>
 8004556:	8b7b      	ldrh	r3, [r7, #26]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d145      	bne.n	80045e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004560:	881a      	ldrh	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456c:	1c9a      	adds	r2, r3, #2
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004580:	e032      	b.n	80045e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	d112      	bne.n	80045b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004594:	881a      	ldrh	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	1c9a      	adds	r2, r3, #2
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045b4:	e018      	b.n	80045e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045b6:	f7fd f92b 	bl	8001810 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d803      	bhi.n	80045ce <HAL_SPI_Transmit+0x160>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d102      	bne.n	80045d4 <HAL_SPI_Transmit+0x166>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d109      	bne.n	80045e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e082      	b.n	80046ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1c7      	bne.n	8004582 <HAL_SPI_Transmit+0x114>
 80045f2:	e053      	b.n	800469c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_SPI_Transmit+0x194>
 80045fc:	8b7b      	ldrh	r3, [r7, #26]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d147      	bne.n	8004692 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	330c      	adds	r3, #12
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004628:	e033      	b.n	8004692 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b02      	cmp	r3, #2
 8004636:	d113      	bne.n	8004660 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	330c      	adds	r3, #12
 8004642:	7812      	ldrb	r2, [r2, #0]
 8004644:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800465e:	e018      	b.n	8004692 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004660:	f7fd f8d6 	bl	8001810 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d803      	bhi.n	8004678 <HAL_SPI_Transmit+0x20a>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d102      	bne.n	800467e <HAL_SPI_Transmit+0x210>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e02d      	b.n	80046ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1c6      	bne.n	800462a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	6839      	ldr	r1, [r7, #0]
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fbe7 	bl	8004e74 <SPI_EndRxTxTransaction>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
  }
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b088      	sub	sp, #32
 80046fa:	af02      	add	r7, sp, #8
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	d001      	beq.n	8004716 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
 8004714:	e104      	b.n	8004920 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800471e:	d112      	bne.n	8004746 <HAL_SPI_Receive+0x50>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10e      	bne.n	8004746 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2204      	movs	r2, #4
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004730:	88fa      	ldrh	r2, [r7, #6]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	4613      	mov	r3, r2
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f8f3 	bl	8004928 <HAL_SPI_TransmitReceive>
 8004742:	4603      	mov	r3, r0
 8004744:	e0ec      	b.n	8004920 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004746:	f7fd f863 	bl	8001810 <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_SPI_Receive+0x62>
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0e1      	b.n	8004920 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_SPI_Receive+0x74>
 8004766:	2302      	movs	r3, #2
 8004768:	e0da      	b.n	8004920 <HAL_SPI_Receive+0x22a>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2204      	movs	r2, #4
 8004776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	88fa      	ldrh	r2, [r7, #6]
 800478a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047b8:	d10f      	bne.n	80047da <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e4:	2b40      	cmp	r3, #64	@ 0x40
 80047e6:	d007      	beq.n	80047f8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d170      	bne.n	80048e2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004800:	e035      	b.n	800486e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	d115      	bne.n	800483c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f103 020c 	add.w	r2, r3, #12
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800483a:	e018      	b.n	800486e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800483c:	f7fc ffe8 	bl	8001810 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d803      	bhi.n	8004854 <HAL_SPI_Receive+0x15e>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004852:	d102      	bne.n	800485a <HAL_SPI_Receive+0x164>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e058      	b.n	8004920 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1c4      	bne.n	8004802 <HAL_SPI_Receive+0x10c>
 8004878:	e038      	b.n	80048ec <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b01      	cmp	r3, #1
 8004886:	d113      	bne.n	80048b0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004892:	b292      	uxth	r2, r2
 8004894:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489a:	1c9a      	adds	r2, r3, #2
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048ae:	e018      	b.n	80048e2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b0:	f7fc ffae 	bl	8001810 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d803      	bhi.n	80048c8 <HAL_SPI_Receive+0x1d2>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d102      	bne.n	80048ce <HAL_SPI_Receive+0x1d8>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e01e      	b.n	8004920 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1c6      	bne.n	800487a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	6839      	ldr	r1, [r7, #0]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fa59 	bl	8004da8 <SPI_EndRxTransaction>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800491e:	2300      	movs	r3, #0
  }
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	@ 0x28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004936:	2301      	movs	r3, #1
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800493a:	f7fc ff69 	bl	8001810 <HAL_GetTick>
 800493e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004946:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800494e:	887b      	ldrh	r3, [r7, #2]
 8004950:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004952:	7ffb      	ldrb	r3, [r7, #31]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d00c      	beq.n	8004972 <HAL_SPI_TransmitReceive+0x4a>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800495e:	d106      	bne.n	800496e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <HAL_SPI_TransmitReceive+0x46>
 8004968:	7ffb      	ldrb	r3, [r7, #31]
 800496a:	2b04      	cmp	r3, #4
 800496c:	d001      	beq.n	8004972 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800496e:	2302      	movs	r3, #2
 8004970:	e17f      	b.n	8004c72 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x5c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x5c>
 800497e:	887b      	ldrh	r3, [r7, #2]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e174      	b.n	8004c72 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x6e>
 8004992:	2302      	movs	r3, #2
 8004994:	e16d      	b.n	8004c72 <HAL_SPI_TransmitReceive+0x34a>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2205      	movs	r2, #5
 80049ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	887a      	ldrh	r2, [r7, #2]
 80049c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	887a      	ldrh	r2, [r7, #2]
 80049d4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	887a      	ldrh	r2, [r7, #2]
 80049da:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f2:	2b40      	cmp	r3, #64	@ 0x40
 80049f4:	d007      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a0e:	d17e      	bne.n	8004b0e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0xf6>
 8004a18:	8afb      	ldrh	r3, [r7, #22]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d16c      	bne.n	8004af8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a22:	881a      	ldrh	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	1c9a      	adds	r2, r3, #2
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a42:	e059      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d11b      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x162>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d016      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x162>
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d113      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	881a      	ldrh	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	1c9a      	adds	r2, r3, #2
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d119      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x1a4>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d014      	beq.n	8004acc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aac:	b292      	uxth	r2, r2
 8004aae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004acc:	f7fc fea0 	bl	8001810 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d80d      	bhi.n	8004af8 <HAL_SPI_TransmitReceive+0x1d0>
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d009      	beq.n	8004af8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e0bc      	b.n	8004c72 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1a0      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x11c>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d19b      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x11c>
 8004b0c:	e082      	b.n	8004c14 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_SPI_TransmitReceive+0x1f4>
 8004b16:	8afb      	ldrh	r3, [r7, #22]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d171      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	7812      	ldrb	r2, [r2, #0]
 8004b28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b42:	e05d      	b.n	8004c00 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d11c      	bne.n	8004b8c <HAL_SPI_TransmitReceive+0x264>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d017      	beq.n	8004b8c <HAL_SPI_TransmitReceive+0x264>
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d114      	bne.n	8004b8c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d119      	bne.n	8004bce <HAL_SPI_TransmitReceive+0x2a6>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d014      	beq.n	8004bce <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bce:	f7fc fe1f 	bl	8001810 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d803      	bhi.n	8004be6 <HAL_SPI_TransmitReceive+0x2be>
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d102      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x2c4>
 8004be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d109      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e038      	b.n	8004c72 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d19c      	bne.n	8004b44 <HAL_SPI_TransmitReceive+0x21c>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d197      	bne.n	8004b44 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c14:	6a3a      	ldr	r2, [r7, #32]
 8004c16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f92b 	bl	8004e74 <SPI_EndRxTxTransaction>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e01d      	b.n	8004c72 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004c70:	2300      	movs	r3, #0
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3728      	adds	r7, #40	@ 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c88:	b2db      	uxtb	r3, r3
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ca8:	f7fc fdb2 	bl	8001810 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cb8:	f7fc fdaa 	bl	8001810 <HAL_GetTick>
 8004cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cbe:	4b39      	ldr	r3, [pc, #228]	@ (8004da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	015b      	lsls	r3, r3, #5
 8004cc4:	0d1b      	lsrs	r3, r3, #20
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cce:	e054      	b.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d050      	beq.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cd8:	f7fc fd9a 	bl	8001810 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d902      	bls.n	8004cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d13d      	bne.n	8004d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d06:	d111      	bne.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d10:	d004      	beq.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1a:	d107      	bne.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d34:	d10f      	bne.n	8004d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e017      	b.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d19b      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000000 	.word	0x20000000

08004da8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dbc:	d111      	bne.n	8004de2 <SPI_EndRxTransaction+0x3a>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc6:	d004      	beq.n	8004dd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd0:	d107      	bne.n	8004de2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004de0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dea:	d12a      	bne.n	8004e42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df4:	d012      	beq.n	8004e1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2180      	movs	r1, #128	@ 0x80
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7ff ff49 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d02d      	beq.n	8004e68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e10:	f043 0220 	orr.w	r2, r3, #32
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e026      	b.n	8004e6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2200      	movs	r2, #0
 8004e24:	2101      	movs	r1, #1
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff ff36 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01a      	beq.n	8004e68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e013      	b.n	8004e6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff ff23 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5c:	f043 0220 	orr.w	r2, r3, #32
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e000      	b.n	8004e6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2201      	movs	r2, #1
 8004e88:	2102      	movs	r1, #2
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff ff04 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9a:	f043 0220 	orr.w	r2, r3, #32
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e032      	b.n	8004f0c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <SPI_EndRxTxTransaction+0xa0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8004f18 <SPI_EndRxTxTransaction+0xa4>)
 8004eac:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb0:	0d5b      	lsrs	r3, r3, #21
 8004eb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ec4:	d112      	bne.n	8004eec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2180      	movs	r1, #128	@ 0x80
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7ff fee1 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d016      	beq.n	8004f0a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee0:	f043 0220 	orr.w	r2, r3, #32
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e00f      	b.n	8004f0c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f02:	2b80      	cmp	r3, #128	@ 0x80
 8004f04:	d0f2      	beq.n	8004eec <SPI_EndRxTxTransaction+0x78>
 8004f06:	e000      	b.n	8004f0a <SPI_EndRxTxTransaction+0x96>
        break;
 8004f08:	bf00      	nop
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000000 	.word	0x20000000
 8004f18:	165e9f81 	.word	0x165e9f81

08004f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e042      	b.n	8004fb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fc fb52 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2224      	movs	r2, #36	@ 0x24
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 ff85 	bl	8005e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695a      	ldr	r2, [r3, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08a      	sub	sp, #40	@ 0x28
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d175      	bne.n	80050c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_UART_Transmit+0x2c>
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e06e      	b.n	80050ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2221      	movs	r2, #33	@ 0x21
 8004ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ffa:	f7fc fc09 	bl	8001810 <HAL_GetTick>
 8004ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	88fa      	ldrh	r2, [r7, #6]
 8005004:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	88fa      	ldrh	r2, [r7, #6]
 800500a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005014:	d108      	bne.n	8005028 <HAL_UART_Transmit+0x6c>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	61bb      	str	r3, [r7, #24]
 8005026:	e003      	b.n	8005030 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800502c:	2300      	movs	r3, #0
 800502e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005030:	e02e      	b.n	8005090 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2200      	movs	r2, #0
 800503a:	2180      	movs	r1, #128	@ 0x80
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fc5d 	bl	80058fc <UART_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e03a      	b.n	80050ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005068:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	3302      	adds	r3, #2
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	e007      	b.n	8005082 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	781a      	ldrb	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	3301      	adds	r3, #1
 8005080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1cb      	bne.n	8005032 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2200      	movs	r2, #0
 80050a2:	2140      	movs	r1, #64	@ 0x40
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 fc29 	bl	80058fc <UART_WaitOnFlagUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e006      	b.n	80050ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b08c      	sub	sp, #48	@ 0x30
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	4613      	mov	r3, r2
 80050de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d14a      	bne.n	8005182 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e043      	b.n	8005184 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	461a      	mov	r2, r3
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fc4e 	bl	80059b0 <UART_Start_Receive_DMA>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800511a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800511e:	2b00      	cmp	r3, #0
 8005120:	d12c      	bne.n	800517c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005126:	2b01      	cmp	r3, #1
 8005128:	d125      	bne.n	8005176 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	e853 3f00 	ldrex	r3, [r3]
 800514e:	617b      	str	r3, [r7, #20]
   return(result);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f043 0310 	orr.w	r3, r3, #16
 8005156:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	330c      	adds	r3, #12
 800515e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005160:	627a      	str	r2, [r7, #36]	@ 0x24
 8005162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6a39      	ldr	r1, [r7, #32]
 8005166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	61fb      	str	r3, [r7, #28]
   return(result);
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e5      	bne.n	8005140 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005174:	e002      	b.n	800517c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800517c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005180:	e000      	b.n	8005184 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3730      	adds	r7, #48	@ 0x30
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b0ba      	sub	sp, #232	@ 0xe8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80051ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10f      	bne.n	80051f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_UART_IRQHandler+0x66>
 80051de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fd81 	bl	8005cf2 <UART_Receive_IT>
      return;
 80051f0:	e25b      	b.n	80056aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80de 	beq.w	80053b8 <HAL_UART_IRQHandler+0x22c>
 80051fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800520c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80d1 	beq.w	80053b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <HAL_UART_IRQHandler+0xae>
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005232:	f043 0201 	orr.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800523a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <HAL_UART_IRQHandler+0xd2>
 8005246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005256:	f043 0202 	orr.w	r2, r3, #2
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00b      	beq.n	8005282 <HAL_UART_IRQHandler+0xf6>
 800526a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527a:	f043 0204 	orr.w	r2, r3, #4
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d011      	beq.n	80052b2 <HAL_UART_IRQHandler+0x126>
 800528e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d105      	bne.n	80052a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800529a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052aa:	f043 0208 	orr.w	r2, r3, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 81f2 	beq.w	80056a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_UART_IRQHandler+0x14e>
 80052c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fd0c 	bl	8005cf2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e4:	2b40      	cmp	r3, #64	@ 0x40
 80052e6:	bf0c      	ite	eq
 80052e8:	2301      	moveq	r3, #1
 80052ea:	2300      	movne	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d103      	bne.n	8005306 <HAL_UART_IRQHandler+0x17a>
 80052fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d04f      	beq.n	80053a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fc14 	bl	8005b34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005316:	2b40      	cmp	r3, #64	@ 0x40
 8005318:	d141      	bne.n	800539e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3314      	adds	r3, #20
 8005320:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005330:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3314      	adds	r3, #20
 8005342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005346:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800534a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800535e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1d9      	bne.n	800531a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d013      	beq.n	8005396 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005372:	4a7e      	ldr	r2, [pc, #504]	@ (800556c <HAL_UART_IRQHandler+0x3e0>)
 8005374:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537a:	4618      	mov	r0, r3
 800537c:	f7fc fd00 	bl	8001d80 <HAL_DMA_Abort_IT>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005390:	4610      	mov	r0, r2
 8005392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005394:	e00e      	b.n	80053b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f9a8 	bl	80056ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	e00a      	b.n	80053b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f9a4 	bl	80056ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	e006      	b.n	80053b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f9a0 	bl	80056ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80053b2:	e175      	b.n	80056a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	bf00      	nop
    return;
 80053b6:	e173      	b.n	80056a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053bc:	2b01      	cmp	r3, #1
 80053be:	f040 814f 	bne.w	8005660 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8148 	beq.w	8005660 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8141 	beq.w	8005660 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053de:	2300      	movs	r3, #0
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fe:	2b40      	cmp	r3, #64	@ 0x40
 8005400:	f040 80b6 	bne.w	8005570 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005410:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8145 	beq.w	80056a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800541e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005422:	429a      	cmp	r2, r3
 8005424:	f080 813e 	bcs.w	80056a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800542e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800543a:	f000 8088 	beq.w	800554e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	330c      	adds	r3, #12
 8005444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800545c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800546a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800546e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005476:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1d9      	bne.n	800543e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3314      	adds	r3, #20
 8005490:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800549a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3314      	adds	r3, #20
 80054aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80054ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80054b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80054b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80054c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e1      	bne.n	800548a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3314      	adds	r3, #20
 80054cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80054d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3314      	adds	r3, #20
 80054e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e3      	bne.n	80054c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800551c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800551e:	f023 0310 	bic.w	r3, r3, #16
 8005522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	330c      	adds	r3, #12
 800552c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005530:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005532:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005536:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800553e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e3      	bne.n	800550c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005548:	4618      	mov	r0, r3
 800554a:	f7fc fba9 	bl	8001ca0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800555c:	b29b      	uxth	r3, r3
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	b29b      	uxth	r3, r3
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fb fdf2 	bl	800114e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800556a:	e09b      	b.n	80056a4 <HAL_UART_IRQHandler+0x518>
 800556c:	08005bfb 	.word	0x08005bfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005578:	b29b      	uxth	r3, r3
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 808e 	beq.w	80056a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800558c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 8089 	beq.w	80056a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	330c      	adds	r3, #12
 800559c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80055ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80055bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e3      	bne.n	8005596 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3314      	adds	r3, #20
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	623b      	str	r3, [r7, #32]
   return(result);
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	f023 0301 	bic.w	r3, r3, #1
 80055e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3314      	adds	r3, #20
 80055ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e3      	bne.n	80055ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	60fb      	str	r3, [r7, #12]
   return(result);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0310 	bic.w	r3, r3, #16
 800562a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005638:	61fa      	str	r2, [r7, #28]
 800563a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	69b9      	ldr	r1, [r7, #24]
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	617b      	str	r3, [r7, #20]
   return(result);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e3      	bne.n	8005614 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005652:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7fb fd78 	bl	800114e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800565e:	e023      	b.n	80056a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005668:	2b00      	cmp	r3, #0
 800566a:	d009      	beq.n	8005680 <HAL_UART_IRQHandler+0x4f4>
 800566c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fad2 	bl	8005c22 <UART_Transmit_IT>
    return;
 800567e:	e014      	b.n	80056aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00e      	beq.n	80056aa <HAL_UART_IRQHandler+0x51e>
 800568c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fb12 	bl	8005cc2 <UART_EndTransmit_IT>
    return;
 800569e:	e004      	b.n	80056aa <HAL_UART_IRQHandler+0x51e>
    return;
 80056a0:	bf00      	nop
 80056a2:	e002      	b.n	80056aa <HAL_UART_IRQHandler+0x51e>
      return;
 80056a4:	bf00      	nop
 80056a6:	e000      	b.n	80056aa <HAL_UART_IRQHandler+0x51e>
      return;
 80056a8:	bf00      	nop
  }
}
 80056aa:	37e8      	adds	r7, #232	@ 0xe8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b09c      	sub	sp, #112	@ 0x70
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005718:	2b00      	cmp	r3, #0
 800571a:	d172      	bne.n	8005802 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800571c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800571e:	2200      	movs	r2, #0
 8005720:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800573a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005742:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005744:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005748:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e5      	bne.n	8005722 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3314      	adds	r3, #20
 800575c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	667b      	str	r3, [r7, #100]	@ 0x64
 800576e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005776:	647a      	str	r2, [r7, #68]	@ 0x44
 8005778:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800577c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e5      	bne.n	8005756 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800578a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3314      	adds	r3, #20
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	623b      	str	r3, [r7, #32]
   return(result);
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80057a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3314      	adds	r3, #20
 80057a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80057ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e5      	bne.n	800578a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d119      	bne.n	8005802 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	330c      	adds	r3, #12
 80057d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f023 0310 	bic.w	r3, r3, #16
 80057e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	330c      	adds	r3, #12
 80057ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80057ee:	61fa      	str	r2, [r7, #28]
 80057f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	69b9      	ldr	r1, [r7, #24]
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	617b      	str	r3, [r7, #20]
   return(result);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e5      	bne.n	80057ce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005804:	2200      	movs	r2, #0
 8005806:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800580a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580c:	2b01      	cmp	r3, #1
 800580e:	d106      	bne.n	800581e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005810:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005812:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005814:	4619      	mov	r1, r3
 8005816:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005818:	f7fb fc99 	bl	800114e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800581c:	e002      	b.n	8005824 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800581e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005820:	f7ff ff50 	bl	80056c4 <HAL_UART_RxCpltCallback>
}
 8005824:	bf00      	nop
 8005826:	3770      	adds	r7, #112	@ 0x70
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005838:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005844:	2b01      	cmp	r3, #1
 8005846:	d108      	bne.n	800585a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	b29b      	uxth	r3, r3
 8005850:	4619      	mov	r1, r3
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7fb fc7b 	bl	800114e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005858:	e002      	b.n	8005860 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f7ff ff3c 	bl	80056d8 <HAL_UART_RxHalfCpltCallback>
}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005878:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005884:	2b80      	cmp	r3, #128	@ 0x80
 8005886:	bf0c      	ite	eq
 8005888:	2301      	moveq	r3, #1
 800588a:	2300      	movne	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b21      	cmp	r3, #33	@ 0x21
 800589a:	d108      	bne.n	80058ae <UART_DMAError+0x46>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d005      	beq.n	80058ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2200      	movs	r2, #0
 80058a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80058a8:	68b8      	ldr	r0, [r7, #8]
 80058aa:	f000 f91b 	bl	8005ae4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b8:	2b40      	cmp	r3, #64	@ 0x40
 80058ba:	bf0c      	ite	eq
 80058bc:	2301      	moveq	r3, #1
 80058be:	2300      	movne	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b22      	cmp	r3, #34	@ 0x22
 80058ce:	d108      	bne.n	80058e2 <UART_DMAError+0x7a>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2200      	movs	r2, #0
 80058da:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80058dc:	68b8      	ldr	r0, [r7, #8]
 80058de:	f000 f929 	bl	8005b34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e6:	f043 0210 	orr.w	r2, r3, #16
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ee:	68b8      	ldr	r0, [r7, #8]
 80058f0:	f7ff fefc 	bl	80056ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590c:	e03b      	b.n	8005986 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d037      	beq.n	8005986 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005916:	f7fb ff7b 	bl	8001810 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	6a3a      	ldr	r2, [r7, #32]
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <UART_WaitOnFlagUntilTimeout+0x30>
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e03a      	b.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	d023      	beq.n	8005986 <UART_WaitOnFlagUntilTimeout+0x8a>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b80      	cmp	r3, #128	@ 0x80
 8005942:	d020      	beq.n	8005986 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b40      	cmp	r3, #64	@ 0x40
 8005948:	d01d      	beq.n	8005986 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b08      	cmp	r3, #8
 8005956:	d116      	bne.n	8005986 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f8e0 	bl	8005b34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2208      	movs	r2, #8
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e00f      	b.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4013      	ands	r3, r2
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	429a      	cmp	r2, r3
 8005994:	bf0c      	ite	eq
 8005996:	2301      	moveq	r3, #1
 8005998:	2300      	movne	r3, #0
 800599a:	b2db      	uxtb	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d0b4      	beq.n	800590e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b098      	sub	sp, #96	@ 0x60
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	88fa      	ldrh	r2, [r7, #6]
 80059c8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2222      	movs	r2, #34	@ 0x22
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059dc:	4a3e      	ldr	r2, [pc, #248]	@ (8005ad8 <UART_Start_Receive_DMA+0x128>)
 80059de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e4:	4a3d      	ldr	r2, [pc, #244]	@ (8005adc <UART_Start_Receive_DMA+0x12c>)
 80059e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ec:	4a3c      	ldr	r2, [pc, #240]	@ (8005ae0 <UART_Start_Receive_DMA+0x130>)
 80059ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f4:	2200      	movs	r2, #0
 80059f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80059f8:	f107 0308 	add.w	r3, r7, #8
 80059fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3304      	adds	r3, #4
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	f7fc f8ee 	bl	8001bf0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d019      	beq.n	8005a66 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	330c      	adds	r3, #12
 8005a38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	330c      	adds	r3, #12
 8005a50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a52:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005a54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005a58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e5      	bne.n	8005a32 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3314      	adds	r3, #20
 8005a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3314      	adds	r3, #20
 8005a84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a86:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005a88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e5      	bne.n	8005a66 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3314      	adds	r3, #20
 8005aa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ab0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3314      	adds	r3, #20
 8005ab8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005aba:	627a      	str	r2, [r7, #36]	@ 0x24
 8005abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6a39      	ldr	r1, [r7, #32]
 8005ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e5      	bne.n	8005a9a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3760      	adds	r7, #96	@ 0x60
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	08005701 	.word	0x08005701
 8005adc:	0800582d 	.word	0x0800582d
 8005ae0:	08005869 	.word	0x08005869

08005ae4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b089      	sub	sp, #36	@ 0x24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	61ba      	str	r2, [r7, #24]
 8005b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6979      	ldr	r1, [r7, #20]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005b28:	bf00      	nop
 8005b2a:	3724      	adds	r7, #36	@ 0x24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b095      	sub	sp, #84	@ 0x54
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3314      	adds	r3, #20
 8005b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3314      	adds	r3, #20
 8005b8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e5      	bne.n	8005b70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d119      	bne.n	8005be0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f023 0310 	bic.w	r3, r3, #16
 8005bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bcc:	61ba      	str	r2, [r7, #24]
 8005bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6979      	ldr	r1, [r7, #20]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e5      	bne.n	8005bac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bee:	bf00      	nop
 8005bf0:	3754      	adds	r7, #84	@ 0x54
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff fd69 	bl	80056ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b21      	cmp	r3, #33	@ 0x21
 8005c34:	d13e      	bne.n	8005cb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3e:	d114      	bne.n	8005c6a <UART_Transmit_IT+0x48>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d110      	bne.n	8005c6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	1c9a      	adds	r2, r3, #2
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	621a      	str	r2, [r3, #32]
 8005c68:	e008      	b.n	8005c7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	1c59      	adds	r1, r3, #1
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6211      	str	r1, [r2, #32]
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10f      	bne.n	8005cb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff fce4 	bl	80056b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b08c      	sub	sp, #48	@ 0x30
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b22      	cmp	r3, #34	@ 0x22
 8005d04:	f040 80ae 	bne.w	8005e64 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d10:	d117      	bne.n	8005d42 <UART_Receive_IT+0x50>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d113      	bne.n	8005d42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d22:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	1c9a      	adds	r2, r3, #2
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d40:	e026      	b.n	8005d90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d54:	d007      	beq.n	8005d66 <UART_Receive_IT+0x74>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <UART_Receive_IT+0x82>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e008      	b.n	8005d86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d15d      	bne.n	8005e60 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0220 	bic.w	r2, r2, #32
 8005db2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695a      	ldr	r2, [r3, #20]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d135      	bne.n	8005e56 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f023 0310 	bic.w	r3, r3, #16
 8005e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e10:	623a      	str	r2, [r7, #32]
 8005e12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	69f9      	ldr	r1, [r7, #28]
 8005e16:	6a3a      	ldr	r2, [r7, #32]
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e5      	bne.n	8005df0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	2b10      	cmp	r3, #16
 8005e30:	d10a      	bne.n	8005e48 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fb f97d 	bl	800114e <HAL_UARTEx_RxEventCallback>
 8005e54:	e002      	b.n	8005e5c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fc34 	bl	80056c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e002      	b.n	8005e66 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e000      	b.n	8005e66 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
  }
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3730      	adds	r7, #48	@ 0x30
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e74:	b0c0      	sub	sp, #256	@ 0x100
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8c:	68d9      	ldr	r1, [r3, #12]
 8005e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	ea40 0301 	orr.w	r3, r0, r1
 8005e98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ec8:	f021 010c 	bic.w	r1, r1, #12
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ed6:	430b      	orrs	r3, r1
 8005ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eea:	6999      	ldr	r1, [r3, #24]
 8005eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	ea40 0301 	orr.w	r3, r0, r1
 8005ef6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	4b8f      	ldr	r3, [pc, #572]	@ (800613c <UART_SetConfig+0x2cc>)
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d005      	beq.n	8005f10 <UART_SetConfig+0xa0>
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4b8d      	ldr	r3, [pc, #564]	@ (8006140 <UART_SetConfig+0x2d0>)
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d104      	bne.n	8005f1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f10:	f7fe fa10 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8005f14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f18:	e003      	b.n	8005f22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f1a:	f7fe f9f7 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8005f1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f2c:	f040 810c 	bne.w	8006148 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f42:	4622      	mov	r2, r4
 8005f44:	462b      	mov	r3, r5
 8005f46:	1891      	adds	r1, r2, r2
 8005f48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f4a:	415b      	adcs	r3, r3
 8005f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f52:	4621      	mov	r1, r4
 8005f54:	eb12 0801 	adds.w	r8, r2, r1
 8005f58:	4629      	mov	r1, r5
 8005f5a:	eb43 0901 	adc.w	r9, r3, r1
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	f04f 0300 	mov.w	r3, #0
 8005f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f72:	4690      	mov	r8, r2
 8005f74:	4699      	mov	r9, r3
 8005f76:	4623      	mov	r3, r4
 8005f78:	eb18 0303 	adds.w	r3, r8, r3
 8005f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f80:	462b      	mov	r3, r5
 8005f82:	eb49 0303 	adc.w	r3, r9, r3
 8005f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	18db      	adds	r3, r3, r3
 8005fa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	eb42 0303 	adc.w	r3, r2, r3
 8005faa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005fb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005fb4:	f7fa f910 	bl	80001d8 <__aeabi_uldivmod>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4b61      	ldr	r3, [pc, #388]	@ (8006144 <UART_SetConfig+0x2d4>)
 8005fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	011c      	lsls	r4, r3, #4
 8005fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fd8:	4642      	mov	r2, r8
 8005fda:	464b      	mov	r3, r9
 8005fdc:	1891      	adds	r1, r2, r2
 8005fde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fe0:	415b      	adcs	r3, r3
 8005fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fe8:	4641      	mov	r1, r8
 8005fea:	eb12 0a01 	adds.w	sl, r2, r1
 8005fee:	4649      	mov	r1, r9
 8005ff0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006000:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006008:	4692      	mov	sl, r2
 800600a:	469b      	mov	fp, r3
 800600c:	4643      	mov	r3, r8
 800600e:	eb1a 0303 	adds.w	r3, sl, r3
 8006012:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006016:	464b      	mov	r3, r9
 8006018:	eb4b 0303 	adc.w	r3, fp, r3
 800601c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800602c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006030:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006034:	460b      	mov	r3, r1
 8006036:	18db      	adds	r3, r3, r3
 8006038:	643b      	str	r3, [r7, #64]	@ 0x40
 800603a:	4613      	mov	r3, r2
 800603c:	eb42 0303 	adc.w	r3, r2, r3
 8006040:	647b      	str	r3, [r7, #68]	@ 0x44
 8006042:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006046:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800604a:	f7fa f8c5 	bl	80001d8 <__aeabi_uldivmod>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4611      	mov	r1, r2
 8006054:	4b3b      	ldr	r3, [pc, #236]	@ (8006144 <UART_SetConfig+0x2d4>)
 8006056:	fba3 2301 	umull	r2, r3, r3, r1
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	2264      	movs	r2, #100	@ 0x64
 800605e:	fb02 f303 	mul.w	r3, r2, r3
 8006062:	1acb      	subs	r3, r1, r3
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800606a:	4b36      	ldr	r3, [pc, #216]	@ (8006144 <UART_SetConfig+0x2d4>)
 800606c:	fba3 2302 	umull	r2, r3, r3, r2
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006078:	441c      	add	r4, r3
 800607a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800607e:	2200      	movs	r2, #0
 8006080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006084:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006088:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	1891      	adds	r1, r2, r2
 8006092:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006094:	415b      	adcs	r3, r3
 8006096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006098:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800609c:	4641      	mov	r1, r8
 800609e:	1851      	adds	r1, r2, r1
 80060a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80060a2:	4649      	mov	r1, r9
 80060a4:	414b      	adcs	r3, r1
 80060a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060b4:	4659      	mov	r1, fp
 80060b6:	00cb      	lsls	r3, r1, #3
 80060b8:	4651      	mov	r1, sl
 80060ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060be:	4651      	mov	r1, sl
 80060c0:	00ca      	lsls	r2, r1, #3
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	4642      	mov	r2, r8
 80060ca:	189b      	adds	r3, r3, r2
 80060cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060d0:	464b      	mov	r3, r9
 80060d2:	460a      	mov	r2, r1
 80060d4:	eb42 0303 	adc.w	r3, r2, r3
 80060d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060f0:	460b      	mov	r3, r1
 80060f2:	18db      	adds	r3, r3, r3
 80060f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060f6:	4613      	mov	r3, r2
 80060f8:	eb42 0303 	adc.w	r3, r2, r3
 80060fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006102:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006106:	f7fa f867 	bl	80001d8 <__aeabi_uldivmod>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4b0d      	ldr	r3, [pc, #52]	@ (8006144 <UART_SetConfig+0x2d4>)
 8006110:	fba3 1302 	umull	r1, r3, r3, r2
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	2164      	movs	r1, #100	@ 0x64
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	3332      	adds	r3, #50	@ 0x32
 8006122:	4a08      	ldr	r2, [pc, #32]	@ (8006144 <UART_SetConfig+0x2d4>)
 8006124:	fba2 2303 	umull	r2, r3, r2, r3
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	f003 0207 	and.w	r2, r3, #7
 800612e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4422      	add	r2, r4
 8006136:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006138:	e106      	b.n	8006348 <UART_SetConfig+0x4d8>
 800613a:	bf00      	nop
 800613c:	40011000 	.word	0x40011000
 8006140:	40011400 	.word	0x40011400
 8006144:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800614c:	2200      	movs	r2, #0
 800614e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006152:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006156:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800615a:	4642      	mov	r2, r8
 800615c:	464b      	mov	r3, r9
 800615e:	1891      	adds	r1, r2, r2
 8006160:	6239      	str	r1, [r7, #32]
 8006162:	415b      	adcs	r3, r3
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
 8006166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800616a:	4641      	mov	r1, r8
 800616c:	1854      	adds	r4, r2, r1
 800616e:	4649      	mov	r1, r9
 8006170:	eb43 0501 	adc.w	r5, r3, r1
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	00eb      	lsls	r3, r5, #3
 800617e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006182:	00e2      	lsls	r2, r4, #3
 8006184:	4614      	mov	r4, r2
 8006186:	461d      	mov	r5, r3
 8006188:	4643      	mov	r3, r8
 800618a:	18e3      	adds	r3, r4, r3
 800618c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006190:	464b      	mov	r3, r9
 8006192:	eb45 0303 	adc.w	r3, r5, r3
 8006196:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800619a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061b6:	4629      	mov	r1, r5
 80061b8:	008b      	lsls	r3, r1, #2
 80061ba:	4621      	mov	r1, r4
 80061bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061c0:	4621      	mov	r1, r4
 80061c2:	008a      	lsls	r2, r1, #2
 80061c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061c8:	f7fa f806 	bl	80001d8 <__aeabi_uldivmod>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4b60      	ldr	r3, [pc, #384]	@ (8006354 <UART_SetConfig+0x4e4>)
 80061d2:	fba3 2302 	umull	r2, r3, r3, r2
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	011c      	lsls	r4, r3, #4
 80061da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	1891      	adds	r1, r2, r2
 80061f2:	61b9      	str	r1, [r7, #24]
 80061f4:	415b      	adcs	r3, r3
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061fc:	4641      	mov	r1, r8
 80061fe:	1851      	adds	r1, r2, r1
 8006200:	6139      	str	r1, [r7, #16]
 8006202:	4649      	mov	r1, r9
 8006204:	414b      	adcs	r3, r1
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006214:	4659      	mov	r1, fp
 8006216:	00cb      	lsls	r3, r1, #3
 8006218:	4651      	mov	r1, sl
 800621a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800621e:	4651      	mov	r1, sl
 8006220:	00ca      	lsls	r2, r1, #3
 8006222:	4610      	mov	r0, r2
 8006224:	4619      	mov	r1, r3
 8006226:	4603      	mov	r3, r0
 8006228:	4642      	mov	r2, r8
 800622a:	189b      	adds	r3, r3, r2
 800622c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006230:	464b      	mov	r3, r9
 8006232:	460a      	mov	r2, r1
 8006234:	eb42 0303 	adc.w	r3, r2, r3
 8006238:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006246:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006254:	4649      	mov	r1, r9
 8006256:	008b      	lsls	r3, r1, #2
 8006258:	4641      	mov	r1, r8
 800625a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800625e:	4641      	mov	r1, r8
 8006260:	008a      	lsls	r2, r1, #2
 8006262:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006266:	f7f9 ffb7 	bl	80001d8 <__aeabi_uldivmod>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4611      	mov	r1, r2
 8006270:	4b38      	ldr	r3, [pc, #224]	@ (8006354 <UART_SetConfig+0x4e4>)
 8006272:	fba3 2301 	umull	r2, r3, r3, r1
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	2264      	movs	r2, #100	@ 0x64
 800627a:	fb02 f303 	mul.w	r3, r2, r3
 800627e:	1acb      	subs	r3, r1, r3
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	3332      	adds	r3, #50	@ 0x32
 8006284:	4a33      	ldr	r2, [pc, #204]	@ (8006354 <UART_SetConfig+0x4e4>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006290:	441c      	add	r4, r3
 8006292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006296:	2200      	movs	r2, #0
 8006298:	673b      	str	r3, [r7, #112]	@ 0x70
 800629a:	677a      	str	r2, [r7, #116]	@ 0x74
 800629c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	1891      	adds	r1, r2, r2
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	415b      	adcs	r3, r3
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062b0:	4641      	mov	r1, r8
 80062b2:	1851      	adds	r1, r2, r1
 80062b4:	6039      	str	r1, [r7, #0]
 80062b6:	4649      	mov	r1, r9
 80062b8:	414b      	adcs	r3, r1
 80062ba:	607b      	str	r3, [r7, #4]
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062c8:	4659      	mov	r1, fp
 80062ca:	00cb      	lsls	r3, r1, #3
 80062cc:	4651      	mov	r1, sl
 80062ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062d2:	4651      	mov	r1, sl
 80062d4:	00ca      	lsls	r2, r1, #3
 80062d6:	4610      	mov	r0, r2
 80062d8:	4619      	mov	r1, r3
 80062da:	4603      	mov	r3, r0
 80062dc:	4642      	mov	r2, r8
 80062de:	189b      	adds	r3, r3, r2
 80062e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062e2:	464b      	mov	r3, r9
 80062e4:	460a      	mov	r2, r1
 80062e6:	eb42 0303 	adc.w	r3, r2, r3
 80062ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80062f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006304:	4649      	mov	r1, r9
 8006306:	008b      	lsls	r3, r1, #2
 8006308:	4641      	mov	r1, r8
 800630a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800630e:	4641      	mov	r1, r8
 8006310:	008a      	lsls	r2, r1, #2
 8006312:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006316:	f7f9 ff5f 	bl	80001d8 <__aeabi_uldivmod>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4b0d      	ldr	r3, [pc, #52]	@ (8006354 <UART_SetConfig+0x4e4>)
 8006320:	fba3 1302 	umull	r1, r3, r3, r2
 8006324:	095b      	lsrs	r3, r3, #5
 8006326:	2164      	movs	r1, #100	@ 0x64
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	3332      	adds	r3, #50	@ 0x32
 8006332:	4a08      	ldr	r2, [pc, #32]	@ (8006354 <UART_SetConfig+0x4e4>)
 8006334:	fba2 2303 	umull	r2, r3, r2, r3
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	f003 020f 	and.w	r2, r3, #15
 800633e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4422      	add	r2, r4
 8006346:	609a      	str	r2, [r3, #8]
}
 8006348:	bf00      	nop
 800634a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800634e:	46bd      	mov	sp, r7
 8006350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006354:	51eb851f 	.word	0x51eb851f

08006358 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006358:	b084      	sub	sp, #16
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	f107 001c 	add.w	r0, r7, #28
 8006366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800636a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800636e:	2b01      	cmp	r3, #1
 8006370:	d123      	bne.n	80063ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006376:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800639a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d105      	bne.n	80063ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 fae8 	bl	8007984 <USB_CoreReset>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]
 80063b8:	e01b      	b.n	80063f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 fadc 	bl	8007984 <USB_CoreReset>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d106      	bne.n	80063e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80063e4:	e005      	b.n	80063f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063f2:	7fbb      	ldrb	r3, [r7, #30]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d10b      	bne.n	8006410 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f043 0206 	orr.w	r2, r3, #6
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f043 0220 	orr.w	r2, r3, #32
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800641c:	b004      	add	sp, #16
 800641e:	4770      	bx	lr

08006420 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	2b02      	cmp	r3, #2
 8006432:	d165      	bne.n	8006500 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4a41      	ldr	r2, [pc, #260]	@ (800653c <USB_SetTurnaroundTime+0x11c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d906      	bls.n	800644a <USB_SetTurnaroundTime+0x2a>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4a40      	ldr	r2, [pc, #256]	@ (8006540 <USB_SetTurnaroundTime+0x120>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d202      	bcs.n	800644a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006444:	230f      	movs	r3, #15
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e062      	b.n	8006510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	4a3c      	ldr	r2, [pc, #240]	@ (8006540 <USB_SetTurnaroundTime+0x120>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d306      	bcc.n	8006460 <USB_SetTurnaroundTime+0x40>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4a3b      	ldr	r2, [pc, #236]	@ (8006544 <USB_SetTurnaroundTime+0x124>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d202      	bcs.n	8006460 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800645a:	230e      	movs	r3, #14
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	e057      	b.n	8006510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4a38      	ldr	r2, [pc, #224]	@ (8006544 <USB_SetTurnaroundTime+0x124>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d306      	bcc.n	8006476 <USB_SetTurnaroundTime+0x56>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4a37      	ldr	r2, [pc, #220]	@ (8006548 <USB_SetTurnaroundTime+0x128>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d202      	bcs.n	8006476 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006470:	230d      	movs	r3, #13
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	e04c      	b.n	8006510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4a33      	ldr	r2, [pc, #204]	@ (8006548 <USB_SetTurnaroundTime+0x128>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d306      	bcc.n	800648c <USB_SetTurnaroundTime+0x6c>
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4a32      	ldr	r2, [pc, #200]	@ (800654c <USB_SetTurnaroundTime+0x12c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d802      	bhi.n	800648c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006486:	230c      	movs	r3, #12
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	e041      	b.n	8006510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4a2f      	ldr	r2, [pc, #188]	@ (800654c <USB_SetTurnaroundTime+0x12c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d906      	bls.n	80064a2 <USB_SetTurnaroundTime+0x82>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4a2e      	ldr	r2, [pc, #184]	@ (8006550 <USB_SetTurnaroundTime+0x130>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d802      	bhi.n	80064a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800649c:	230b      	movs	r3, #11
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	e036      	b.n	8006510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006550 <USB_SetTurnaroundTime+0x130>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d906      	bls.n	80064b8 <USB_SetTurnaroundTime+0x98>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4a29      	ldr	r2, [pc, #164]	@ (8006554 <USB_SetTurnaroundTime+0x134>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d802      	bhi.n	80064b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80064b2:	230a      	movs	r3, #10
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e02b      	b.n	8006510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4a26      	ldr	r2, [pc, #152]	@ (8006554 <USB_SetTurnaroundTime+0x134>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d906      	bls.n	80064ce <USB_SetTurnaroundTime+0xae>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4a25      	ldr	r2, [pc, #148]	@ (8006558 <USB_SetTurnaroundTime+0x138>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d202      	bcs.n	80064ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064c8:	2309      	movs	r3, #9
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	e020      	b.n	8006510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4a21      	ldr	r2, [pc, #132]	@ (8006558 <USB_SetTurnaroundTime+0x138>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d306      	bcc.n	80064e4 <USB_SetTurnaroundTime+0xc4>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	4a20      	ldr	r2, [pc, #128]	@ (800655c <USB_SetTurnaroundTime+0x13c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d802      	bhi.n	80064e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064de:	2308      	movs	r3, #8
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	e015      	b.n	8006510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4a1d      	ldr	r2, [pc, #116]	@ (800655c <USB_SetTurnaroundTime+0x13c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d906      	bls.n	80064fa <USB_SetTurnaroundTime+0xda>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006560 <USB_SetTurnaroundTime+0x140>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d202      	bcs.n	80064fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80064f4:	2307      	movs	r3, #7
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	e00a      	b.n	8006510 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80064fa:	2306      	movs	r3, #6
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e007      	b.n	8006510 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006506:	2309      	movs	r3, #9
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	e001      	b.n	8006510 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800650c:	2309      	movs	r3, #9
 800650e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	029b      	lsls	r3, r3, #10
 8006524:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006528:	431a      	orrs	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	00d8acbf 	.word	0x00d8acbf
 8006540:	00e4e1c0 	.word	0x00e4e1c0
 8006544:	00f42400 	.word	0x00f42400
 8006548:	01067380 	.word	0x01067380
 800654c:	011a499f 	.word	0x011a499f
 8006550:	01312cff 	.word	0x01312cff
 8006554:	014ca43f 	.word	0x014ca43f
 8006558:	016e3600 	.word	0x016e3600
 800655c:	01a6ab1f 	.word	0x01a6ab1f
 8006560:	01e84800 	.word	0x01e84800

08006564 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f043 0201 	orr.w	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f023 0201 	bic.w	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d115      	bne.n	80065f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065d6:	200a      	movs	r0, #10
 80065d8:	f7fb f926 	bl	8001828 <HAL_Delay>
      ms += 10U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	330a      	adds	r3, #10
 80065e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 f93f 	bl	8007866 <USB_GetMode>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d01e      	beq.n	800662c <USB_SetCurrentMode+0x84>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80065f2:	d9f0      	bls.n	80065d6 <USB_SetCurrentMode+0x2e>
 80065f4:	e01a      	b.n	800662c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d115      	bne.n	8006628 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006608:	200a      	movs	r0, #10
 800660a:	f7fb f90d 	bl	8001828 <HAL_Delay>
      ms += 10U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	330a      	adds	r3, #10
 8006612:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 f926 	bl	8007866 <USB_GetMode>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <USB_SetCurrentMode+0x84>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2bc7      	cmp	r3, #199	@ 0xc7
 8006624:	d9f0      	bls.n	8006608 <USB_SetCurrentMode+0x60>
 8006626:	e001      	b.n	800662c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e005      	b.n	8006638 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006630:	d101      	bne.n	8006636 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e000      	b.n	8006638 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006640:	b084      	sub	sp, #16
 8006642:	b580      	push	{r7, lr}
 8006644:	b086      	sub	sp, #24
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800664e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800665a:	2300      	movs	r3, #0
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	e009      	b.n	8006674 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	3340      	adds	r3, #64	@ 0x40
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	2200      	movs	r2, #0
 800666c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	3301      	adds	r3, #1
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b0e      	cmp	r3, #14
 8006678:	d9f2      	bls.n	8006660 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800667a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800667e:	2b00      	cmp	r3, #0
 8006680:	d11c      	bne.n	80066bc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006690:	f043 0302 	orr.w	r3, r3, #2
 8006694:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80066ba:	e00b      	b.n	80066d4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066cc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066da:	461a      	mov	r2, r3
 80066dc:	2300      	movs	r3, #0
 80066de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d10d      	bne.n	8006704 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d104      	bne.n	80066fa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066f0:	2100      	movs	r1, #0
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f968 	bl	80069c8 <USB_SetDevSpeed>
 80066f8:	e008      	b.n	800670c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066fa:	2101      	movs	r1, #1
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f963 	bl	80069c8 <USB_SetDevSpeed>
 8006702:	e003      	b.n	800670c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006704:	2103      	movs	r1, #3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f95e 	bl	80069c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800670c:	2110      	movs	r1, #16
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f8fa 	bl	8006908 <USB_FlushTxFifo>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f924 	bl	800696c <USB_FlushRxFifo>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006734:	461a      	mov	r2, r3
 8006736:	2300      	movs	r3, #0
 8006738:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006740:	461a      	mov	r2, r3
 8006742:	2300      	movs	r3, #0
 8006744:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674c:	461a      	mov	r2, r3
 800674e:	2300      	movs	r3, #0
 8006750:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006752:	2300      	movs	r3, #0
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	e043      	b.n	80067e0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800676a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800676e:	d118      	bne.n	80067a2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006782:	461a      	mov	r2, r3
 8006784:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	e013      	b.n	80067b4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006798:	461a      	mov	r2, r3
 800679a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	e008      	b.n	80067b4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ae:	461a      	mov	r2, r3
 80067b0:	2300      	movs	r3, #0
 80067b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c0:	461a      	mov	r2, r3
 80067c2:	2300      	movs	r3, #0
 80067c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d2:	461a      	mov	r2, r3
 80067d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	3301      	adds	r3, #1
 80067de:	613b      	str	r3, [r7, #16]
 80067e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067e4:	461a      	mov	r2, r3
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d3b5      	bcc.n	8006758 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ec:	2300      	movs	r3, #0
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	e043      	b.n	800687a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006804:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006808:	d118      	bne.n	800683c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681c:	461a      	mov	r2, r3
 800681e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	e013      	b.n	800684e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006832:	461a      	mov	r2, r3
 8006834:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	e008      	b.n	800684e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006848:	461a      	mov	r2, r3
 800684a:	2300      	movs	r3, #0
 800684c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	2300      	movs	r3, #0
 800685e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800686c:	461a      	mov	r2, r3
 800686e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006872:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	3301      	adds	r3, #1
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800687e:	461a      	mov	r2, r3
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	4293      	cmp	r3, r2
 8006884:	d3b5      	bcc.n	80067f2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006898:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80068a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d105      	bne.n	80068bc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f043 0210 	orr.w	r2, r3, #16
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699a      	ldr	r2, [r3, #24]
 80068c0:	4b10      	ldr	r3, [pc, #64]	@ (8006904 <USB_DevInit+0x2c4>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f043 0208 	orr.w	r2, r3, #8
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d107      	bne.n	80068f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068ec:	f043 0304 	orr.w	r3, r3, #4
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006900:	b004      	add	sp, #16
 8006902:	4770      	bx	lr
 8006904:	803c3800 	.word	0x803c3800

08006908 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006922:	d901      	bls.n	8006928 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e01b      	b.n	8006960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	daf2      	bge.n	8006916 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	019b      	lsls	r3, r3, #6
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3301      	adds	r3, #1
 8006944:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800694c:	d901      	bls.n	8006952 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e006      	b.n	8006960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b20      	cmp	r3, #32
 800695c:	d0f0      	beq.n	8006940 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006984:	d901      	bls.n	800698a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e018      	b.n	80069bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	daf2      	bge.n	8006978 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2210      	movs	r2, #16
 800699a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3301      	adds	r3, #1
 80069a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069a8:	d901      	bls.n	80069ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e006      	b.n	80069bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f003 0310 	and.w	r3, r3, #16
 80069b6:	2b10      	cmp	r3, #16
 80069b8:	d0f0      	beq.n	800699c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069e8:	4313      	orrs	r3, r2
 80069ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b087      	sub	sp, #28
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0306 	and.w	r3, r3, #6
 8006a12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75fb      	strb	r3, [r7, #23]
 8006a1e:	e00a      	b.n	8006a36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d002      	beq.n	8006a2c <USB_GetDevSpeed+0x32>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b06      	cmp	r3, #6
 8006a2a:	d102      	bne.n	8006a32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	75fb      	strb	r3, [r7, #23]
 8006a30:	e001      	b.n	8006a36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a32:	230f      	movs	r3, #15
 8006a34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d13a      	bne.n	8006ad6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a66:	69da      	ldr	r2, [r3, #28]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	2101      	movs	r1, #1
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	68f9      	ldr	r1, [r7, #12]
 8006a7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d155      	bne.n	8006b44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	791b      	ldrb	r3, [r3, #4]
 8006ab2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ab4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	059b      	lsls	r3, r3, #22
 8006aba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006abc:	4313      	orrs	r3, r2
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	e036      	b.n	8006b44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006adc:	69da      	ldr	r2, [r3, #28]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aec:	041b      	lsls	r3, r3, #16
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006af4:	4313      	orrs	r3, r2
 8006af6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d11a      	bne.n	8006b44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	791b      	ldrb	r3, [r3, #4]
 8006b28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d161      	bne.n	8006c34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b86:	d11f      	bne.n	8006bc8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ba2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ba6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	2101      	movs	r1, #1
 8006bda:	fa01 f303 	lsl.w	r3, r1, r3
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	43db      	mvns	r3, r3
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006be8:	4013      	ands	r3, r2
 8006bea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	43db      	mvns	r3, r3
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	0159      	lsls	r1, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	440b      	add	r3, r1
 8006c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4b35      	ldr	r3, [pc, #212]	@ (8006d04 <USB_DeactivateEndpoint+0x1b0>)
 8006c2e:	4013      	ands	r3, r2
 8006c30:	600b      	str	r3, [r1, #0]
 8006c32:	e060      	b.n	8006cf6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c4a:	d11f      	bne.n	8006c8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca2:	041b      	lsls	r3, r3, #16
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cac:	4013      	ands	r3, r2
 8006cae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc6:	041b      	lsls	r3, r3, #16
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	68f9      	ldr	r1, [r7, #12]
 8006ccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	0159      	lsls	r1, r3, #5
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	440b      	add	r3, r1
 8006cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <USB_DeactivateEndpoint+0x1b4>)
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	ec337800 	.word	0xec337800
 8006d08:	eff37800 	.word	0xeff37800

08006d0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08a      	sub	sp, #40	@ 0x28
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	4613      	mov	r3, r2
 8006d18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	785b      	ldrb	r3, [r3, #1]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	f040 817f 	bne.w	800702c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d132      	bne.n	8006d9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	0151      	lsls	r1, r2, #5
 8006d48:	69fa      	ldr	r2, [r7, #28]
 8006d4a:	440a      	add	r2, r1
 8006d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d50:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d54:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d94:	0cdb      	lsrs	r3, r3, #19
 8006d96:	04db      	lsls	r3, r3, #19
 8006d98:	6113      	str	r3, [r2, #16]
 8006d9a:	e097      	b.n	8006ecc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006db6:	0cdb      	lsrs	r3, r3, #19
 8006db8:	04db      	lsls	r3, r3, #19
 8006dba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dd6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006dda:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006dde:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d11a      	bne.n	8006e1c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d903      	bls.n	8006dfa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e18:	6113      	str	r3, [r2, #16]
 8006e1a:	e044      	b.n	8006ea6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	4413      	add	r3, r2
 8006e26:	1e5a      	subs	r2, r3, #1
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e30:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	8afb      	ldrh	r3, [r7, #22]
 8006e42:	04d9      	lsls	r1, r3, #19
 8006e44:	4ba4      	ldr	r3, [pc, #656]	@ (80070d8 <USB_EPStartXfer+0x3cc>)
 8006e46:	400b      	ands	r3, r1
 8006e48:	69b9      	ldr	r1, [r7, #24]
 8006e4a:	0148      	lsls	r0, r1, #5
 8006e4c:	69f9      	ldr	r1, [r7, #28]
 8006e4e:	4401      	add	r1, r0
 8006e50:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e54:	4313      	orrs	r3, r2
 8006e56:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	791b      	ldrb	r3, [r3, #4]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d122      	bne.n	8006ea6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e7a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006e7e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	8afb      	ldrh	r3, [r7, #22]
 8006e90:	075b      	lsls	r3, r3, #29
 8006e92:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006e96:	69b9      	ldr	r1, [r7, #24]
 8006e98:	0148      	lsls	r0, r1, #5
 8006e9a:	69f9      	ldr	r1, [r7, #28]
 8006e9c:	4401      	add	r1, r0
 8006e9e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ebc:	69b9      	ldr	r1, [r7, #24]
 8006ebe:	0148      	lsls	r0, r1, #5
 8006ec0:	69f9      	ldr	r1, [r7, #28]
 8006ec2:	4401      	add	r1, r0
 8006ec4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d14b      	bne.n	8006f6a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	791b      	ldrb	r3, [r3, #4]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d128      	bne.n	8006f48 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d110      	bne.n	8006f28 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e00f      	b.n	8006f48 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f46:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	e166      	b.n	8007238 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	0151      	lsls	r1, r2, #5
 8006f7c:	69fa      	ldr	r2, [r7, #28]
 8006f7e:	440a      	add	r2, r1
 8006f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f84:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f88:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	791b      	ldrb	r3, [r3, #4]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d015      	beq.n	8006fbe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 814e 	beq.w	8007238 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	f003 030f 	and.w	r3, r3, #15
 8006fac:	2101      	movs	r1, #1
 8006fae:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb2:	69f9      	ldr	r1, [r7, #28]
 8006fb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	634b      	str	r3, [r1, #52]	@ 0x34
 8006fbc:	e13c      	b.n	8007238 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d110      	bne.n	8006ff0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fe8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e00f      	b.n	8007010 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	0151      	lsls	r1, r2, #5
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	440a      	add	r2, r1
 8007006:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800700a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800700e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	68d9      	ldr	r1, [r3, #12]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	781a      	ldrb	r2, [r3, #0]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	b298      	uxth	r0, r3
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	4603      	mov	r3, r0
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 f9b9 	bl	800739c <USB_WritePacket>
 800702a:	e105      	b.n	8007238 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	440a      	add	r2, r1
 8007042:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007046:	0cdb      	lsrs	r3, r3, #19
 8007048:	04db      	lsls	r3, r3, #19
 800704a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007066:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800706a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800706e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d132      	bne.n	80070dc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709a:	691a      	ldr	r2, [r3, #16]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070a4:	69b9      	ldr	r1, [r7, #24]
 80070a6:	0148      	lsls	r0, r1, #5
 80070a8:	69f9      	ldr	r1, [r7, #28]
 80070aa:	4401      	add	r1, r0
 80070ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80070b0:	4313      	orrs	r3, r2
 80070b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070d2:	6113      	str	r3, [r2, #16]
 80070d4:	e062      	b.n	800719c <USB_EPStartXfer+0x490>
 80070d6:	bf00      	nop
 80070d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d123      	bne.n	800712c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f0:	691a      	ldr	r2, [r3, #16]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070fa:	69b9      	ldr	r1, [r7, #24]
 80070fc:	0148      	lsls	r0, r1, #5
 80070fe:	69f9      	ldr	r1, [r7, #28]
 8007100:	4401      	add	r1, r0
 8007102:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007106:	4313      	orrs	r3, r2
 8007108:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007124:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007128:	6113      	str	r3, [r2, #16]
 800712a:	e037      	b.n	800719c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	4413      	add	r3, r2
 8007136:	1e5a      	subs	r2, r3, #1
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007140:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	8afa      	ldrh	r2, [r7, #22]
 8007148:	fb03 f202 	mul.w	r2, r3, r2
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	8afb      	ldrh	r3, [r7, #22]
 8007160:	04d9      	lsls	r1, r3, #19
 8007162:	4b38      	ldr	r3, [pc, #224]	@ (8007244 <USB_EPStartXfer+0x538>)
 8007164:	400b      	ands	r3, r1
 8007166:	69b9      	ldr	r1, [r7, #24]
 8007168:	0148      	lsls	r0, r1, #5
 800716a:	69f9      	ldr	r1, [r7, #28]
 800716c:	4401      	add	r1, r0
 800716e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007172:	4313      	orrs	r3, r2
 8007174:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800718c:	69b9      	ldr	r1, [r7, #24]
 800718e:	0148      	lsls	r0, r1, #5
 8007190:	69f9      	ldr	r1, [r7, #28]
 8007192:	4401      	add	r1, r0
 8007194:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007198:	4313      	orrs	r3, r2
 800719a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d10d      	bne.n	80071be <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d009      	beq.n	80071be <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	68d9      	ldr	r1, [r3, #12]
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ba:	460a      	mov	r2, r1
 80071bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	791b      	ldrb	r3, [r3, #4]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d128      	bne.n	8007218 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d110      	bne.n	80071f8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	0151      	lsls	r1, r2, #5
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	440a      	add	r2, r1
 80071ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	e00f      	b.n	8007218 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	440a      	add	r2, r1
 800720e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007216:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	440a      	add	r2, r1
 800722e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007232:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007236:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3720      	adds	r7, #32
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	1ff80000 	.word	0x1ff80000

08007248 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d14a      	bne.n	80072fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800727a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800727e:	f040 8086 	bne.w	800738e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	7812      	ldrb	r2, [r2, #0]
 8007296:	0151      	lsls	r1, r2, #5
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	440a      	add	r2, r1
 800729c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	7812      	ldrb	r2, [r2, #0]
 80072ba:	0151      	lsls	r1, r2, #5
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	440a      	add	r2, r1
 80072c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3301      	adds	r3, #1
 80072ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d902      	bls.n	80072e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	75fb      	strb	r3, [r7, #23]
          break;
 80072de:	e056      	b.n	800738e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072f8:	d0e7      	beq.n	80072ca <USB_EPStopXfer+0x82>
 80072fa:	e048      	b.n	800738e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007310:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007314:	d13b      	bne.n	800738e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	7812      	ldrb	r2, [r2, #0]
 800732a:	0151      	lsls	r1, r2, #5
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	440a      	add	r2, r1
 8007330:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007334:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007338:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	7812      	ldrb	r2, [r2, #0]
 800734e:	0151      	lsls	r1, r2, #5
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	440a      	add	r2, r1
 8007354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007358:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800735c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3301      	adds	r3, #1
 8007362:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f242 7210 	movw	r2, #10000	@ 0x2710
 800736a:	4293      	cmp	r3, r2
 800736c:	d902      	bls.n	8007374 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	75fb      	strb	r3, [r7, #23]
          break;
 8007372:	e00c      	b.n	800738e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800738c:	d0e7      	beq.n	800735e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007390:	4618      	mov	r0, r3
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800739c:	b480      	push	{r7}
 800739e:	b089      	sub	sp, #36	@ 0x24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	4611      	mov	r1, r2
 80073a8:	461a      	mov	r2, r3
 80073aa:	460b      	mov	r3, r1
 80073ac:	71fb      	strb	r3, [r7, #7]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d123      	bne.n	800740a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073c2:	88bb      	ldrh	r3, [r7, #4]
 80073c4:	3303      	adds	r3, #3
 80073c6:	089b      	lsrs	r3, r3, #2
 80073c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073ca:	2300      	movs	r3, #0
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	e018      	b.n	8007402 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	031a      	lsls	r2, r3, #12
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073dc:	461a      	mov	r2, r3
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	3301      	adds	r3, #1
 80073e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	3301      	adds	r3, #1
 80073ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	3301      	adds	r3, #1
 80073f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	3301      	adds	r3, #1
 80073fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	3301      	adds	r3, #1
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	429a      	cmp	r2, r3
 8007408:	d3e2      	bcc.n	80073d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3724      	adds	r7, #36	@ 0x24
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007418:	b480      	push	{r7}
 800741a:	b08b      	sub	sp, #44	@ 0x2c
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4613      	mov	r3, r2
 8007424:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800742e:	88fb      	ldrh	r3, [r7, #6]
 8007430:	089b      	lsrs	r3, r3, #2
 8007432:	b29b      	uxth	r3, r3
 8007434:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007436:	88fb      	ldrh	r3, [r7, #6]
 8007438:	f003 0303 	and.w	r3, r3, #3
 800743c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800743e:	2300      	movs	r3, #0
 8007440:	623b      	str	r3, [r7, #32]
 8007442:	e014      	b.n	800746e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007452:	3301      	adds	r3, #1
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	3301      	adds	r3, #1
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	3301      	adds	r3, #1
 8007460:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	3301      	adds	r3, #1
 8007466:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	3301      	adds	r3, #1
 800746c:	623b      	str	r3, [r7, #32]
 800746e:	6a3a      	ldr	r2, [r7, #32]
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	429a      	cmp	r2, r3
 8007474:	d3e6      	bcc.n	8007444 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007476:	8bfb      	ldrh	r3, [r7, #30]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01e      	beq.n	80074ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007486:	461a      	mov	r2, r3
 8007488:	f107 0310 	add.w	r3, r7, #16
 800748c:	6812      	ldr	r2, [r2, #0]
 800748e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	b2db      	uxtb	r3, r3
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	fa22 f303 	lsr.w	r3, r2, r3
 800749c:	b2da      	uxtb	r2, r3
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	701a      	strb	r2, [r3, #0]
      i++;
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	3301      	adds	r3, #1
 80074a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80074a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074aa:	3301      	adds	r3, #1
 80074ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80074ae:	8bfb      	ldrh	r3, [r7, #30]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074b4:	8bfb      	ldrh	r3, [r7, #30]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1ea      	bne.n	8007490 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80074bc:	4618      	mov	r0, r3
 80074be:	372c      	adds	r7, #44	@ 0x2c
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	785b      	ldrb	r3, [r3, #1]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d12c      	bne.n	800753e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	db12      	blt.n	800751c <USB_EPSetStall+0x54>
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00f      	beq.n	800751c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	0151      	lsls	r1, r2, #5
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	440a      	add	r2, r1
 8007512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007516:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800751a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	440a      	add	r2, r1
 8007532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007536:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	e02b      	b.n	8007596 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	db12      	blt.n	8007576 <USB_EPSetStall+0xae>
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00f      	beq.n	8007576 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007570:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007574:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	0151      	lsls	r1, r2, #5
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	440a      	add	r2, r1
 800758c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007590:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007594:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d128      	bne.n	8007612 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	0151      	lsls	r1, r2, #5
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	440a      	add	r2, r1
 80075d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	791b      	ldrb	r3, [r3, #4]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d003      	beq.n	80075f0 <USB_EPClearStall+0x4c>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	791b      	ldrb	r3, [r3, #4]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d138      	bne.n	8007662 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	440a      	add	r2, r1
 8007606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800760a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	e027      	b.n	8007662 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	0151      	lsls	r1, r2, #5
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	440a      	add	r2, r1
 8007628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800762c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007630:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	791b      	ldrb	r3, [r3, #4]
 8007636:	2b03      	cmp	r3, #3
 8007638:	d003      	beq.n	8007642 <USB_EPClearStall+0x9e>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	791b      	ldrb	r3, [r3, #4]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d10f      	bne.n	8007662 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	0151      	lsls	r1, r2, #5
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	440a      	add	r2, r1
 8007658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800765c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007660:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800768e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007692:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	78fb      	ldrb	r3, [r7, #3]
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80076a4:	68f9      	ldr	r1, [r7, #12]
 80076a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076aa:	4313      	orrs	r3, r2
 80076ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076d6:	f023 0303 	bic.w	r3, r3, #3
 80076da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ea:	f023 0302 	bic.w	r3, r3, #2
 80076ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80076fe:	b480      	push	{r7}
 8007700:	b085      	sub	sp, #20
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007718:	f023 0303 	bic.w	r3, r3, #3
 800771c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800772c:	f043 0302 	orr.w	r3, r3, #2
 8007730:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4013      	ands	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007758:	68fb      	ldr	r3, [r7, #12]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	4013      	ands	r3, r2
 8007788:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	0c1b      	lsrs	r3, r3, #16
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	4013      	ands	r3, r2
 80077bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	b29b      	uxth	r3, r3
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	460b      	mov	r3, r1
 80077d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	4013      	ands	r3, r2
 80077fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077fc:	68bb      	ldr	r3, [r7, #8]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800780a:	b480      	push	{r7}
 800780c:	b087      	sub	sp, #28
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800782a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800782c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	f003 030f 	and.w	r3, r3, #15
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	fa22 f303 	lsr.w	r3, r2, r3
 800783a:	01db      	lsls	r3, r3, #7
 800783c:	b2db      	uxtb	r3, r3
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	4313      	orrs	r3, r2
 8007842:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4013      	ands	r3, r2
 8007856:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007858:	68bb      	ldr	r3, [r7, #8]
}
 800785a:	4618      	mov	r0, r3
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	f003 0301 	and.w	r3, r3, #1
}
 8007876:	4618      	mov	r0, r3
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007882:	b480      	push	{r7}
 8007884:	b085      	sub	sp, #20
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800789c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80078a0:	f023 0307 	bic.w	r3, r3, #7
 80078a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	460b      	mov	r3, r1
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	333c      	adds	r3, #60	@ 0x3c
 80078de:	3304      	adds	r3, #4
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	4a26      	ldr	r2, [pc, #152]	@ (8007980 <USB_EP0_OutStart+0xb8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d90a      	bls.n	8007902 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078fc:	d101      	bne.n	8007902 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e037      	b.n	8007972 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007908:	461a      	mov	r2, r3
 800790a:	2300      	movs	r3, #0
 800790c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800791c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007930:	f043 0318 	orr.w	r3, r3, #24
 8007934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007944:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007948:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800794a:	7afb      	ldrb	r3, [r7, #11]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d10f      	bne.n	8007970 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800796a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800796e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	4f54300a 	.word	0x4f54300a

08007984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3301      	adds	r3, #1
 8007994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800799c:	d901      	bls.n	80079a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e01b      	b.n	80079da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	daf2      	bge.n	8007990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f043 0201 	orr.w	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3301      	adds	r3, #1
 80079be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079c6:	d901      	bls.n	80079cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e006      	b.n	80079da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d0f0      	beq.n	80079ba <USB_CoreReset+0x36>

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079f4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80079f8:	f002 fc3c 	bl	800a274 <USBD_static_malloc>
 80079fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d109      	bne.n	8007a18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	32b0      	adds	r2, #176	@ 0xb0
 8007a0e:	2100      	movs	r1, #0
 8007a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a14:	2302      	movs	r3, #2
 8007a16:	e0d4      	b.n	8007bc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007a18:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f002 fc6c 	bl	800a2fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	32b0      	adds	r2, #176	@ 0xb0
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	32b0      	adds	r2, #176	@ 0xb0
 8007a3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	7c1b      	ldrb	r3, [r3, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d138      	bne.n	8007ac2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a50:	4b5e      	ldr	r3, [pc, #376]	@ (8007bcc <USBD_CDC_Init+0x1e4>)
 8007a52:	7819      	ldrb	r1, [r3, #0]
 8007a54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a58:	2202      	movs	r2, #2
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f002 fae7 	bl	800a02e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a60:	4b5a      	ldr	r3, [pc, #360]	@ (8007bcc <USBD_CDC_Init+0x1e4>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f003 020f 	and.w	r2, r3, #15
 8007a68:	6879      	ldr	r1, [r7, #4]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	440b      	add	r3, r1
 8007a74:	3324      	adds	r3, #36	@ 0x24
 8007a76:	2201      	movs	r2, #1
 8007a78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a7a:	4b55      	ldr	r3, [pc, #340]	@ (8007bd0 <USBD_CDC_Init+0x1e8>)
 8007a7c:	7819      	ldrb	r1, [r3, #0]
 8007a7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a82:	2202      	movs	r2, #2
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f002 fad2 	bl	800a02e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a8a:	4b51      	ldr	r3, [pc, #324]	@ (8007bd0 <USBD_CDC_Init+0x1e8>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	f003 020f 	and.w	r2, r3, #15
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	4613      	mov	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8007bd4 <USBD_CDC_Init+0x1ec>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	f003 020f 	and.w	r2, r3, #15
 8007aae:	6879      	ldr	r1, [r7, #4]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	440b      	add	r3, r1
 8007aba:	3326      	adds	r3, #38	@ 0x26
 8007abc:	2210      	movs	r2, #16
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	e035      	b.n	8007b2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ac2:	4b42      	ldr	r3, [pc, #264]	@ (8007bcc <USBD_CDC_Init+0x1e4>)
 8007ac4:	7819      	ldrb	r1, [r3, #0]
 8007ac6:	2340      	movs	r3, #64	@ 0x40
 8007ac8:	2202      	movs	r2, #2
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f002 faaf 	bl	800a02e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8007bcc <USBD_CDC_Init+0x1e4>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	f003 020f 	and.w	r2, r3, #15
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	3324      	adds	r3, #36	@ 0x24
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007aea:	4b39      	ldr	r3, [pc, #228]	@ (8007bd0 <USBD_CDC_Init+0x1e8>)
 8007aec:	7819      	ldrb	r1, [r3, #0]
 8007aee:	2340      	movs	r3, #64	@ 0x40
 8007af0:	2202      	movs	r2, #2
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f002 fa9b 	bl	800a02e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007af8:	4b35      	ldr	r3, [pc, #212]	@ (8007bd0 <USBD_CDC_Init+0x1e8>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	f003 020f 	and.w	r2, r3, #15
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b10:	2201      	movs	r2, #1
 8007b12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b14:	4b2f      	ldr	r3, [pc, #188]	@ (8007bd4 <USBD_CDC_Init+0x1ec>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	f003 020f 	and.w	r2, r3, #15
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	3326      	adds	r3, #38	@ 0x26
 8007b2a:	2210      	movs	r2, #16
 8007b2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b2e:	4b29      	ldr	r3, [pc, #164]	@ (8007bd4 <USBD_CDC_Init+0x1ec>)
 8007b30:	7819      	ldrb	r1, [r3, #0]
 8007b32:	2308      	movs	r3, #8
 8007b34:	2203      	movs	r2, #3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f002 fa79 	bl	800a02e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007b3c:	4b25      	ldr	r3, [pc, #148]	@ (8007bd4 <USBD_CDC_Init+0x1ec>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	f003 020f 	and.w	r2, r3, #15
 8007b44:	6879      	ldr	r1, [r7, #4]
 8007b46:	4613      	mov	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	440b      	add	r3, r1
 8007b50:	3324      	adds	r3, #36	@ 0x24
 8007b52:	2201      	movs	r2, #1
 8007b54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	33b0      	adds	r3, #176	@ 0xb0
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e018      	b.n	8007bc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	7c1b      	ldrb	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b98:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd0 <USBD_CDC_Init+0x1e8>)
 8007b9a:	7819      	ldrb	r1, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ba2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f002 fb30 	bl	800a20c <USBD_LL_PrepareReceive>
 8007bac:	e008      	b.n	8007bc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bae:	4b08      	ldr	r3, [pc, #32]	@ (8007bd0 <USBD_CDC_Init+0x1e8>)
 8007bb0:	7819      	ldrb	r1, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bb8:	2340      	movs	r3, #64	@ 0x40
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f002 fb26 	bl	800a20c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000093 	.word	0x20000093
 8007bd0:	20000094 	.word	0x20000094
 8007bd4:	20000095 	.word	0x20000095

08007bd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007be4:	4b3a      	ldr	r3, [pc, #232]	@ (8007cd0 <USBD_CDC_DeInit+0xf8>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f002 fa45 	bl	800a07a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007bf0:	4b37      	ldr	r3, [pc, #220]	@ (8007cd0 <USBD_CDC_DeInit+0xf8>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	f003 020f 	and.w	r2, r3, #15
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	3324      	adds	r3, #36	@ 0x24
 8007c06:	2200      	movs	r2, #0
 8007c08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c0a:	4b32      	ldr	r3, [pc, #200]	@ (8007cd4 <USBD_CDC_DeInit+0xfc>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f002 fa32 	bl	800a07a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007c16:	4b2f      	ldr	r3, [pc, #188]	@ (8007cd4 <USBD_CDC_DeInit+0xfc>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	f003 020f 	and.w	r2, r3, #15
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c2e:	2200      	movs	r2, #0
 8007c30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007c32:	4b29      	ldr	r3, [pc, #164]	@ (8007cd8 <USBD_CDC_DeInit+0x100>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f002 fa1e 	bl	800a07a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c3e:	4b26      	ldr	r3, [pc, #152]	@ (8007cd8 <USBD_CDC_DeInit+0x100>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	f003 020f 	and.w	r2, r3, #15
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	3324      	adds	r3, #36	@ 0x24
 8007c54:	2200      	movs	r2, #0
 8007c56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007c58:	4b1f      	ldr	r3, [pc, #124]	@ (8007cd8 <USBD_CDC_DeInit+0x100>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	f003 020f 	and.w	r2, r3, #15
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	3326      	adds	r3, #38	@ 0x26
 8007c6e:	2200      	movs	r2, #0
 8007c70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	32b0      	adds	r2, #176	@ 0xb0
 8007c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01f      	beq.n	8007cc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	33b0      	adds	r3, #176	@ 0xb0
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	32b0      	adds	r2, #176	@ 0xb0
 8007ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f002 faf2 	bl	800a290 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	32b0      	adds	r2, #176	@ 0xb0
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20000093 	.word	0x20000093
 8007cd4:	20000094 	.word	0x20000094
 8007cd8:	20000095 	.word	0x20000095

08007cdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	32b0      	adds	r2, #176	@ 0xb0
 8007cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e0bf      	b.n	8007e8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d050      	beq.n	8007dba <USBD_CDC_Setup+0xde>
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	f040 80af 	bne.w	8007e7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	88db      	ldrh	r3, [r3, #6]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d03a      	beq.n	8007d9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	b25b      	sxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	da1b      	bge.n	8007d68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	33b0      	adds	r3, #176	@ 0xb0
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	88d2      	ldrh	r2, [r2, #6]
 8007d4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	88db      	ldrh	r3, [r3, #6]
 8007d52:	2b07      	cmp	r3, #7
 8007d54:	bf28      	it	cs
 8007d56:	2307      	movcs	r3, #7
 8007d58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	89fa      	ldrh	r2, [r7, #14]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 fd53 	bl	800980c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007d66:	e090      	b.n	8007e8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	785a      	ldrb	r2, [r3, #1]
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	88db      	ldrh	r3, [r3, #6]
 8007d76:	2b3f      	cmp	r3, #63	@ 0x3f
 8007d78:	d803      	bhi.n	8007d82 <USBD_CDC_Setup+0xa6>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	88db      	ldrh	r3, [r3, #6]
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	e000      	b.n	8007d84 <USBD_CDC_Setup+0xa8>
 8007d82:	2240      	movs	r2, #64	@ 0x40
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007d8a:	6939      	ldr	r1, [r7, #16]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007d92:	461a      	mov	r2, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 fd65 	bl	8009864 <USBD_CtlPrepareRx>
      break;
 8007d9a:	e076      	b.n	8007e8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	33b0      	adds	r3, #176	@ 0xb0
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	7850      	ldrb	r0, [r2, #1]
 8007db2:	2200      	movs	r2, #0
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	4798      	blx	r3
      break;
 8007db8:	e067      	b.n	8007e8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	2b0b      	cmp	r3, #11
 8007dc0:	d851      	bhi.n	8007e66 <USBD_CDC_Setup+0x18a>
 8007dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc8 <USBD_CDC_Setup+0xec>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007df9 	.word	0x08007df9
 8007dcc:	08007e75 	.word	0x08007e75
 8007dd0:	08007e67 	.word	0x08007e67
 8007dd4:	08007e67 	.word	0x08007e67
 8007dd8:	08007e67 	.word	0x08007e67
 8007ddc:	08007e67 	.word	0x08007e67
 8007de0:	08007e67 	.word	0x08007e67
 8007de4:	08007e67 	.word	0x08007e67
 8007de8:	08007e67 	.word	0x08007e67
 8007dec:	08007e67 	.word	0x08007e67
 8007df0:	08007e23 	.word	0x08007e23
 8007df4:	08007e4d 	.word	0x08007e4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d107      	bne.n	8007e14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e04:	f107 030a 	add.w	r3, r7, #10
 8007e08:	2202      	movs	r2, #2
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 fcfd 	bl	800980c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e12:	e032      	b.n	8007e7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 fc7b 	bl	8009712 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	75fb      	strb	r3, [r7, #23]
          break;
 8007e20:	e02b      	b.n	8007e7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d107      	bne.n	8007e3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e2e:	f107 030d 	add.w	r3, r7, #13
 8007e32:	2201      	movs	r2, #1
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 fce8 	bl	800980c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e3c:	e01d      	b.n	8007e7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 fc66 	bl	8009712 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e46:	2303      	movs	r3, #3
 8007e48:	75fb      	strb	r3, [r7, #23]
          break;
 8007e4a:	e016      	b.n	8007e7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d00f      	beq.n	8007e78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 fc59 	bl	8009712 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e64:	e008      	b.n	8007e78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 fc52 	bl	8009712 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	75fb      	strb	r3, [r7, #23]
          break;
 8007e72:	e002      	b.n	8007e7a <USBD_CDC_Setup+0x19e>
          break;
 8007e74:	bf00      	nop
 8007e76:	e008      	b.n	8007e8a <USBD_CDC_Setup+0x1ae>
          break;
 8007e78:	bf00      	nop
      }
      break;
 8007e7a:	e006      	b.n	8007e8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f001 fc47 	bl	8009712 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e84:	2303      	movs	r3, #3
 8007e86:	75fb      	strb	r3, [r7, #23]
      break;
 8007e88:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3718      	adds	r7, #24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ea6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	32b0      	adds	r2, #176	@ 0xb0
 8007eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e065      	b.n	8007f8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	32b0      	adds	r2, #176	@ 0xb0
 8007ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ecc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	f003 020f 	and.w	r2, r3, #15
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	440b      	add	r3, r1
 8007ee0:	3318      	adds	r3, #24
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d02f      	beq.n	8007f48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007ee8:	78fb      	ldrb	r3, [r7, #3]
 8007eea:	f003 020f 	and.w	r2, r3, #15
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	440b      	add	r3, r1
 8007efa:	3318      	adds	r3, #24
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	f003 010f 	and.w	r1, r3, #15
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	460b      	mov	r3, r1
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	440b      	add	r3, r1
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4403      	add	r3, r0
 8007f10:	331c      	adds	r3, #28
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f18:	fb01 f303 	mul.w	r3, r1, r3
 8007f1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d112      	bne.n	8007f48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007f22:	78fb      	ldrb	r3, [r7, #3]
 8007f24:	f003 020f 	and.w	r2, r3, #15
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	3318      	adds	r3, #24
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f3a:	78f9      	ldrb	r1, [r7, #3]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	2200      	movs	r2, #0
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f002 f942 	bl	800a1ca <USBD_LL_Transmit>
 8007f46:	e01f      	b.n	8007f88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	33b0      	adds	r3, #176	@ 0xb0
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d010      	beq.n	8007f88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	33b0      	adds	r3, #176	@ 0xb0
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	32b0      	adds	r2, #176	@ 0xb0
 8007fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	32b0      	adds	r2, #176	@ 0xb0
 8007fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e01a      	b.n	8007ffa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f002 f940 	bl	800a24e <USBD_LL_GetRxDataSize>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	33b0      	adds	r3, #176	@ 0xb0
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	32b0      	adds	r2, #176	@ 0xb0
 8008014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008018:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008020:	2303      	movs	r3, #3
 8008022:	e024      	b.n	800806e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	33b0      	adds	r3, #176	@ 0xb0
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d019      	beq.n	800806c <USBD_CDC_EP0_RxReady+0x6a>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800803e:	2bff      	cmp	r3, #255	@ 0xff
 8008040:	d014      	beq.n	800806c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	33b0      	adds	r3, #176	@ 0xb0
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800805a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008062:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	22ff      	movs	r2, #255	@ 0xff
 8008068:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008080:	2182      	movs	r1, #130	@ 0x82
 8008082:	4818      	ldr	r0, [pc, #96]	@ (80080e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008084:	f000 fd0f 	bl	8008aa6 <USBD_GetEpDesc>
 8008088:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800808a:	2101      	movs	r1, #1
 800808c:	4815      	ldr	r0, [pc, #84]	@ (80080e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800808e:	f000 fd0a 	bl	8008aa6 <USBD_GetEpDesc>
 8008092:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008094:	2181      	movs	r1, #129	@ 0x81
 8008096:	4813      	ldr	r0, [pc, #76]	@ (80080e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008098:	f000 fd05 	bl	8008aa6 <USBD_GetEpDesc>
 800809c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2210      	movs	r2, #16
 80080a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d006      	beq.n	80080be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080b8:	711a      	strb	r2, [r3, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d006      	beq.n	80080d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080cc:	711a      	strb	r2, [r3, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2243      	movs	r2, #67	@ 0x43
 80080d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080d8:	4b02      	ldr	r3, [pc, #8]	@ (80080e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20000050 	.word	0x20000050

080080e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080f0:	2182      	movs	r1, #130	@ 0x82
 80080f2:	4818      	ldr	r0, [pc, #96]	@ (8008154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080f4:	f000 fcd7 	bl	8008aa6 <USBD_GetEpDesc>
 80080f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080fa:	2101      	movs	r1, #1
 80080fc:	4815      	ldr	r0, [pc, #84]	@ (8008154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080fe:	f000 fcd2 	bl	8008aa6 <USBD_GetEpDesc>
 8008102:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008104:	2181      	movs	r1, #129	@ 0x81
 8008106:	4813      	ldr	r0, [pc, #76]	@ (8008154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008108:	f000 fccd 	bl	8008aa6 <USBD_GetEpDesc>
 800810c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2210      	movs	r2, #16
 8008118:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d006      	beq.n	800812e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2200      	movs	r2, #0
 8008124:	711a      	strb	r2, [r3, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f042 0202 	orr.w	r2, r2, #2
 800812c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d006      	beq.n	8008142 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	711a      	strb	r2, [r3, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f042 0202 	orr.w	r2, r2, #2
 8008140:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2243      	movs	r2, #67	@ 0x43
 8008146:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008148:	4b02      	ldr	r3, [pc, #8]	@ (8008154 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000050 	.word	0x20000050

08008158 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008160:	2182      	movs	r1, #130	@ 0x82
 8008162:	4818      	ldr	r0, [pc, #96]	@ (80081c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008164:	f000 fc9f 	bl	8008aa6 <USBD_GetEpDesc>
 8008168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800816a:	2101      	movs	r1, #1
 800816c:	4815      	ldr	r0, [pc, #84]	@ (80081c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800816e:	f000 fc9a 	bl	8008aa6 <USBD_GetEpDesc>
 8008172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008174:	2181      	movs	r1, #129	@ 0x81
 8008176:	4813      	ldr	r0, [pc, #76]	@ (80081c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008178:	f000 fc95 	bl	8008aa6 <USBD_GetEpDesc>
 800817c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2210      	movs	r2, #16
 8008188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d006      	beq.n	800819e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	2200      	movs	r2, #0
 8008194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008198:	711a      	strb	r2, [r3, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d006      	beq.n	80081b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081ac:	711a      	strb	r2, [r3, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2243      	movs	r2, #67	@ 0x43
 80081b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081b8:	4b02      	ldr	r3, [pc, #8]	@ (80081c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000050 	.word	0x20000050

080081c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	220a      	movs	r2, #10
 80081d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80081d6:	4b03      	ldr	r3, [pc, #12]	@ (80081e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	2000000c 	.word	0x2000000c

080081e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e009      	b.n	8008210 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	33b0      	adds	r3, #176	@ 0xb0
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	32b0      	adds	r2, #176	@ 0xb0
 8008232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008236:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800823e:	2303      	movs	r3, #3
 8008240:	e008      	b.n	8008254 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	32b0      	adds	r2, #176	@ 0xb0
 8008274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008278:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008280:	2303      	movs	r3, #3
 8008282:	e004      	b.n	800828e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	32b0      	adds	r2, #176	@ 0xb0
 80082ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	32b0      	adds	r2, #176	@ 0xb0
 80082be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e018      	b.n	80082fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7c1b      	ldrb	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008304 <USBD_CDC_ReceivePacket+0x68>)
 80082d4:	7819      	ldrb	r1, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 ff93 	bl	800a20c <USBD_LL_PrepareReceive>
 80082e6:	e008      	b.n	80082fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082e8:	4b06      	ldr	r3, [pc, #24]	@ (8008304 <USBD_CDC_ReceivePacket+0x68>)
 80082ea:	7819      	ldrb	r1, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082f2:	2340      	movs	r3, #64	@ 0x40
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 ff89 	bl	800a20c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	20000094 	.word	0x20000094

08008308 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	4613      	mov	r3, r2
 8008314:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800831c:	2303      	movs	r3, #3
 800831e:	e01f      	b.n	8008360 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	79fa      	ldrb	r2, [r7, #7]
 8008352:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f001 fe03 	bl	8009f60 <USBD_LL_Init>
 800835a:	4603      	mov	r3, r0
 800835c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800835e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800837c:	2303      	movs	r3, #3
 800837e:	e025      	b.n	80083cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	32ae      	adds	r2, #174	@ 0xae
 8008392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00f      	beq.n	80083bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	32ae      	adds	r2, #174	@ 0xae
 80083a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ac:	f107 020e 	add.w	r2, r7, #14
 80083b0:	4610      	mov	r0, r2
 80083b2:	4798      	blx	r3
 80083b4:	4602      	mov	r2, r0
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 fe0b 	bl	8009ff8 <USBD_LL_Start>
 80083e2:	4603      	mov	r3, r0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008418:	2b00      	cmp	r3, #0
 800841a:	d009      	beq.n	8008430 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	78fa      	ldrb	r2, [r7, #3]
 8008426:	4611      	mov	r1, r2
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	4798      	blx	r3
 800842c:	4603      	mov	r3, r0
 800842e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008430:	7bfb      	ldrb	r3, [r7, #15]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	460b      	mov	r3, r1
 8008444:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	4611      	mov	r1, r2
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008460:	2303      	movs	r3, #3
 8008462:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f001 f90c 	bl	800969e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008494:	461a      	mov	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084a2:	f003 031f 	and.w	r3, r3, #31
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d01a      	beq.n	80084e0 <USBD_LL_SetupStage+0x72>
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d822      	bhi.n	80084f4 <USBD_LL_SetupStage+0x86>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <USBD_LL_SetupStage+0x4a>
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d00a      	beq.n	80084cc <USBD_LL_SetupStage+0x5e>
 80084b6:	e01d      	b.n	80084f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fb63 	bl	8008b8c <USBD_StdDevReq>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73fb      	strb	r3, [r7, #15]
      break;
 80084ca:	e020      	b.n	800850e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fbcb 	bl	8008c70 <USBD_StdItfReq>
 80084da:	4603      	mov	r3, r0
 80084dc:	73fb      	strb	r3, [r7, #15]
      break;
 80084de:	e016      	b.n	800850e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fc2d 	bl	8008d48 <USBD_StdEPReq>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73fb      	strb	r3, [r7, #15]
      break;
 80084f2:	e00c      	b.n	800850e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 fdd8 	bl	800a0b8 <USBD_LL_StallEP>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]
      break;
 800850c:	bf00      	nop
  }

  return ret;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	460b      	mov	r3, r1
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800852a:	7afb      	ldrb	r3, [r7, #11]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d16e      	bne.n	800860e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008536:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800853e:	2b03      	cmp	r3, #3
 8008540:	f040 8098 	bne.w	8008674 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	429a      	cmp	r2, r3
 800854e:	d913      	bls.n	8008578 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	1ad2      	subs	r2, r2, r3
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	4293      	cmp	r3, r2
 8008568:	bf28      	it	cs
 800856a:	4613      	movcs	r3, r2
 800856c:	461a      	mov	r2, r3
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f001 f994 	bl	800989e <USBD_CtlContinueRx>
 8008576:	e07d      	b.n	8008674 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800857e:	f003 031f 	and.w	r3, r3, #31
 8008582:	2b02      	cmp	r3, #2
 8008584:	d014      	beq.n	80085b0 <USBD_LL_DataOutStage+0x98>
 8008586:	2b02      	cmp	r3, #2
 8008588:	d81d      	bhi.n	80085c6 <USBD_LL_DataOutStage+0xae>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <USBD_LL_DataOutStage+0x7c>
 800858e:	2b01      	cmp	r3, #1
 8008590:	d003      	beq.n	800859a <USBD_LL_DataOutStage+0x82>
 8008592:	e018      	b.n	80085c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008594:	2300      	movs	r3, #0
 8008596:	75bb      	strb	r3, [r7, #22]
            break;
 8008598:	e018      	b.n	80085cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	4619      	mov	r1, r3
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 fa64 	bl	8008a72 <USBD_CoreFindIF>
 80085aa:	4603      	mov	r3, r0
 80085ac:	75bb      	strb	r3, [r7, #22]
            break;
 80085ae:	e00d      	b.n	80085cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	4619      	mov	r1, r3
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 fa66 	bl	8008a8c <USBD_CoreFindEP>
 80085c0:	4603      	mov	r3, r0
 80085c2:	75bb      	strb	r3, [r7, #22]
            break;
 80085c4:	e002      	b.n	80085cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	75bb      	strb	r3, [r7, #22]
            break;
 80085ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80085cc:	7dbb      	ldrb	r3, [r7, #22]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d119      	bne.n	8008606 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d113      	bne.n	8008606 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80085de:	7dba      	ldrb	r2, [r7, #22]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	32ae      	adds	r2, #174	@ 0xae
 80085e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00b      	beq.n	8008606 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80085ee:	7dba      	ldrb	r2, [r7, #22]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80085f6:	7dba      	ldrb	r2, [r7, #22]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	32ae      	adds	r2, #174	@ 0xae
 80085fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f001 f95a 	bl	80098c0 <USBD_CtlSendStatus>
 800860c:	e032      	b.n	8008674 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800860e:	7afb      	ldrb	r3, [r7, #11]
 8008610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008614:	b2db      	uxtb	r3, r3
 8008616:	4619      	mov	r1, r3
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 fa37 	bl	8008a8c <USBD_CoreFindEP>
 800861e:	4603      	mov	r3, r0
 8008620:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008622:	7dbb      	ldrb	r3, [r7, #22]
 8008624:	2bff      	cmp	r3, #255	@ 0xff
 8008626:	d025      	beq.n	8008674 <USBD_LL_DataOutStage+0x15c>
 8008628:	7dbb      	ldrb	r3, [r7, #22]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d122      	bne.n	8008674 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b03      	cmp	r3, #3
 8008638:	d117      	bne.n	800866a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800863a:	7dba      	ldrb	r2, [r7, #22]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	32ae      	adds	r2, #174	@ 0xae
 8008640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00f      	beq.n	800866a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800864a:	7dba      	ldrb	r2, [r7, #22]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008652:	7dba      	ldrb	r2, [r7, #22]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	32ae      	adds	r2, #174	@ 0xae
 8008658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	7afa      	ldrb	r2, [r7, #11]
 8008660:	4611      	mov	r1, r2
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	4798      	blx	r3
 8008666:	4603      	mov	r3, r0
 8008668:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	e000      	b.n	8008676 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b086      	sub	sp, #24
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	460b      	mov	r3, r1
 8008688:	607a      	str	r2, [r7, #4]
 800868a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800868c:	7afb      	ldrb	r3, [r7, #11]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d16f      	bne.n	8008772 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3314      	adds	r3, #20
 8008696:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d15a      	bne.n	8008758 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d914      	bls.n	80086d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	689a      	ldr	r2, [r3, #8]
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	1ad2      	subs	r2, r2, r3
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	461a      	mov	r2, r3
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f001 f8bc 	bl	8009842 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086ca:	2300      	movs	r3, #0
 80086cc:	2200      	movs	r2, #0
 80086ce:	2100      	movs	r1, #0
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f001 fd9b 	bl	800a20c <USBD_LL_PrepareReceive>
 80086d6:	e03f      	b.n	8008758 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d11c      	bne.n	800871e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d316      	bcc.n	800871e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d20f      	bcs.n	800871e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086fe:	2200      	movs	r2, #0
 8008700:	2100      	movs	r1, #0
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f001 f89d 	bl	8009842 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008710:	2300      	movs	r3, #0
 8008712:	2200      	movs	r2, #0
 8008714:	2100      	movs	r1, #0
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f001 fd78 	bl	800a20c <USBD_LL_PrepareReceive>
 800871c:	e01c      	b.n	8008758 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b03      	cmp	r3, #3
 8008728:	d10f      	bne.n	800874a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d009      	beq.n	800874a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800874a:	2180      	movs	r1, #128	@ 0x80
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f001 fcb3 	bl	800a0b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f001 f8c7 	bl	80098e6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d03a      	beq.n	80087d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff fe42 	bl	80083ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008770:	e032      	b.n	80087d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008778:	b2db      	uxtb	r3, r3
 800877a:	4619      	mov	r1, r3
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 f985 	bl	8008a8c <USBD_CoreFindEP>
 8008782:	4603      	mov	r3, r0
 8008784:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	2bff      	cmp	r3, #255	@ 0xff
 800878a:	d025      	beq.n	80087d8 <USBD_LL_DataInStage+0x15a>
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d122      	bne.n	80087d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b03      	cmp	r3, #3
 800879c:	d11c      	bne.n	80087d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800879e:	7dfa      	ldrb	r2, [r7, #23]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	32ae      	adds	r2, #174	@ 0xae
 80087a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d014      	beq.n	80087d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80087ae:	7dfa      	ldrb	r2, [r7, #23]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80087b6:	7dfa      	ldrb	r2, [r7, #23]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	32ae      	adds	r2, #174	@ 0xae
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	7afa      	ldrb	r2, [r7, #11]
 80087c4:	4611      	mov	r1, r2
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	4798      	blx	r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80087ce:	7dbb      	ldrb	r3, [r7, #22]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80087d4:	7dbb      	ldrb	r3, [r7, #22]
 80087d6:	e000      	b.n	80087da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d014      	beq.n	8008848 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00e      	beq.n	8008848 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6852      	ldr	r2, [r2, #4]
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	4611      	mov	r1, r2
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008844:	2303      	movs	r3, #3
 8008846:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008848:	2340      	movs	r3, #64	@ 0x40
 800884a:	2200      	movs	r2, #0
 800884c:	2100      	movs	r1, #0
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 fbed 	bl	800a02e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2240      	movs	r2, #64	@ 0x40
 8008860:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008864:	2340      	movs	r3, #64	@ 0x40
 8008866:	2200      	movs	r2, #0
 8008868:	2180      	movs	r1, #128	@ 0x80
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fbdf 	bl	800a02e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2240      	movs	r2, #64	@ 0x40
 800887a:	621a      	str	r2, [r3, #32]

  return ret;
 800887c:	7bfb      	ldrb	r3, [r7, #15]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	460b      	mov	r3, r1
 8008890:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d006      	beq.n	80088c8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2204      	movs	r2, #4
 80088cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	d106      	bne.n	8008900 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b03      	cmp	r3, #3
 8008920:	d110      	bne.n	8008944 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	32ae      	adds	r2, #174	@ 0xae
 8008964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800896c:	2303      	movs	r3, #3
 800896e:	e01c      	b.n	80089aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b03      	cmp	r3, #3
 800897a:	d115      	bne.n	80089a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	32ae      	adds	r2, #174	@ 0xae
 8008986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	32ae      	adds	r2, #174	@ 0xae
 800899a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	78fa      	ldrb	r2, [r7, #3]
 80089a2:	4611      	mov	r1, r2
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	32ae      	adds	r2, #174	@ 0xae
 80089c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e01c      	b.n	8008a0e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d115      	bne.n	8008a0c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	32ae      	adds	r2, #174	@ 0xae
 80089ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	32ae      	adds	r2, #174	@ 0xae
 80089fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	4611      	mov	r1, r2
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00e      	beq.n	8008a68 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6852      	ldr	r2, [r2, #4]
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	4611      	mov	r1, r2
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	4798      	blx	r3
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008a64:	2303      	movs	r3, #3
 8008a66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a7e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a98:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b086      	sub	sp, #24
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	885b      	ldrh	r3, [r3, #2]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	7812      	ldrb	r2, [r2, #0]
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d91f      	bls.n	8008b0c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008ad2:	e013      	b.n	8008afc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008ad4:	f107 030a 	add.w	r3, r7, #10
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6978      	ldr	r0, [r7, #20]
 8008adc:	f000 f81b 	bl	8008b16 <USBD_GetNextDesc>
 8008ae0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	2b05      	cmp	r3, #5
 8008ae8:	d108      	bne.n	8008afc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	789b      	ldrb	r3, [r3, #2]
 8008af2:	78fa      	ldrb	r2, [r7, #3]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d008      	beq.n	8008b0a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008af8:	2300      	movs	r3, #0
 8008afa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	885b      	ldrh	r3, [r3, #2]
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	897b      	ldrh	r3, [r7, #10]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d8e5      	bhi.n	8008ad4 <USBD_GetEpDesc+0x2e>
 8008b08:	e000      	b.n	8008b0c <USBD_GetEpDesc+0x66>
          break;
 8008b0a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008b0c:	693b      	ldr	r3, [r7, #16]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b085      	sub	sp, #20
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	7812      	ldrb	r2, [r2, #0]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b40:	68fb      	ldr	r3, [r7, #12]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b087      	sub	sp, #28
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	3301      	adds	r3, #1
 8008b64:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008b6c:	8a3b      	ldrh	r3, [r7, #16]
 8008b6e:	021b      	lsls	r3, r3, #8
 8008b70:	b21a      	sxth	r2, r3
 8008b72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	b21b      	sxth	r3, r3
 8008b7a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b7c:	89fb      	ldrh	r3, [r7, #14]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	371c      	adds	r7, #28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
	...

08008b8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ba2:	2b40      	cmp	r3, #64	@ 0x40
 8008ba4:	d005      	beq.n	8008bb2 <USBD_StdDevReq+0x26>
 8008ba6:	2b40      	cmp	r3, #64	@ 0x40
 8008ba8:	d857      	bhi.n	8008c5a <USBD_StdDevReq+0xce>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00f      	beq.n	8008bce <USBD_StdDevReq+0x42>
 8008bae:	2b20      	cmp	r3, #32
 8008bb0:	d153      	bne.n	8008c5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	32ae      	adds	r2, #174	@ 0xae
 8008bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	4798      	blx	r3
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73fb      	strb	r3, [r7, #15]
      break;
 8008bcc:	e04a      	b.n	8008c64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	785b      	ldrb	r3, [r3, #1]
 8008bd2:	2b09      	cmp	r3, #9
 8008bd4:	d83b      	bhi.n	8008c4e <USBD_StdDevReq+0xc2>
 8008bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bdc <USBD_StdDevReq+0x50>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008c31 	.word	0x08008c31
 8008be0:	08008c45 	.word	0x08008c45
 8008be4:	08008c4f 	.word	0x08008c4f
 8008be8:	08008c3b 	.word	0x08008c3b
 8008bec:	08008c4f 	.word	0x08008c4f
 8008bf0:	08008c0f 	.word	0x08008c0f
 8008bf4:	08008c05 	.word	0x08008c05
 8008bf8:	08008c4f 	.word	0x08008c4f
 8008bfc:	08008c27 	.word	0x08008c27
 8008c00:	08008c19 	.word	0x08008c19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa3c 	bl	8009084 <USBD_GetDescriptor>
          break;
 8008c0c:	e024      	b.n	8008c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fba1 	bl	8009358 <USBD_SetAddress>
          break;
 8008c16:	e01f      	b.n	8008c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fbe0 	bl	80093e0 <USBD_SetConfig>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
          break;
 8008c24:	e018      	b.n	8008c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fc83 	bl	8009534 <USBD_GetConfig>
          break;
 8008c2e:	e013      	b.n	8008c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fcb4 	bl	80095a0 <USBD_GetStatus>
          break;
 8008c38:	e00e      	b.n	8008c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fce3 	bl	8009608 <USBD_SetFeature>
          break;
 8008c42:	e009      	b.n	8008c58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fd07 	bl	800965a <USBD_ClrFeature>
          break;
 8008c4c:	e004      	b.n	8008c58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fd5e 	bl	8009712 <USBD_CtlError>
          break;
 8008c56:	bf00      	nop
      }
      break;
 8008c58:	e004      	b.n	8008c64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fd58 	bl	8009712 <USBD_CtlError>
      break;
 8008c62:	bf00      	nop
  }

  return ret;
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop

08008c70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c86:	2b40      	cmp	r3, #64	@ 0x40
 8008c88:	d005      	beq.n	8008c96 <USBD_StdItfReq+0x26>
 8008c8a:	2b40      	cmp	r3, #64	@ 0x40
 8008c8c:	d852      	bhi.n	8008d34 <USBD_StdItfReq+0xc4>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <USBD_StdItfReq+0x26>
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	d14e      	bne.n	8008d34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d840      	bhi.n	8008d26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	889b      	ldrh	r3, [r3, #4]
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d836      	bhi.n	8008d1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	889b      	ldrh	r3, [r3, #4]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7ff fedb 	bl	8008a72 <USBD_CoreFindIF>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	2bff      	cmp	r3, #255	@ 0xff
 8008cc4:	d01d      	beq.n	8008d02 <USBD_StdItfReq+0x92>
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d11a      	bne.n	8008d02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ccc:	7bba      	ldrb	r2, [r7, #14]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	32ae      	adds	r2, #174	@ 0xae
 8008cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00f      	beq.n	8008cfc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008cdc:	7bba      	ldrb	r2, [r7, #14]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ce4:	7bba      	ldrb	r2, [r7, #14]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	32ae      	adds	r2, #174	@ 0xae
 8008cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4798      	blx	r3
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008cfa:	e004      	b.n	8008d06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d00:	e001      	b.n	8008d06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d02:	2303      	movs	r3, #3
 8008d04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	88db      	ldrh	r3, [r3, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d110      	bne.n	8008d30 <USBD_StdItfReq+0xc0>
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10d      	bne.n	8008d30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fdd3 	bl	80098c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d1a:	e009      	b.n	8008d30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fcf7 	bl	8009712 <USBD_CtlError>
          break;
 8008d24:	e004      	b.n	8008d30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fcf2 	bl	8009712 <USBD_CtlError>
          break;
 8008d2e:	e000      	b.n	8008d32 <USBD_StdItfReq+0xc2>
          break;
 8008d30:	bf00      	nop
      }
      break;
 8008d32:	e004      	b.n	8008d3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fceb 	bl	8009712 <USBD_CtlError>
      break;
 8008d3c:	bf00      	nop
  }

  return ret;
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	889b      	ldrh	r3, [r3, #4]
 8008d5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d64:	2b40      	cmp	r3, #64	@ 0x40
 8008d66:	d007      	beq.n	8008d78 <USBD_StdEPReq+0x30>
 8008d68:	2b40      	cmp	r3, #64	@ 0x40
 8008d6a:	f200 817f 	bhi.w	800906c <USBD_StdEPReq+0x324>
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d02a      	beq.n	8008dc8 <USBD_StdEPReq+0x80>
 8008d72:	2b20      	cmp	r3, #32
 8008d74:	f040 817a 	bne.w	800906c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff fe85 	bl	8008a8c <USBD_CoreFindEP>
 8008d82:	4603      	mov	r3, r0
 8008d84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d86:	7b7b      	ldrb	r3, [r7, #13]
 8008d88:	2bff      	cmp	r3, #255	@ 0xff
 8008d8a:	f000 8174 	beq.w	8009076 <USBD_StdEPReq+0x32e>
 8008d8e:	7b7b      	ldrb	r3, [r7, #13]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f040 8170 	bne.w	8009076 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008d96:	7b7a      	ldrb	r2, [r7, #13]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008d9e:	7b7a      	ldrb	r2, [r7, #13]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	32ae      	adds	r2, #174	@ 0xae
 8008da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 8163 	beq.w	8009076 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008db0:	7b7a      	ldrb	r2, [r7, #13]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	32ae      	adds	r2, #174	@ 0xae
 8008db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008dc6:	e156      	b.n	8009076 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	785b      	ldrb	r3, [r3, #1]
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	d008      	beq.n	8008de2 <USBD_StdEPReq+0x9a>
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	f300 8145 	bgt.w	8009060 <USBD_StdEPReq+0x318>
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 809b 	beq.w	8008f12 <USBD_StdEPReq+0x1ca>
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d03c      	beq.n	8008e5a <USBD_StdEPReq+0x112>
 8008de0:	e13e      	b.n	8009060 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d002      	beq.n	8008df4 <USBD_StdEPReq+0xac>
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d016      	beq.n	8008e20 <USBD_StdEPReq+0xd8>
 8008df2:	e02c      	b.n	8008e4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00d      	beq.n	8008e16 <USBD_StdEPReq+0xce>
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
 8008dfc:	2b80      	cmp	r3, #128	@ 0x80
 8008dfe:	d00a      	beq.n	8008e16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 f957 	bl	800a0b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e0a:	2180      	movs	r1, #128	@ 0x80
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f001 f953 	bl	800a0b8 <USBD_LL_StallEP>
 8008e12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e14:	e020      	b.n	8008e58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fc7a 	bl	8009712 <USBD_CtlError>
              break;
 8008e1e:	e01b      	b.n	8008e58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	885b      	ldrh	r3, [r3, #2]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10e      	bne.n	8008e46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00b      	beq.n	8008e46 <USBD_StdEPReq+0xfe>
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	2b80      	cmp	r3, #128	@ 0x80
 8008e32:	d008      	beq.n	8008e46 <USBD_StdEPReq+0xfe>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	88db      	ldrh	r3, [r3, #6]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d104      	bne.n	8008e46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f001 f939 	bl	800a0b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fd3a 	bl	80098c0 <USBD_CtlSendStatus>

              break;
 8008e4c:	e004      	b.n	8008e58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fc5e 	bl	8009712 <USBD_CtlError>
              break;
 8008e56:	bf00      	nop
          }
          break;
 8008e58:	e107      	b.n	800906a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d002      	beq.n	8008e6c <USBD_StdEPReq+0x124>
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d016      	beq.n	8008e98 <USBD_StdEPReq+0x150>
 8008e6a:	e04b      	b.n	8008f04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e6c:	7bbb      	ldrb	r3, [r7, #14]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00d      	beq.n	8008e8e <USBD_StdEPReq+0x146>
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	2b80      	cmp	r3, #128	@ 0x80
 8008e76:	d00a      	beq.n	8008e8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 f91b 	bl	800a0b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e82:	2180      	movs	r1, #128	@ 0x80
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f001 f917 	bl	800a0b8 <USBD_LL_StallEP>
 8008e8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e8c:	e040      	b.n	8008f10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fc3e 	bl	8009712 <USBD_CtlError>
              break;
 8008e96:	e03b      	b.n	8008f10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	885b      	ldrh	r3, [r3, #2]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d136      	bne.n	8008f0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ea0:	7bbb      	ldrb	r3, [r7, #14]
 8008ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d004      	beq.n	8008eb4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008eaa:	7bbb      	ldrb	r3, [r7, #14]
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 f921 	bl	800a0f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fd03 	bl	80098c0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff fde4 	bl	8008a8c <USBD_CoreFindEP>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ec8:	7b7b      	ldrb	r3, [r7, #13]
 8008eca:	2bff      	cmp	r3, #255	@ 0xff
 8008ecc:	d01f      	beq.n	8008f0e <USBD_StdEPReq+0x1c6>
 8008ece:	7b7b      	ldrb	r3, [r7, #13]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11c      	bne.n	8008f0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ed4:	7b7a      	ldrb	r2, [r7, #13]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008edc:	7b7a      	ldrb	r2, [r7, #13]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	32ae      	adds	r2, #174	@ 0xae
 8008ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d010      	beq.n	8008f0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008eec:	7b7a      	ldrb	r2, [r7, #13]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	32ae      	adds	r2, #174	@ 0xae
 8008ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	4798      	blx	r3
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f02:	e004      	b.n	8008f0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fc03 	bl	8009712 <USBD_CtlError>
              break;
 8008f0c:	e000      	b.n	8008f10 <USBD_StdEPReq+0x1c8>
              break;
 8008f0e:	bf00      	nop
          }
          break;
 8008f10:	e0ab      	b.n	800906a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d002      	beq.n	8008f24 <USBD_StdEPReq+0x1dc>
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d032      	beq.n	8008f88 <USBD_StdEPReq+0x240>
 8008f22:	e097      	b.n	8009054 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d007      	beq.n	8008f3a <USBD_StdEPReq+0x1f2>
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	2b80      	cmp	r3, #128	@ 0x80
 8008f2e:	d004      	beq.n	8008f3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fbed 	bl	8009712 <USBD_CtlError>
                break;
 8008f38:	e091      	b.n	800905e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	da0b      	bge.n	8008f5a <USBD_StdEPReq+0x212>
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f48:	4613      	mov	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	3310      	adds	r3, #16
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	4413      	add	r3, r2
 8008f56:	3304      	adds	r3, #4
 8008f58:	e00b      	b.n	8008f72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f60:	4613      	mov	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	4413      	add	r3, r2
 8008f70:	3304      	adds	r3, #4
 8008f72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fc43 	bl	800980c <USBD_CtlSendData>
              break;
 8008f86:	e06a      	b.n	800905e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	da11      	bge.n	8008fb4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	f003 020f 	and.w	r2, r3, #15
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	3324      	adds	r3, #36	@ 0x24
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d117      	bne.n	8008fda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fbb0 	bl	8009712 <USBD_CtlError>
                  break;
 8008fb2:	e054      	b.n	800905e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	f003 020f 	and.w	r2, r3, #15
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	440b      	add	r3, r1
 8008fc6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fb9d 	bl	8009712 <USBD_CtlError>
                  break;
 8008fd8:	e041      	b.n	800905e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	da0b      	bge.n	8008ffa <USBD_StdEPReq+0x2b2>
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fe8:	4613      	mov	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	3310      	adds	r3, #16
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	e00b      	b.n	8009012 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009000:	4613      	mov	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	4413      	add	r3, r2
 8009010:	3304      	adds	r3, #4
 8009012:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <USBD_StdEPReq+0x2d8>
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	2b80      	cmp	r3, #128	@ 0x80
 800901e:	d103      	bne.n	8009028 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	e00e      	b.n	8009046 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f881 	bl	800a134 <USBD_LL_IsStallEP>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d003      	beq.n	8009040 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2201      	movs	r2, #1
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	e002      	b.n	8009046 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	2202      	movs	r2, #2
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fbdd 	bl	800980c <USBD_CtlSendData>
              break;
 8009052:	e004      	b.n	800905e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fb5b 	bl	8009712 <USBD_CtlError>
              break;
 800905c:	bf00      	nop
          }
          break;
 800905e:	e004      	b.n	800906a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fb55 	bl	8009712 <USBD_CtlError>
          break;
 8009068:	bf00      	nop
      }
      break;
 800906a:	e005      	b.n	8009078 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fb4f 	bl	8009712 <USBD_CtlError>
      break;
 8009074:	e000      	b.n	8009078 <USBD_StdEPReq+0x330>
      break;
 8009076:	bf00      	nop
  }

  return ret;
 8009078:	7bfb      	ldrb	r3, [r7, #15]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009084 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009092:	2300      	movs	r3, #0
 8009094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009096:	2300      	movs	r3, #0
 8009098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	885b      	ldrh	r3, [r3, #2]
 800909e:	0a1b      	lsrs	r3, r3, #8
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	3b01      	subs	r3, #1
 80090a4:	2b06      	cmp	r3, #6
 80090a6:	f200 8128 	bhi.w	80092fa <USBD_GetDescriptor+0x276>
 80090aa:	a201      	add	r2, pc, #4	@ (adr r2, 80090b0 <USBD_GetDescriptor+0x2c>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090cd 	.word	0x080090cd
 80090b4:	080090e5 	.word	0x080090e5
 80090b8:	08009125 	.word	0x08009125
 80090bc:	080092fb 	.word	0x080092fb
 80090c0:	080092fb 	.word	0x080092fb
 80090c4:	0800929b 	.word	0x0800929b
 80090c8:	080092c7 	.word	0x080092c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	7c12      	ldrb	r2, [r2, #16]
 80090d8:	f107 0108 	add.w	r1, r7, #8
 80090dc:	4610      	mov	r0, r2
 80090de:	4798      	blx	r3
 80090e0:	60f8      	str	r0, [r7, #12]
      break;
 80090e2:	e112      	b.n	800930a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	7c1b      	ldrb	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10d      	bne.n	8009108 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f4:	f107 0208 	add.w	r2, r7, #8
 80090f8:	4610      	mov	r0, r2
 80090fa:	4798      	blx	r3
 80090fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3301      	adds	r3, #1
 8009102:	2202      	movs	r2, #2
 8009104:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009106:	e100      	b.n	800930a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800910e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009110:	f107 0208 	add.w	r2, r7, #8
 8009114:	4610      	mov	r0, r2
 8009116:	4798      	blx	r3
 8009118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3301      	adds	r3, #1
 800911e:	2202      	movs	r2, #2
 8009120:	701a      	strb	r2, [r3, #0]
      break;
 8009122:	e0f2      	b.n	800930a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	885b      	ldrh	r3, [r3, #2]
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b05      	cmp	r3, #5
 800912c:	f200 80ac 	bhi.w	8009288 <USBD_GetDescriptor+0x204>
 8009130:	a201      	add	r2, pc, #4	@ (adr r2, 8009138 <USBD_GetDescriptor+0xb4>)
 8009132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009136:	bf00      	nop
 8009138:	08009151 	.word	0x08009151
 800913c:	08009185 	.word	0x08009185
 8009140:	080091b9 	.word	0x080091b9
 8009144:	080091ed 	.word	0x080091ed
 8009148:	08009221 	.word	0x08009221
 800914c:	08009255 	.word	0x08009255
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00b      	beq.n	8009174 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	7c12      	ldrb	r2, [r2, #16]
 8009168:	f107 0108 	add.w	r1, r7, #8
 800916c:	4610      	mov	r0, r2
 800916e:	4798      	blx	r3
 8009170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009172:	e091      	b.n	8009298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 facb 	bl	8009712 <USBD_CtlError>
            err++;
 800917c:	7afb      	ldrb	r3, [r7, #11]
 800917e:	3301      	adds	r3, #1
 8009180:	72fb      	strb	r3, [r7, #11]
          break;
 8009182:	e089      	b.n	8009298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00b      	beq.n	80091a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	7c12      	ldrb	r2, [r2, #16]
 800919c:	f107 0108 	add.w	r1, r7, #8
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
 80091a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091a6:	e077      	b.n	8009298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fab1 	bl	8009712 <USBD_CtlError>
            err++;
 80091b0:	7afb      	ldrb	r3, [r7, #11]
 80091b2:	3301      	adds	r3, #1
 80091b4:	72fb      	strb	r3, [r7, #11]
          break;
 80091b6:	e06f      	b.n	8009298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00b      	beq.n	80091dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	7c12      	ldrb	r2, [r2, #16]
 80091d0:	f107 0108 	add.w	r1, r7, #8
 80091d4:	4610      	mov	r0, r2
 80091d6:	4798      	blx	r3
 80091d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091da:	e05d      	b.n	8009298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa97 	bl	8009712 <USBD_CtlError>
            err++;
 80091e4:	7afb      	ldrb	r3, [r7, #11]
 80091e6:	3301      	adds	r3, #1
 80091e8:	72fb      	strb	r3, [r7, #11]
          break;
 80091ea:	e055      	b.n	8009298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	7c12      	ldrb	r2, [r2, #16]
 8009204:	f107 0108 	add.w	r1, r7, #8
 8009208:	4610      	mov	r0, r2
 800920a:	4798      	blx	r3
 800920c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800920e:	e043      	b.n	8009298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fa7d 	bl	8009712 <USBD_CtlError>
            err++;
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	3301      	adds	r3, #1
 800921c:	72fb      	strb	r3, [r7, #11]
          break;
 800921e:	e03b      	b.n	8009298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00b      	beq.n	8009244 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	7c12      	ldrb	r2, [r2, #16]
 8009238:	f107 0108 	add.w	r1, r7, #8
 800923c:	4610      	mov	r0, r2
 800923e:	4798      	blx	r3
 8009240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009242:	e029      	b.n	8009298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa63 	bl	8009712 <USBD_CtlError>
            err++;
 800924c:	7afb      	ldrb	r3, [r7, #11]
 800924e:	3301      	adds	r3, #1
 8009250:	72fb      	strb	r3, [r7, #11]
          break;
 8009252:	e021      	b.n	8009298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	7c12      	ldrb	r2, [r2, #16]
 800926c:	f107 0108 	add.w	r1, r7, #8
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
 8009274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009276:	e00f      	b.n	8009298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fa49 	bl	8009712 <USBD_CtlError>
            err++;
 8009280:	7afb      	ldrb	r3, [r7, #11]
 8009282:	3301      	adds	r3, #1
 8009284:	72fb      	strb	r3, [r7, #11]
          break;
 8009286:	e007      	b.n	8009298 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fa41 	bl	8009712 <USBD_CtlError>
          err++;
 8009290:	7afb      	ldrb	r3, [r7, #11]
 8009292:	3301      	adds	r3, #1
 8009294:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009296:	bf00      	nop
      }
      break;
 8009298:	e037      	b.n	800930a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7c1b      	ldrb	r3, [r3, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d109      	bne.n	80092b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092aa:	f107 0208 	add.w	r2, r7, #8
 80092ae:	4610      	mov	r0, r2
 80092b0:	4798      	blx	r3
 80092b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092b4:	e029      	b.n	800930a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fa2a 	bl	8009712 <USBD_CtlError>
        err++;
 80092be:	7afb      	ldrb	r3, [r7, #11]
 80092c0:	3301      	adds	r3, #1
 80092c2:	72fb      	strb	r3, [r7, #11]
      break;
 80092c4:	e021      	b.n	800930a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	7c1b      	ldrb	r3, [r3, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10d      	bne.n	80092ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d6:	f107 0208 	add.w	r2, r7, #8
 80092da:	4610      	mov	r0, r2
 80092dc:	4798      	blx	r3
 80092de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	3301      	adds	r3, #1
 80092e4:	2207      	movs	r2, #7
 80092e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092e8:	e00f      	b.n	800930a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fa10 	bl	8009712 <USBD_CtlError>
        err++;
 80092f2:	7afb      	ldrb	r3, [r7, #11]
 80092f4:	3301      	adds	r3, #1
 80092f6:	72fb      	strb	r3, [r7, #11]
      break;
 80092f8:	e007      	b.n	800930a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fa08 	bl	8009712 <USBD_CtlError>
      err++;
 8009302:	7afb      	ldrb	r3, [r7, #11]
 8009304:	3301      	adds	r3, #1
 8009306:	72fb      	strb	r3, [r7, #11]
      break;
 8009308:	bf00      	nop
  }

  if (err != 0U)
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d11e      	bne.n	800934e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	88db      	ldrh	r3, [r3, #6]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d016      	beq.n	8009346 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009318:	893b      	ldrh	r3, [r7, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00e      	beq.n	800933c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	88da      	ldrh	r2, [r3, #6]
 8009322:	893b      	ldrh	r3, [r7, #8]
 8009324:	4293      	cmp	r3, r2
 8009326:	bf28      	it	cs
 8009328:	4613      	movcs	r3, r2
 800932a:	b29b      	uxth	r3, r3
 800932c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800932e:	893b      	ldrh	r3, [r7, #8]
 8009330:	461a      	mov	r2, r3
 8009332:	68f9      	ldr	r1, [r7, #12]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fa69 	bl	800980c <USBD_CtlSendData>
 800933a:	e009      	b.n	8009350 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f9e7 	bl	8009712 <USBD_CtlError>
 8009344:	e004      	b.n	8009350 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 faba 	bl	80098c0 <USBD_CtlSendStatus>
 800934c:	e000      	b.n	8009350 <USBD_GetDescriptor+0x2cc>
    return;
 800934e:	bf00      	nop
  }
}
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop

08009358 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	889b      	ldrh	r3, [r3, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d131      	bne.n	80093ce <USBD_SetAddress+0x76>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	88db      	ldrh	r3, [r3, #6]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d12d      	bne.n	80093ce <USBD_SetAddress+0x76>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	885b      	ldrh	r3, [r3, #2]
 8009376:	2b7f      	cmp	r3, #127	@ 0x7f
 8009378:	d829      	bhi.n	80093ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	885b      	ldrh	r3, [r3, #2]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009384:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b03      	cmp	r3, #3
 8009390:	d104      	bne.n	800939c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f9bc 	bl	8009712 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939a:	e01d      	b.n	80093d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	7bfa      	ldrb	r2, [r7, #15]
 80093a0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 feef 	bl	800a18c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa86 	bl	80098c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d004      	beq.n	80093c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2202      	movs	r2, #2
 80093be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c2:	e009      	b.n	80093d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093cc:	e004      	b.n	80093d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f99e 	bl	8009712 <USBD_CtlError>
  }
}
 80093d6:	bf00      	nop
 80093d8:	bf00      	nop
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	885b      	ldrh	r3, [r3, #2]
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	4b4e      	ldr	r3, [pc, #312]	@ (8009530 <USBD_SetConfig+0x150>)
 80093f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093f8:	4b4d      	ldr	r3, [pc, #308]	@ (8009530 <USBD_SetConfig+0x150>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d905      	bls.n	800940c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f985 	bl	8009712 <USBD_CtlError>
    return USBD_FAIL;
 8009408:	2303      	movs	r3, #3
 800940a:	e08c      	b.n	8009526 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b02      	cmp	r3, #2
 8009416:	d002      	beq.n	800941e <USBD_SetConfig+0x3e>
 8009418:	2b03      	cmp	r3, #3
 800941a:	d029      	beq.n	8009470 <USBD_SetConfig+0x90>
 800941c:	e075      	b.n	800950a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800941e:	4b44      	ldr	r3, [pc, #272]	@ (8009530 <USBD_SetConfig+0x150>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d020      	beq.n	8009468 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009426:	4b42      	ldr	r3, [pc, #264]	@ (8009530 <USBD_SetConfig+0x150>)
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	461a      	mov	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009430:	4b3f      	ldr	r3, [pc, #252]	@ (8009530 <USBD_SetConfig+0x150>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7fe ffe3 	bl	8008402 <USBD_SetClassConfig>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d008      	beq.n	8009458 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f962 	bl	8009712 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2202      	movs	r2, #2
 8009452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009456:	e065      	b.n	8009524 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fa31 	bl	80098c0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2203      	movs	r2, #3
 8009462:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009466:	e05d      	b.n	8009524 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fa29 	bl	80098c0 <USBD_CtlSendStatus>
      break;
 800946e:	e059      	b.n	8009524 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009470:	4b2f      	ldr	r3, [pc, #188]	@ (8009530 <USBD_SetConfig+0x150>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d112      	bne.n	800949e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2202      	movs	r2, #2
 800947c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009480:	4b2b      	ldr	r3, [pc, #172]	@ (8009530 <USBD_SetConfig+0x150>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	461a      	mov	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800948a:	4b29      	ldr	r3, [pc, #164]	@ (8009530 <USBD_SetConfig+0x150>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7fe ffd2 	bl	800843a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fa12 	bl	80098c0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800949c:	e042      	b.n	8009524 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800949e:	4b24      	ldr	r3, [pc, #144]	@ (8009530 <USBD_SetConfig+0x150>)
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d02a      	beq.n	8009502 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7fe ffc0 	bl	800843a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009530 <USBD_SetConfig+0x150>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009530 <USBD_SetConfig+0x150>)
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	4619      	mov	r1, r3
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7fe ff99 	bl	8008402 <USBD_SetClassConfig>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00f      	beq.n	80094fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f918 	bl	8009712 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7fe ffa5 	bl	800843a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80094f8:	e014      	b.n	8009524 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f9e0 	bl	80098c0 <USBD_CtlSendStatus>
      break;
 8009500:	e010      	b.n	8009524 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f9dc 	bl	80098c0 <USBD_CtlSendStatus>
      break;
 8009508:	e00c      	b.n	8009524 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f900 	bl	8009712 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009512:	4b07      	ldr	r3, [pc, #28]	@ (8009530 <USBD_SetConfig+0x150>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7fe ff8e 	bl	800843a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800951e:	2303      	movs	r3, #3
 8009520:	73fb      	strb	r3, [r7, #15]
      break;
 8009522:	bf00      	nop
  }

  return ret;
 8009524:	7bfb      	ldrb	r3, [r7, #15]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20000414 	.word	0x20000414

08009534 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	88db      	ldrh	r3, [r3, #6]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d004      	beq.n	8009550 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f8e2 	bl	8009712 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800954e:	e023      	b.n	8009598 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b02      	cmp	r3, #2
 800955a:	dc02      	bgt.n	8009562 <USBD_GetConfig+0x2e>
 800955c:	2b00      	cmp	r3, #0
 800955e:	dc03      	bgt.n	8009568 <USBD_GetConfig+0x34>
 8009560:	e015      	b.n	800958e <USBD_GetConfig+0x5a>
 8009562:	2b03      	cmp	r3, #3
 8009564:	d00b      	beq.n	800957e <USBD_GetConfig+0x4a>
 8009566:	e012      	b.n	800958e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3308      	adds	r3, #8
 8009572:	2201      	movs	r2, #1
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f948 	bl	800980c <USBD_CtlSendData>
        break;
 800957c:	e00c      	b.n	8009598 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3304      	adds	r3, #4
 8009582:	2201      	movs	r2, #1
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f940 	bl	800980c <USBD_CtlSendData>
        break;
 800958c:	e004      	b.n	8009598 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f8be 	bl	8009712 <USBD_CtlError>
        break;
 8009596:	bf00      	nop
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	3b01      	subs	r3, #1
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d81e      	bhi.n	80095f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	88db      	ldrh	r3, [r3, #6]
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d004      	beq.n	80095ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f8a5 	bl	8009712 <USBD_CtlError>
        break;
 80095c8:	e01a      	b.n	8009600 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d005      	beq.n	80095e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f043 0202 	orr.w	r2, r3, #2
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	330c      	adds	r3, #12
 80095ea:	2202      	movs	r2, #2
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f90c 	bl	800980c <USBD_CtlSendData>
      break;
 80095f4:	e004      	b.n	8009600 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f88a 	bl	8009712 <USBD_CtlError>
      break;
 80095fe:	bf00      	nop
  }
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	885b      	ldrh	r3, [r3, #2]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d107      	bne.n	800962a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f94c 	bl	80098c0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009628:	e013      	b.n	8009652 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	885b      	ldrh	r3, [r3, #2]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d10b      	bne.n	800964a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	889b      	ldrh	r3, [r3, #4]
 8009636:	0a1b      	lsrs	r3, r3, #8
 8009638:	b29b      	uxth	r3, r3
 800963a:	b2da      	uxtb	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f93c 	bl	80098c0 <USBD_CtlSendStatus>
}
 8009648:	e003      	b.n	8009652 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f860 	bl	8009712 <USBD_CtlError>
}
 8009652:	bf00      	nop
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800966a:	b2db      	uxtb	r3, r3
 800966c:	3b01      	subs	r3, #1
 800966e:	2b02      	cmp	r3, #2
 8009670:	d80b      	bhi.n	800968a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	885b      	ldrh	r3, [r3, #2]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d10c      	bne.n	8009694 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f91c 	bl	80098c0 <USBD_CtlSendStatus>
      }
      break;
 8009688:	e004      	b.n	8009694 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f840 	bl	8009712 <USBD_CtlError>
      break;
 8009692:	e000      	b.n	8009696 <USBD_ClrFeature+0x3c>
      break;
 8009694:	bf00      	nop
  }
}
 8009696:	bf00      	nop
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	781a      	ldrb	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	3301      	adds	r3, #1
 80096b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	781a      	ldrb	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3301      	adds	r3, #1
 80096c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f7ff fa40 	bl	8008b4e <SWAPBYTE>
 80096ce:	4603      	mov	r3, r0
 80096d0:	461a      	mov	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3301      	adds	r3, #1
 80096da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	3301      	adds	r3, #1
 80096e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f7ff fa33 	bl	8008b4e <SWAPBYTE>
 80096e8:	4603      	mov	r3, r0
 80096ea:	461a      	mov	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	3301      	adds	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	3301      	adds	r3, #1
 80096fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7ff fa26 	bl	8008b4e <SWAPBYTE>
 8009702:	4603      	mov	r3, r0
 8009704:	461a      	mov	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	80da      	strh	r2, [r3, #6]
}
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800971c:	2180      	movs	r1, #128	@ 0x80
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fcca 	bl	800a0b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009724:	2100      	movs	r1, #0
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fcc6 	bl	800a0b8 <USBD_LL_StallEP>
}
 800972c:	bf00      	nop
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d042      	beq.n	80097d0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800974e:	6938      	ldr	r0, [r7, #16]
 8009750:	f000 f842 	bl	80097d8 <USBD_GetLen>
 8009754:	4603      	mov	r3, r0
 8009756:	3301      	adds	r3, #1
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800975e:	d808      	bhi.n	8009772 <USBD_GetString+0x3e>
 8009760:	6938      	ldr	r0, [r7, #16]
 8009762:	f000 f839 	bl	80097d8 <USBD_GetLen>
 8009766:	4603      	mov	r3, r0
 8009768:	3301      	adds	r3, #1
 800976a:	b29b      	uxth	r3, r3
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	b29a      	uxth	r2, r3
 8009770:	e001      	b.n	8009776 <USBD_GetString+0x42>
 8009772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800977a:	7dfb      	ldrb	r3, [r7, #23]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	4413      	add	r3, r2
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	7812      	ldrb	r2, [r2, #0]
 8009784:	701a      	strb	r2, [r3, #0]
  idx++;
 8009786:	7dfb      	ldrb	r3, [r7, #23]
 8009788:	3301      	adds	r3, #1
 800978a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	4413      	add	r3, r2
 8009792:	2203      	movs	r2, #3
 8009794:	701a      	strb	r2, [r3, #0]
  idx++;
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	3301      	adds	r3, #1
 800979a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800979c:	e013      	b.n	80097c6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	4413      	add	r3, r2
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	7812      	ldrb	r2, [r2, #0]
 80097a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	3301      	adds	r3, #1
 80097ae:	613b      	str	r3, [r7, #16]
    idx++;
 80097b0:	7dfb      	ldrb	r3, [r7, #23]
 80097b2:	3301      	adds	r3, #1
 80097b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	4413      	add	r3, r2
 80097bc:	2200      	movs	r2, #0
 80097be:	701a      	strb	r2, [r3, #0]
    idx++;
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	3301      	adds	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1e7      	bne.n	800979e <USBD_GetString+0x6a>
 80097ce:	e000      	b.n	80097d2 <USBD_GetString+0x9e>
    return;
 80097d0:	bf00      	nop
  }
}
 80097d2:	3718      	adds	r7, #24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80097e8:	e005      	b.n	80097f6 <USBD_GetLen+0x1e>
  {
    len++;
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	3301      	adds	r3, #1
 80097ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	3301      	adds	r3, #1
 80097f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1f5      	bne.n	80097ea <USBD_GetLen+0x12>
  }

  return len;
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2202      	movs	r2, #2
 800981c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	2100      	movs	r1, #0
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 fcc9 	bl	800a1ca <USBD_LL_Transmit>

  return USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	2100      	movs	r1, #0
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 fcb8 	bl	800a1ca <USBD_LL_Transmit>

  return USBD_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2203      	movs	r2, #3
 8009874:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	2100      	movs	r1, #0
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f000 fcbc 	bl	800a20c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	2100      	movs	r1, #0
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 fcab 	bl	800a20c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2204      	movs	r2, #4
 80098cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098d0:	2300      	movs	r3, #0
 80098d2:	2200      	movs	r2, #0
 80098d4:	2100      	movs	r1, #0
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fc77 	bl	800a1ca <USBD_LL_Transmit>

  return USBD_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2205      	movs	r2, #5
 80098f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098f6:	2300      	movs	r3, #0
 80098f8:	2200      	movs	r2, #0
 80098fa:	2100      	movs	r1, #0
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fc85 	bl	800a20c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009910:	2200      	movs	r2, #0
 8009912:	4912      	ldr	r1, [pc, #72]	@ (800995c <MX_USB_DEVICE_Init+0x50>)
 8009914:	4812      	ldr	r0, [pc, #72]	@ (8009960 <MX_USB_DEVICE_Init+0x54>)
 8009916:	f7fe fcf7 	bl	8008308 <USBD_Init>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009920:	f7f7 fc21 	bl	8001166 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009924:	490f      	ldr	r1, [pc, #60]	@ (8009964 <MX_USB_DEVICE_Init+0x58>)
 8009926:	480e      	ldr	r0, [pc, #56]	@ (8009960 <MX_USB_DEVICE_Init+0x54>)
 8009928:	f7fe fd1e 	bl	8008368 <USBD_RegisterClass>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009932:	f7f7 fc18 	bl	8001166 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009936:	490c      	ldr	r1, [pc, #48]	@ (8009968 <MX_USB_DEVICE_Init+0x5c>)
 8009938:	4809      	ldr	r0, [pc, #36]	@ (8009960 <MX_USB_DEVICE_Init+0x54>)
 800993a:	f7fe fc55 	bl	80081e8 <USBD_CDC_RegisterInterface>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009944:	f7f7 fc0f 	bl	8001166 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009948:	4805      	ldr	r0, [pc, #20]	@ (8009960 <MX_USB_DEVICE_Init+0x54>)
 800994a:	f7fe fd43 	bl	80083d4 <USBD_Start>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009954:	f7f7 fc07 	bl	8001166 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009958:	bf00      	nop
 800995a:	bd80      	pop	{r7, pc}
 800995c:	200000ac 	.word	0x200000ac
 8009960:	20000418 	.word	0x20000418
 8009964:	20000018 	.word	0x20000018
 8009968:	20000098 	.word	0x20000098

0800996c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009970:	2200      	movs	r2, #0
 8009972:	4905      	ldr	r1, [pc, #20]	@ (8009988 <CDC_Init_FS+0x1c>)
 8009974:	4805      	ldr	r0, [pc, #20]	@ (800998c <CDC_Init_FS+0x20>)
 8009976:	f7fe fc51 	bl	800821c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800997a:	4905      	ldr	r1, [pc, #20]	@ (8009990 <CDC_Init_FS+0x24>)
 800997c:	4803      	ldr	r0, [pc, #12]	@ (800998c <CDC_Init_FS+0x20>)
 800997e:	f7fe fc6f 	bl	8008260 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009982:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009984:	4618      	mov	r0, r3
 8009986:	bd80      	pop	{r7, pc}
 8009988:	20000ef4 	.word	0x20000ef4
 800998c:	20000418 	.word	0x20000418
 8009990:	200006f4 	.word	0x200006f4

08009994 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009994:	b480      	push	{r7}
 8009996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009998:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800999a:	4618      	mov	r0, r3
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
 80099b0:	4613      	mov	r3, r2
 80099b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	2b23      	cmp	r3, #35	@ 0x23
 80099b8:	d84a      	bhi.n	8009a50 <CDC_Control_FS+0xac>
 80099ba:	a201      	add	r2, pc, #4	@ (adr r2, 80099c0 <CDC_Control_FS+0x1c>)
 80099bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c0:	08009a51 	.word	0x08009a51
 80099c4:	08009a51 	.word	0x08009a51
 80099c8:	08009a51 	.word	0x08009a51
 80099cc:	08009a51 	.word	0x08009a51
 80099d0:	08009a51 	.word	0x08009a51
 80099d4:	08009a51 	.word	0x08009a51
 80099d8:	08009a51 	.word	0x08009a51
 80099dc:	08009a51 	.word	0x08009a51
 80099e0:	08009a51 	.word	0x08009a51
 80099e4:	08009a51 	.word	0x08009a51
 80099e8:	08009a51 	.word	0x08009a51
 80099ec:	08009a51 	.word	0x08009a51
 80099f0:	08009a51 	.word	0x08009a51
 80099f4:	08009a51 	.word	0x08009a51
 80099f8:	08009a51 	.word	0x08009a51
 80099fc:	08009a51 	.word	0x08009a51
 8009a00:	08009a51 	.word	0x08009a51
 8009a04:	08009a51 	.word	0x08009a51
 8009a08:	08009a51 	.word	0x08009a51
 8009a0c:	08009a51 	.word	0x08009a51
 8009a10:	08009a51 	.word	0x08009a51
 8009a14:	08009a51 	.word	0x08009a51
 8009a18:	08009a51 	.word	0x08009a51
 8009a1c:	08009a51 	.word	0x08009a51
 8009a20:	08009a51 	.word	0x08009a51
 8009a24:	08009a51 	.word	0x08009a51
 8009a28:	08009a51 	.word	0x08009a51
 8009a2c:	08009a51 	.word	0x08009a51
 8009a30:	08009a51 	.word	0x08009a51
 8009a34:	08009a51 	.word	0x08009a51
 8009a38:	08009a51 	.word	0x08009a51
 8009a3c:	08009a51 	.word	0x08009a51
 8009a40:	08009a51 	.word	0x08009a51
 8009a44:	08009a51 	.word	0x08009a51
 8009a48:	08009a51 	.word	0x08009a51
 8009a4c:	08009a51 	.word	0x08009a51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a50:	bf00      	nop
  }

  return (USBD_OK);
 8009a52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	480b      	ldr	r0, [pc, #44]	@ (8009a9c <CDC_Receive_FS+0x3c>)
 8009a6e:	f7fe fbf7 	bl	8008260 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a72:	480a      	ldr	r0, [pc, #40]	@ (8009a9c <CDC_Receive_FS+0x3c>)
 8009a74:	f7fe fc12 	bl	800829c <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4808      	ldr	r0, [pc, #32]	@ (8009aa0 <CDC_Receive_FS+0x40>)
 8009a80:	f7f7 fb58 	bl	8001134 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	4804      	ldr	r0, [pc, #16]	@ (8009aa0 <CDC_Receive_FS+0x40>)
 8009a8e:	f000 fc35 	bl	800a2fc <memset>
  return (USBD_OK);
 8009a92:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20000418 	.word	0x20000418
 8009aa0:	200006f4 	.word	0x200006f4

08009aa4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	371c      	adds	r7, #28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
	...

08009ac8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	6039      	str	r1, [r7, #0]
 8009ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	2212      	movs	r2, #18
 8009ad8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ada:	4b03      	ldr	r3, [pc, #12]	@ (8009ae8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	200000c8 	.word	0x200000c8

08009aec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	6039      	str	r1, [r7, #0]
 8009af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2204      	movs	r2, #4
 8009afc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009afe:	4b03      	ldr	r3, [pc, #12]	@ (8009b0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	200000dc 	.word	0x200000dc

08009b10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	6039      	str	r1, [r7, #0]
 8009b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d105      	bne.n	8009b2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	4907      	ldr	r1, [pc, #28]	@ (8009b44 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b26:	4808      	ldr	r0, [pc, #32]	@ (8009b48 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b28:	f7ff fe04 	bl	8009734 <USBD_GetString>
 8009b2c:	e004      	b.n	8009b38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	4904      	ldr	r1, [pc, #16]	@ (8009b44 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b32:	4805      	ldr	r0, [pc, #20]	@ (8009b48 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b34:	f7ff fdfe 	bl	8009734 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b38:	4b02      	ldr	r3, [pc, #8]	@ (8009b44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	200016f4 	.word	0x200016f4
 8009b48:	0800a388 	.word	0x0800a388

08009b4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	6039      	str	r1, [r7, #0]
 8009b56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	4904      	ldr	r1, [pc, #16]	@ (8009b6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b5c:	4804      	ldr	r0, [pc, #16]	@ (8009b70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b5e:	f7ff fde9 	bl	8009734 <USBD_GetString>
  return USBD_StrDesc;
 8009b62:	4b02      	ldr	r3, [pc, #8]	@ (8009b6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	200016f4 	.word	0x200016f4
 8009b70:	0800a3a0 	.word	0x0800a3a0

08009b74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	6039      	str	r1, [r7, #0]
 8009b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	221a      	movs	r2, #26
 8009b84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b86:	f000 f843 	bl	8009c10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b8a:	4b02      	ldr	r3, [pc, #8]	@ (8009b94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	200000e0 	.word	0x200000e0

08009b98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	6039      	str	r1, [r7, #0]
 8009ba2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ba4:	79fb      	ldrb	r3, [r7, #7]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d105      	bne.n	8009bb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	4907      	ldr	r1, [pc, #28]	@ (8009bcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bae:	4808      	ldr	r0, [pc, #32]	@ (8009bd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bb0:	f7ff fdc0 	bl	8009734 <USBD_GetString>
 8009bb4:	e004      	b.n	8009bc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	4904      	ldr	r1, [pc, #16]	@ (8009bcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bba:	4805      	ldr	r0, [pc, #20]	@ (8009bd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bbc:	f7ff fdba 	bl	8009734 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bc0:	4b02      	ldr	r3, [pc, #8]	@ (8009bcc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	200016f4 	.word	0x200016f4
 8009bd0:	0800a3b4 	.word	0x0800a3b4

08009bd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	6039      	str	r1, [r7, #0]
 8009bde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d105      	bne.n	8009bf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	4907      	ldr	r1, [pc, #28]	@ (8009c08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bea:	4808      	ldr	r0, [pc, #32]	@ (8009c0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bec:	f7ff fda2 	bl	8009734 <USBD_GetString>
 8009bf0:	e004      	b.n	8009bfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	4904      	ldr	r1, [pc, #16]	@ (8009c08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bf6:	4805      	ldr	r0, [pc, #20]	@ (8009c0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bf8:	f7ff fd9c 	bl	8009734 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bfc:	4b02      	ldr	r3, [pc, #8]	@ (8009c08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	200016f4 	.word	0x200016f4
 8009c0c:	0800a3c0 	.word	0x0800a3c0

08009c10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c16:	4b0f      	ldr	r3, [pc, #60]	@ (8009c54 <Get_SerialNum+0x44>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c58 <Get_SerialNum+0x48>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c22:	4b0e      	ldr	r3, [pc, #56]	@ (8009c5c <Get_SerialNum+0x4c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d009      	beq.n	8009c4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c36:	2208      	movs	r2, #8
 8009c38:	4909      	ldr	r1, [pc, #36]	@ (8009c60 <Get_SerialNum+0x50>)
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 f814 	bl	8009c68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c40:	2204      	movs	r2, #4
 8009c42:	4908      	ldr	r1, [pc, #32]	@ (8009c64 <Get_SerialNum+0x54>)
 8009c44:	68b8      	ldr	r0, [r7, #8]
 8009c46:	f000 f80f 	bl	8009c68 <IntToUnicode>
  }
}
 8009c4a:	bf00      	nop
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	1fff7a10 	.word	0x1fff7a10
 8009c58:	1fff7a14 	.word	0x1fff7a14
 8009c5c:	1fff7a18 	.word	0x1fff7a18
 8009c60:	200000e2 	.word	0x200000e2
 8009c64:	200000f2 	.word	0x200000f2

08009c68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	4613      	mov	r3, r2
 8009c74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	75fb      	strb	r3, [r7, #23]
 8009c7e:	e027      	b.n	8009cd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	0f1b      	lsrs	r3, r3, #28
 8009c84:	2b09      	cmp	r3, #9
 8009c86:	d80b      	bhi.n	8009ca0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	0f1b      	lsrs	r3, r3, #28
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	005b      	lsls	r3, r3, #1
 8009c92:	4619      	mov	r1, r3
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	440b      	add	r3, r1
 8009c98:	3230      	adds	r2, #48	@ 0x30
 8009c9a:	b2d2      	uxtb	r2, r2
 8009c9c:	701a      	strb	r2, [r3, #0]
 8009c9e:	e00a      	b.n	8009cb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	0f1b      	lsrs	r3, r3, #28
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	4619      	mov	r1, r3
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	440b      	add	r3, r1
 8009cb0:	3237      	adds	r2, #55	@ 0x37
 8009cb2:	b2d2      	uxtb	r2, r2
 8009cb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	75fb      	strb	r3, [r7, #23]
 8009cd0:	7dfa      	ldrb	r2, [r7, #23]
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d3d3      	bcc.n	8009c80 <IntToUnicode+0x18>
  }
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	371c      	adds	r7, #28
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
	...

08009ce8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08a      	sub	sp, #40	@ 0x28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cf0:	f107 0314 	add.w	r3, r7, #20
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	605a      	str	r2, [r3, #4]
 8009cfa:	609a      	str	r2, [r3, #8]
 8009cfc:	60da      	str	r2, [r3, #12]
 8009cfe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d08:	d13a      	bne.n	8009d80 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	613b      	str	r3, [r7, #16]
 8009d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8009d88 <HAL_PCD_MspInit+0xa0>)
 8009d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d12:	4a1d      	ldr	r2, [pc, #116]	@ (8009d88 <HAL_PCD_MspInit+0xa0>)
 8009d14:	f043 0301 	orr.w	r3, r3, #1
 8009d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8009d88 <HAL_PCD_MspInit+0xa0>)
 8009d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	613b      	str	r3, [r7, #16]
 8009d24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d26:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d30:	2300      	movs	r3, #0
 8009d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d34:	2303      	movs	r3, #3
 8009d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d38:	230a      	movs	r3, #10
 8009d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d3c:	f107 0314 	add.w	r3, r7, #20
 8009d40:	4619      	mov	r1, r3
 8009d42:	4812      	ldr	r0, [pc, #72]	@ (8009d8c <HAL_PCD_MspInit+0xa4>)
 8009d44:	f7f8 faa8 	bl	8002298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d48:	4b0f      	ldr	r3, [pc, #60]	@ (8009d88 <HAL_PCD_MspInit+0xa0>)
 8009d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8009d88 <HAL_PCD_MspInit+0xa0>)
 8009d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d52:	6353      	str	r3, [r2, #52]	@ 0x34
 8009d54:	2300      	movs	r3, #0
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	4b0b      	ldr	r3, [pc, #44]	@ (8009d88 <HAL_PCD_MspInit+0xa0>)
 8009d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8009d88 <HAL_PCD_MspInit+0xa0>)
 8009d5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009d62:	6453      	str	r3, [r2, #68]	@ 0x44
 8009d64:	4b08      	ldr	r3, [pc, #32]	@ (8009d88 <HAL_PCD_MspInit+0xa0>)
 8009d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d6c:	60fb      	str	r3, [r7, #12]
 8009d6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d70:	2200      	movs	r2, #0
 8009d72:	2100      	movs	r1, #0
 8009d74:	2043      	movs	r0, #67	@ 0x43
 8009d76:	f7f7 fe56 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d7a:	2043      	movs	r0, #67	@ 0x43
 8009d7c:	f7f7 fe6f 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d80:	bf00      	nop
 8009d82:	3728      	adds	r7, #40	@ 0x28
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	40023800 	.word	0x40023800
 8009d8c:	40020000 	.word	0x40020000

08009d90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009da4:	4619      	mov	r1, r3
 8009da6:	4610      	mov	r0, r2
 8009da8:	f7fe fb61 	bl	800846e <USBD_LL_SetupStage>
}
 8009dac:	bf00      	nop
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009dc6:	78fa      	ldrb	r2, [r7, #3]
 8009dc8:	6879      	ldr	r1, [r7, #4]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	00db      	lsls	r3, r3, #3
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	440b      	add	r3, r1
 8009dd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	78fb      	ldrb	r3, [r7, #3]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	f7fe fb9b 	bl	8008518 <USBD_LL_DataOutStage>
}
 8009de2:	bf00      	nop
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b082      	sub	sp, #8
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	460b      	mov	r3, r1
 8009df4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009dfc:	78fa      	ldrb	r2, [r7, #3]
 8009dfe:	6879      	ldr	r1, [r7, #4]
 8009e00:	4613      	mov	r3, r2
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	4413      	add	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	440b      	add	r3, r1
 8009e0a:	3320      	adds	r3, #32
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	4619      	mov	r1, r3
 8009e12:	f7fe fc34 	bl	800867e <USBD_LL_DataInStage>
}
 8009e16:	bf00      	nop
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fe fd6e 	bl	800890e <USBD_LL_SOF>
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e42:	2301      	movs	r3, #1
 8009e44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	79db      	ldrb	r3, [r3, #7]
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d001      	beq.n	8009e52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e4e:	f7f7 f98a 	bl	8001166 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e58:	7bfa      	ldrb	r2, [r7, #15]
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7fe fd12 	bl	8008886 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe fcba 	bl	80087e2 <USBD_LL_Reset>
}
 8009e6e:	bf00      	nop
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe fd0d 	bl	80088a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	6812      	ldr	r2, [r2, #0]
 8009e9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e9e:	f043 0301 	orr.w	r3, r3, #1
 8009ea2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	7adb      	ldrb	r3, [r3, #11]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d005      	beq.n	8009eb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009eac:	4b04      	ldr	r3, [pc, #16]	@ (8009ec0 <HAL_PCD_SuspendCallback+0x48>)
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	4a03      	ldr	r2, [pc, #12]	@ (8009ec0 <HAL_PCD_SuspendCallback+0x48>)
 8009eb2:	f043 0306 	orr.w	r3, r3, #6
 8009eb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	e000ed00 	.word	0xe000ed00

08009ec4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fd03 	bl	80088de <USBD_LL_Resume>
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ef2:	78fa      	ldrb	r2, [r7, #3]
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe fd5b 	bl	80089b2 <USBD_LL_IsoOUTIncomplete>
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f16:	78fa      	ldrb	r2, [r7, #3]
 8009f18:	4611      	mov	r1, r2
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fe fd17 	bl	800894e <USBD_LL_IsoINIncomplete>
}
 8009f20:	bf00      	nop
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fd6d 	bl	8008a16 <USBD_LL_DevConnected>
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe fd6a 	bl	8008a2c <USBD_LL_DevDisconnected>
}
 8009f58:	bf00      	nop
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d13c      	bne.n	8009fea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009f70:	4a20      	ldr	r2, [pc, #128]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009f7c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f80:	4b1c      	ldr	r3, [pc, #112]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009f82:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009f86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009f88:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009f8a:	2204      	movs	r2, #4
 8009f8c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009f8e:	4b19      	ldr	r3, [pc, #100]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009f90:	2202      	movs	r2, #2
 8009f92:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f94:	4b17      	ldr	r3, [pc, #92]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f9a:	4b16      	ldr	r3, [pc, #88]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009fa0:	4b14      	ldr	r3, [pc, #80]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009fa6:	4b13      	ldr	r3, [pc, #76]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009fac:	4b11      	ldr	r3, [pc, #68]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009fb2:	4b10      	ldr	r3, [pc, #64]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009fbe:	480d      	ldr	r0, [pc, #52]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009fc0:	f7f8 fb21 	bl	8002606 <HAL_PCD_Init>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009fca:	f7f7 f8cc 	bl	8001166 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009fce:	2180      	movs	r1, #128	@ 0x80
 8009fd0:	4808      	ldr	r0, [pc, #32]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009fd2:	f7f9 fd4e 	bl	8003a72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009fd6:	2240      	movs	r2, #64	@ 0x40
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4806      	ldr	r0, [pc, #24]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009fdc:	f7f9 fd02 	bl	80039e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009fe0:	2280      	movs	r2, #128	@ 0x80
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	4803      	ldr	r0, [pc, #12]	@ (8009ff4 <USBD_LL_Init+0x94>)
 8009fe6:	f7f9 fcfd 	bl	80039e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	200018f4 	.word	0x200018f4

08009ff8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a00e:	4618      	mov	r0, r3
 800a010:	f7f8 fc08 	bl	8002824 <HAL_PCD_Start>
 800a014:	4603      	mov	r3, r0
 800a016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a018:	7bfb      	ldrb	r3, [r7, #15]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 f942 	bl	800a2a4 <USBD_Get_USB_Status>
 800a020:	4603      	mov	r3, r0
 800a022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a024:	7bbb      	ldrb	r3, [r7, #14]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	4608      	mov	r0, r1
 800a038:	4611      	mov	r1, r2
 800a03a:	461a      	mov	r2, r3
 800a03c:	4603      	mov	r3, r0
 800a03e:	70fb      	strb	r3, [r7, #3]
 800a040:	460b      	mov	r3, r1
 800a042:	70bb      	strb	r3, [r7, #2]
 800a044:	4613      	mov	r3, r2
 800a046:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a056:	78bb      	ldrb	r3, [r7, #2]
 800a058:	883a      	ldrh	r2, [r7, #0]
 800a05a:	78f9      	ldrb	r1, [r7, #3]
 800a05c:	f7f9 f8dc 	bl	8003218 <HAL_PCD_EP_Open>
 800a060:	4603      	mov	r3, r0
 800a062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a064:	7bfb      	ldrb	r3, [r7, #15]
 800a066:	4618      	mov	r0, r3
 800a068:	f000 f91c 	bl	800a2a4 <USBD_Get_USB_Status>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a070:	7bbb      	ldrb	r3, [r7, #14]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	460b      	mov	r3, r1
 800a084:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a094:	78fa      	ldrb	r2, [r7, #3]
 800a096:	4611      	mov	r1, r2
 800a098:	4618      	mov	r0, r3
 800a09a:	f7f9 f927 	bl	80032ec <HAL_PCD_EP_Close>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 f8fd 	bl	800a2a4 <USBD_Get_USB_Status>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0d2:	78fa      	ldrb	r2, [r7, #3]
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7f9 f9df 	bl	800349a <HAL_PCD_EP_SetStall>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 f8de 	bl	800a2a4 <USBD_Get_USB_Status>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b084      	sub	sp, #16
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	460b      	mov	r3, r1
 800a100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	4611      	mov	r1, r2
 800a114:	4618      	mov	r0, r3
 800a116:	f7f9 fa23 	bl	8003560 <HAL_PCD_EP_ClrStall>
 800a11a:	4603      	mov	r3, r0
 800a11c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	4618      	mov	r0, r3
 800a122:	f000 f8bf 	bl	800a2a4 <USBD_Get_USB_Status>
 800a126:	4603      	mov	r3, r0
 800a128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a12a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a146:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	da0b      	bge.n	800a168 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a156:	68f9      	ldr	r1, [r7, #12]
 800a158:	4613      	mov	r3, r2
 800a15a:	00db      	lsls	r3, r3, #3
 800a15c:	4413      	add	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	440b      	add	r3, r1
 800a162:	3316      	adds	r3, #22
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	e00b      	b.n	800a180 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a168:	78fb      	ldrb	r3, [r7, #3]
 800a16a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a16e:	68f9      	ldr	r1, [r7, #12]
 800a170:	4613      	mov	r3, r2
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	440b      	add	r3, r1
 800a17a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a17e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a180:	4618      	mov	r0, r3
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1a6:	78fa      	ldrb	r2, [r7, #3]
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7f9 f810 	bl	80031d0 <HAL_PCD_SetAddress>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 f874 	bl	800a2a4 <USBD_Get_USB_Status>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b086      	sub	sp, #24
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	60f8      	str	r0, [r7, #12]
 800a1d2:	607a      	str	r2, [r7, #4]
 800a1d4:	603b      	str	r3, [r7, #0]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a1e8:	7af9      	ldrb	r1, [r7, #11]
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	f7f9 f91a 	bl	8003426 <HAL_PCD_EP_Transmit>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 f853 	bl	800a2a4 <USBD_Get_USB_Status>
 800a1fe:	4603      	mov	r3, r0
 800a200:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a202:	7dbb      	ldrb	r3, [r7, #22]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3718      	adds	r7, #24
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	603b      	str	r3, [r7, #0]
 800a218:	460b      	mov	r3, r1
 800a21a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a22a:	7af9      	ldrb	r1, [r7, #11]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	f7f9 f8a6 	bl	8003380 <HAL_PCD_EP_Receive>
 800a234:	4603      	mov	r3, r0
 800a236:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a238:	7dfb      	ldrb	r3, [r7, #23]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 f832 	bl	800a2a4 <USBD_Get_USB_Status>
 800a240:	4603      	mov	r3, r0
 800a242:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a244:	7dbb      	ldrb	r3, [r7, #22]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a260:	78fa      	ldrb	r2, [r7, #3]
 800a262:	4611      	mov	r1, r2
 800a264:	4618      	mov	r0, r3
 800a266:	f7f9 f8c6 	bl	80033f6 <HAL_PCD_EP_GetRxCount>
 800a26a:	4603      	mov	r3, r0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a27c:	4b03      	ldr	r3, [pc, #12]	@ (800a28c <USBD_static_malloc+0x18>)
}
 800a27e:	4618      	mov	r0, r3
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20001dd8 	.word	0x20001dd8

0800a290 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]

}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2b2:	79fb      	ldrb	r3, [r7, #7]
 800a2b4:	2b03      	cmp	r3, #3
 800a2b6:	d817      	bhi.n	800a2e8 <USBD_Get_USB_Status+0x44>
 800a2b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a2c0 <USBD_Get_USB_Status+0x1c>)
 800a2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2be:	bf00      	nop
 800a2c0:	0800a2d1 	.word	0x0800a2d1
 800a2c4:	0800a2d7 	.word	0x0800a2d7
 800a2c8:	0800a2dd 	.word	0x0800a2dd
 800a2cc:	0800a2e3 	.word	0x0800a2e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d4:	e00b      	b.n	800a2ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2da:	e008      	b.n	800a2ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e0:	e005      	b.n	800a2ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e6:	e002      	b.n	800a2ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ec:	bf00      	nop
  }
  return usb_status;
 800a2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <memset>:
 800a2fc:	4402      	add	r2, r0
 800a2fe:	4603      	mov	r3, r0
 800a300:	4293      	cmp	r3, r2
 800a302:	d100      	bne.n	800a306 <memset+0xa>
 800a304:	4770      	bx	lr
 800a306:	f803 1b01 	strb.w	r1, [r3], #1
 800a30a:	e7f9      	b.n	800a300 <memset+0x4>

0800a30c <__libc_init_array>:
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	4d0d      	ldr	r5, [pc, #52]	@ (800a344 <__libc_init_array+0x38>)
 800a310:	4c0d      	ldr	r4, [pc, #52]	@ (800a348 <__libc_init_array+0x3c>)
 800a312:	1b64      	subs	r4, r4, r5
 800a314:	10a4      	asrs	r4, r4, #2
 800a316:	2600      	movs	r6, #0
 800a318:	42a6      	cmp	r6, r4
 800a31a:	d109      	bne.n	800a330 <__libc_init_array+0x24>
 800a31c:	4d0b      	ldr	r5, [pc, #44]	@ (800a34c <__libc_init_array+0x40>)
 800a31e:	4c0c      	ldr	r4, [pc, #48]	@ (800a350 <__libc_init_array+0x44>)
 800a320:	f000 f826 	bl	800a370 <_init>
 800a324:	1b64      	subs	r4, r4, r5
 800a326:	10a4      	asrs	r4, r4, #2
 800a328:	2600      	movs	r6, #0
 800a32a:	42a6      	cmp	r6, r4
 800a32c:	d105      	bne.n	800a33a <__libc_init_array+0x2e>
 800a32e:	bd70      	pop	{r4, r5, r6, pc}
 800a330:	f855 3b04 	ldr.w	r3, [r5], #4
 800a334:	4798      	blx	r3
 800a336:	3601      	adds	r6, #1
 800a338:	e7ee      	b.n	800a318 <__libc_init_array+0xc>
 800a33a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a33e:	4798      	blx	r3
 800a340:	3601      	adds	r6, #1
 800a342:	e7f2      	b.n	800a32a <__libc_init_array+0x1e>
 800a344:	0800a3f8 	.word	0x0800a3f8
 800a348:	0800a3f8 	.word	0x0800a3f8
 800a34c:	0800a3f8 	.word	0x0800a3f8
 800a350:	0800a3fc 	.word	0x0800a3fc

0800a354 <memcpy>:
 800a354:	440a      	add	r2, r1
 800a356:	4291      	cmp	r1, r2
 800a358:	f100 33ff 	add.w	r3, r0, #4294967295
 800a35c:	d100      	bne.n	800a360 <memcpy+0xc>
 800a35e:	4770      	bx	lr
 800a360:	b510      	push	{r4, lr}
 800a362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a36a:	4291      	cmp	r1, r2
 800a36c:	d1f9      	bne.n	800a362 <memcpy+0xe>
 800a36e:	bd10      	pop	{r4, pc}

0800a370 <_init>:
 800a370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a372:	bf00      	nop
 800a374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a376:	bc08      	pop	{r3}
 800a378:	469e      	mov	lr, r3
 800a37a:	4770      	bx	lr

0800a37c <_fini>:
 800a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37e:	bf00      	nop
 800a380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a382:	bc08      	pop	{r3}
 800a384:	469e      	mov	lr, r3
 800a386:	4770      	bx	lr
